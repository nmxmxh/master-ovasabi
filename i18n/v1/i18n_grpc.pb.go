// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: i18n/v1/i18n.proto

package i18n

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	I18NService_CreateTranslation_FullMethodName = "/i18n.v1.I18nService/CreateTranslation"
	I18NService_GetTranslation_FullMethodName    = "/i18n.v1.I18nService/GetTranslation"
	I18NService_ListTranslations_FullMethodName  = "/i18n.v1.I18nService/ListTranslations"
	I18NService_TranslateSite_FullMethodName     = "/i18n.v1.I18nService/TranslateSite"
)

// I18NServiceClient is the client API for I18NService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// I18nService manages translations and localization
type I18NServiceClient interface {
	CreateTranslation(ctx context.Context, in *CreateTranslationRequest, opts ...grpc.CallOption) (*CreateTranslationResponse, error)
	GetTranslation(ctx context.Context, in *GetTranslationRequest, opts ...grpc.CallOption) (*GetTranslationResponse, error)
	ListTranslations(ctx context.Context, in *ListTranslationsRequest, opts ...grpc.CallOption) (*ListTranslationsResponse, error)
	TranslateSite(ctx context.Context, in *TranslateSiteRequest, opts ...grpc.CallOption) (*TranslateSiteResponse, error)
}

type i18NServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewI18NServiceClient(cc grpc.ClientConnInterface) I18NServiceClient {
	return &i18NServiceClient{cc}
}

func (c *i18NServiceClient) CreateTranslation(ctx context.Context, in *CreateTranslationRequest, opts ...grpc.CallOption) (*CreateTranslationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTranslationResponse)
	err := c.cc.Invoke(ctx, I18NService_CreateTranslation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *i18NServiceClient) GetTranslation(ctx context.Context, in *GetTranslationRequest, opts ...grpc.CallOption) (*GetTranslationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTranslationResponse)
	err := c.cc.Invoke(ctx, I18NService_GetTranslation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *i18NServiceClient) ListTranslations(ctx context.Context, in *ListTranslationsRequest, opts ...grpc.CallOption) (*ListTranslationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTranslationsResponse)
	err := c.cc.Invoke(ctx, I18NService_ListTranslations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *i18NServiceClient) TranslateSite(ctx context.Context, in *TranslateSiteRequest, opts ...grpc.CallOption) (*TranslateSiteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TranslateSiteResponse)
	err := c.cc.Invoke(ctx, I18NService_TranslateSite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// I18NServiceServer is the server API for I18NService service.
// All implementations must embed UnimplementedI18NServiceServer
// for forward compatibility.
//
// I18nService manages translations and localization
type I18NServiceServer interface {
	CreateTranslation(context.Context, *CreateTranslationRequest) (*CreateTranslationResponse, error)
	GetTranslation(context.Context, *GetTranslationRequest) (*GetTranslationResponse, error)
	ListTranslations(context.Context, *ListTranslationsRequest) (*ListTranslationsResponse, error)
	TranslateSite(context.Context, *TranslateSiteRequest) (*TranslateSiteResponse, error)
	mustEmbedUnimplementedI18NServiceServer()
}

// UnimplementedI18NServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedI18NServiceServer struct{}

func (UnimplementedI18NServiceServer) CreateTranslation(context.Context, *CreateTranslationRequest) (*CreateTranslationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTranslation not implemented")
}
func (UnimplementedI18NServiceServer) GetTranslation(context.Context, *GetTranslationRequest) (*GetTranslationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTranslation not implemented")
}
func (UnimplementedI18NServiceServer) ListTranslations(context.Context, *ListTranslationsRequest) (*ListTranslationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTranslations not implemented")
}
func (UnimplementedI18NServiceServer) TranslateSite(context.Context, *TranslateSiteRequest) (*TranslateSiteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TranslateSite not implemented")
}
func (UnimplementedI18NServiceServer) mustEmbedUnimplementedI18NServiceServer() {}
func (UnimplementedI18NServiceServer) testEmbeddedByValue()                     {}

// UnsafeI18NServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to I18NServiceServer will
// result in compilation errors.
type UnsafeI18NServiceServer interface {
	mustEmbedUnimplementedI18NServiceServer()
}

func RegisterI18NServiceServer(s grpc.ServiceRegistrar, srv I18NServiceServer) {
	// If the following call pancis, it indicates UnimplementedI18NServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&I18NService_ServiceDesc, srv)
}

func _I18NService_CreateTranslation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTranslationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(I18NServiceServer).CreateTranslation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: I18NService_CreateTranslation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(I18NServiceServer).CreateTranslation(ctx, req.(*CreateTranslationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _I18NService_GetTranslation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTranslationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(I18NServiceServer).GetTranslation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: I18NService_GetTranslation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(I18NServiceServer).GetTranslation(ctx, req.(*GetTranslationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _I18NService_ListTranslations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTranslationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(I18NServiceServer).ListTranslations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: I18NService_ListTranslations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(I18NServiceServer).ListTranslations(ctx, req.(*ListTranslationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _I18NService_TranslateSite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TranslateSiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(I18NServiceServer).TranslateSite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: I18NService_TranslateSite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(I18NServiceServer).TranslateSite(ctx, req.(*TranslateSiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// I18NService_ServiceDesc is the grpc.ServiceDesc for I18NService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var I18NService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "i18n.v1.I18nService",
	HandlerType: (*I18NServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTranslation",
			Handler:    _I18NService_CreateTranslation_Handler,
		},
		{
			MethodName: "GetTranslation",
			Handler:    _I18NService_GetTranslation_Handler,
		},
		{
			MethodName: "ListTranslations",
			Handler:    _I18NService_ListTranslations_Handler,
		},
		{
			MethodName: "TranslateSite",
			Handler:    _I18NService_TranslateSite_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "i18n/v1/i18n.proto",
}
