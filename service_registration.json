[
  {
    "name": "user",
    "version": "v1",
    "capabilities": [
      "user_mgmt",
      "profile",
      "rbac",
      "authentication",
      "authorization",
      "audit",
      "social_graph",
      "group_management",
      "moderation"
    ],
    "dependencies": ["security", "localization"],
    "schema": {
      "proto_path": "api/protos/user/v1/user.proto",
      "methods": [
        "CreateUser",
        "GetUser",
        "GetUserByUsername",
        "GetUserByEmail",
        "UpdateUser",
        "DeleteUser",
        "ListUsers",
        "UpdatePassword",
        "UpdateProfile",
        "RegisterInterest",
        "CreateReferral",
        "CreateSession",
        "GetSession",
        "RevokeSession",
        "ListSessions",
        "AssignRole",
        "RemoveRole",
        "ListRoles",
        "ListPermissions",
        "ListUserEvents",
        "ListAuditLogs",
        "InitiateSSO",
        "InitiateMFA",
        "SyncSCIM",
        "AddFriend",
        "RemoveFriend",
        "ListFriends",
        "FollowUser",
        "UnfollowUser",
        "ListFollowers",
        "ListFollowing",
        "CreateUserGroup",
        "UpdateUserGroup",
        "DeleteUserGroup",
        "ListUserGroups",
        "ListUserGroupMembers",
        "SuggestConnections",
        "ListConnections",
        "BlockUser",
        "UnblockUser",
        "MuteUser",
        "UnmuteUser",
        "ReportUser",
        "BlockGroupContent",
        "ReportGroupContent",
        "MuteGroupContent",
        "MuteGroupIndividuals",
        "BlockGroupIndividuals",
        "UnmuteGroup",
        "UnmuteGroupIndividuals",
        "UnblockGroupIndividuals"
      ]
    },
    "endpoints": [
      {
        "path": "/api/user_ops",
        "method": "POST",
        "actions": ["create_user", "get_user", "update_user", "delete_user", "list_users"],
        "description": "Composable user operations endpoint. Each action maps to a gRPC/proto method and supports metadata enrichment."
      }
    ],
    "models": [
      "User",
      "UserProfile",
      "CreateUserRequest",
      "UpdateUserRequest",
      "DeleteUserRequest",
      "ListUsersRequest",
      "Session",
      "AssignRoleRequest",
      "RemoveRoleRequest",
      "ListRolesRequest",
      "ListPermissionsRequest"
    ],
    "health_check": "/health/user",
    "metrics": "/metrics/user",
    "metadata_enrichment": true,
    "action_map": {
      "create_user": {
        "proto_method": "CreateUser",
        "request_model": "CreateUserRequest",
        "response_model": "CreateUserResponse"
      },
      "get_user": {
        "proto_method": "GetUser",
        "request_model": "GetUserRequest",
        "response_model": "GetUserResponse"
      },
      "update_user": {
        "proto_method": "UpdateUser",
        "request_model": "UpdateUserRequest",
        "response_model": "UpdateUserResponse"
      },
      "delete_user": {
        "proto_method": "DeleteUser",
        "request_model": "DeleteUserRequest",
        "response_model": "DeleteUserResponse"
      },
      "list_users": {
        "proto_method": "ListUsers",
        "request_model": "ListUsersRequest",
        "response_model": "ListUsersResponse"
      }
    }
  },
  {
    "name": "notification",
    "version": "v1",
    "capabilities": [
      "multi_channel",
      "templates",
      "real_time",
      "streaming",
      "broadcast",
      "pubsub",
      "asset_streaming",
      "preferences",
      "analytics",
      "metadata_enrichment"
    ],
    "dependencies": ["user"],
    "schema": {
      "proto_path": "api/protos/notification/v1/notification.proto",
      "methods": [
        "SendNotification",
        "SendEmail",
        "SendSMS",
        "SendPushNotification",
        "BroadcastEvent",
        "SubscribeToEvents",
        "StreamAssetChunks",
        "PublishAssetChunk",
        "GetNotification",
        "ListNotifications",
        "AcknowledgeNotification",
        "UpdateNotificationPreferences",
        "ListNotificationEvents"
      ]
    },
    "endpoints": [
      {
        "path": "/api/notification_ops",
        "method": "POST",
        "actions": [
          "send_notification",
          "send_email",
          "send_sms",
          "send_push",
          "list_notifications"
        ],
        "description": "Composable notification operations endpoint. Each action maps to a gRPC/proto method and supports metadata enrichment."
      }
    ],
    "models": [
      "Notification",
      "SendNotificationRequest",
      "SendNotificationResponse",
      "SendEmailRequest",
      "SendEmailResponse",
      "SendSMSRequest",
      "SendSMSResponse",
      "SendPushNotificationRequest",
      "SendPushNotificationResponse",
      "BroadcastEventRequest",
      "BroadcastEventResponse",
      "NotificationEvent",
      "AssetChunk",
      "GetNotificationRequest",
      "GetNotificationResponse",
      "ListNotificationsRequest",
      "ListNotificationsResponse",
      "AcknowledgeNotificationRequest",
      "AcknowledgeNotificationResponse",
      "NotificationPreferences",
      "UpdateNotificationPreferencesRequest",
      "UpdateNotificationPreferencesResponse",
      "ListNotificationEventsRequest",
      "ListNotificationEventsResponse"
    ],
    "health_check": "/health/notification",
    "metrics": "/metrics/notification",
    "metadata_enrichment": true,
    "action_map": {
      "send_notification": {
        "proto_method": "SendNotification",
        "request_model": "SendNotificationRequest",
        "response_model": "SendNotificationResponse",
        "rest_required_fields": ["user_id", "title", "body", "channel", "metadata"]
      },
      "send_email": {
        "proto_method": "SendEmail",
        "request_model": "SendEmailRequest",
        "response_model": "SendEmailResponse",
        "rest_required_fields": ["to", "subject", "body", "metadata"]
      },
      "send_sms": {
        "proto_method": "SendSMS",
        "request_model": "SendSMSRequest",
        "response_model": "SendSMSResponse",
        "rest_required_fields": ["to", "message", "metadata"]
      },
      "send_push": {
        "proto_method": "SendPushNotification",
        "request_model": "SendPushNotificationRequest",
        "response_model": "SendPushNotificationResponse",
        "rest_required_fields": ["user_id", "title", "message", "metadata"]
      },
      "list_notifications": {
        "proto_method": "ListNotifications",
        "request_model": "ListNotificationsRequest",
        "response_model": "ListNotificationsResponse",
        "rest_required_fields": ["user_id", "page"]
      }
    }
  },
  {
    "name": "campaign",
    "version": "v1",
    "capabilities": ["campaign_mgmt", "analytics", "metadata_enrichment"],
    "dependencies": ["user", "notification", "localization"],
    "schema": {
      "proto_path": "api/protos/campaign/v1/campaign.proto",
      "methods": [
        "CreateCampaign",
        "GetCampaign",
        "UpdateCampaign",
        "DeleteCampaign",
        "ListCampaigns"
      ]
    },
    "endpoints": [
      {
        "path": "/api/campaign_ops",
        "method": "POST",
        "actions": ["create_campaign", "update_campaign", "list_campaigns"],
        "description": "Composable campaign operations endpoint. Each action maps to a gRPC/proto method and supports metadata enrichment."
      }
    ],
    "models": [
      "Campaign",
      "CreateCampaignRequest",
      "UpdateCampaignRequest",
      "DeleteCampaignRequest",
      "ListCampaignsRequest"
    ],
    "health_check": "/health/campaign",
    "metrics": "/metrics/campaign",
    "metadata_enrichment": true,
    "action_map": {
      "create_campaign": {
        "proto_method": "CreateCampaign",
        "request_model": "CreateCampaignRequest",
        "response_model": "CreateCampaignResponse"
      },
      "update_campaign": {
        "proto_method": "UpdateCampaign",
        "request_model": "UpdateCampaignRequest",
        "response_model": "UpdateCampaignResponse"
      },
      "list_campaigns": {
        "proto_method": "ListCampaigns",
        "request_model": "ListCampaignsRequest",
        "response_model": "ListCampaignsResponse"
      }
    }
  },
  {
    "name": "referral",
    "version": "v1",
    "capabilities": ["referral", "rewards", "fraud", "metadata_enrichment"],
    "dependencies": ["user", "notification", "commerce"],
    "schema": {
      "proto_path": "api/protos/referral/v1/referral.proto",
      "methods": ["CreateReferral", "GetReferral", "GetReferralStats"]
    },
    "endpoints": [
      {
        "path": "/api/referral_ops",
        "method": "POST",
        "actions": ["create_referral", "get_referral", "get_referral_stats"],
        "description": "Composable referral operations endpoint. Each action maps to a gRPC/proto method and supports metadata enrichment."
      }
    ],
    "models": [
      "Referral",
      "CreateReferralRequest",
      "CreateReferralResponse",
      "GetReferralRequest",
      "GetReferralResponse",
      "GetReferralStatsRequest",
      "GetReferralStatsResponse",
      "ReferralDetail"
    ],
    "health_check": "/health/referral",
    "metrics": "/metrics/referral",
    "metadata_enrichment": true,
    "action_map": {
      "create_referral": {
        "proto_method": "CreateReferral",
        "request_model": "CreateReferralRequest",
        "response_model": "CreateReferralResponse",
        "rest_required_fields": ["referrer_master_id", "campaign_id", "device_hash", "metadata"]
      },
      "get_referral": {
        "proto_method": "GetReferral",
        "request_model": "GetReferralRequest",
        "response_model": "GetReferralResponse",
        "rest_required_fields": ["referral_code"]
      },
      "get_referral_stats": {
        "proto_method": "GetReferralStats",
        "request_model": "GetReferralStatsRequest",
        "response_model": "GetReferralStatsResponse",
        "rest_required_fields": ["master_id"]
      }
    }
  },
  {
    "name": "security",
    "version": "v1",
    "capabilities": ["policies", "audit", "compliance"],
    "dependencies": ["all_services"],
    "schema": {},
    "endpoints": [],
    "models": [],
    "health_check": "/health/security",
    "metrics": "/metrics/security"
  },
  {
    "name": "content",
    "version": "v1",
    "capabilities": [
      "articles",
      "micro_posts",
      "video",
      "comments",
      "reactions",
      "fts",
      "metadata_enrichment"
    ],
    "dependencies": ["user", "notification", "search", "contentmoderation"],
    "schema": {
      "proto_path": "api/protos/content/v1/content.proto",
      "methods": [
        "CreateContent",
        "GetContent",
        "UpdateContent",
        "DeleteContent",
        "ListContent",
        "SearchContent",
        "AddComment",
        "ListComments",
        "DeleteComment",
        "AddReaction",
        "ListReactions",
        "LogContentEvent",
        "ModerateContent"
      ]
    },
    "endpoints": [
      {
        "path": "/api/content_ops",
        "method": "POST",
        "actions": [
          "create_content",
          "update_content",
          "delete_content",
          "get_content",
          "list_content",
          "add_reaction"
        ],
        "description": "Composable content operations endpoint. Each action maps to a gRPC/proto method and supports metadata enrichment."
      }
    ],
    "models": [
      "Content",
      "Comment",
      "ContentEvent",
      "CreateContentRequest",
      "UpdateContentRequest",
      "DeleteContentRequest",
      "ListContentRequest",
      "SearchContentRequest",
      "AddCommentRequest",
      "AddReactionRequest"
    ],
    "health_check": "/health/content",
    "metrics": "/metrics/content",
    "metadata_enrichment": true,
    "action_map": {
      "create_content": {
        "proto_method": "CreateContent",
        "request_model": "CreateContentRequest",
        "response_model": "ContentResponse"
      },
      "update_content": {
        "proto_method": "UpdateContent",
        "request_model": "UpdateContentRequest",
        "response_model": "ContentResponse"
      },
      "delete_content": {
        "proto_method": "DeleteContent",
        "request_model": "DeleteContentRequest",
        "response_model": "DeleteContentResponse"
      },
      "get_content": {
        "proto_method": "GetContent",
        "request_model": "GetContentRequest",
        "response_model": "ContentResponse"
      },
      "list_content": {
        "proto_method": "ListContent",
        "request_model": "ListContentRequest",
        "response_model": "ListContentResponse"
      },
      "add_reaction": {
        "proto_method": "AddReaction",
        "request_model": "AddReactionRequest",
        "response_model": "ReactionResponse"
      }
    }
  },
  {
    "name": "commerce",
    "version": "v1",
    "capabilities": [
      "orders",
      "payments",
      "billing",
      "pricing",
      "rewards",
      "quotes",
      "transactions",
      "marketplace",
      "exchange",
      "metadata_enrichment"
    ],
    "dependencies": ["user", "notification", "localization"],
    "schema": {
      "proto_path": "api/protos/commerce/v1/commerce.proto",
      "methods": [
        "CreateQuote",
        "GetQuote",
        "ListQuotes",
        "CreateOrder",
        "GetOrder",
        "ListOrders",
        "UpdateOrderStatus",
        "InitiatePayment",
        "ConfirmPayment",
        "RefundPayment",
        "GetTransaction",
        "ListTransactions",
        "GetBalance",
        "ListBalances",
        "ListEvents",
        "CreateInvestmentAccount",
        "GetInvestmentAccount",
        "PlaceInvestmentOrder",
        "GetPortfolio",
        "ListAssets",
        "ListPortfolios",
        "CreateBankAccount",
        "InitiateBankTransfer",
        "GetBankStatement",
        "CreateListing",
        "PlaceMarketplaceOrder",
        "MakeOffer",
        "ListListings",
        "PlaceExchangeOrder",
        "GetExchangeRate",
        "ListExchangePairs",
        "CreateExchangePair",
        "CreateExchangeRate"
      ]
    },
    "endpoints": [
      {
        "path": "/api/commerce_ops",
        "method": "POST",
        "actions": ["create_quote", "get_quote", "create_order", "get_order", "initiate_payment"],
        "description": "Composable commerce operations endpoint. Each action maps to a gRPC/proto method and supports metadata enrichment."
      }
    ],
    "models": [
      "Quote",
      "CreateQuoteRequest",
      "CreateQuoteResponse",
      "GetQuoteRequest",
      "GetQuoteResponse",
      "Order",
      "OrderItem",
      "CreateOrderRequest",
      "CreateOrderResponse",
      "GetOrderRequest",
      "GetOrderResponse",
      "InitiatePaymentRequest",
      "InitiatePaymentResponse",
      "Payment"
    ],
    "health_check": "/health/commerce",
    "metrics": "/metrics/commerce",
    "metadata_enrichment": true,
    "action_map": {
      "create_quote": {
        "proto_method": "CreateQuote",
        "request_model": "CreateQuoteRequest",
        "response_model": "CreateQuoteResponse",
        "rest_required_fields": ["user_id", "product_id", "amount", "currency", "metadata"]
      },
      "get_quote": {
        "proto_method": "GetQuote",
        "request_model": "GetQuoteRequest",
        "response_model": "GetQuoteResponse",
        "rest_required_fields": ["quote_id"]
      },
      "create_order": {
        "proto_method": "CreateOrder",
        "request_model": "CreateOrderRequest",
        "response_model": "CreateOrderResponse",
        "rest_required_fields": ["user_id", "items", "currency", "metadata"]
      },
      "get_order": {
        "proto_method": "GetOrder",
        "request_model": "GetOrderRequest",
        "response_model": "GetOrderResponse",
        "rest_required_fields": ["order_id"]
      },
      "initiate_payment": {
        "proto_method": "InitiatePayment",
        "request_model": "InitiatePaymentRequest",
        "response_model": "InitiatePaymentResponse",
        "rest_required_fields": ["order_id", "user_id", "amount", "currency", "method", "metadata"]
      }
    }
  },
  {
    "name": "media",
    "version": "v1",
    "capabilities": ["asset_ingestion", "streaming", "metadata_enrichment"],
    "dependencies": ["notification"],
    "schema": {
      "proto_path": "api/protos/media/v1/media.proto",
      "methods": [
        "UploadLightMedia",
        "StartHeavyMediaUpload",
        "StreamMediaChunk",
        "CompleteMediaUpload",
        "GetMedia",
        "StreamMediaContent",
        "DeleteMedia",
        "ListUserMedia",
        "ListSystemMedia",
        "BroadcastSystemMedia"
      ]
    },
    "endpoints": [
      {
        "path": "/api/media_ops",
        "method": "POST",
        "actions": ["upload_light", "upload_heavy_start", "get_media"],
        "description": "Composable media operations endpoint."
      }
    ],
    "models": ["Media", "UploadLightMediaRequest", "StartHeavyMediaUploadRequest"],
    "health_check": "/health/media",
    "metrics": "/metrics/media",
    "metadata_enrichment": true
  },
  {
    "name": "localization",
    "version": "v1",
    "capabilities": ["i18n", "translation", "locale_based_pricing"],
    "dependencies": [],
    "schema": {},
    "endpoints": [],
    "models": [],
    "health_check": "/health/localization",
    "metrics": "/metrics/localization"
  },
  {
    "name": "search",
    "version": "v1",
    "capabilities": [
      "full_text_search",
      "fuzzy_search",
      "entity_search",
      "suggest",
      "autocomplete",
      "faceted_filtering",
      "metadata_enrichment"
    ],
    "dependencies": ["content", "user", "campaign", "nexus"],
    "schema": {
      "proto_path": "api/protos/search/v1/search.proto",
      "methods": ["Search", "Suggest"]
    },
    "endpoints": [
      {
        "path": "/api/search_ops",
        "method": "POST",
        "actions": ["search", "suggest"],
        "description": "Composable search operations endpoint. Each action maps to a gRPC/proto method and supports metadata enrichment."
      }
    ],
    "models": [
      "SearchRequest",
      "SearchResponse",
      "SearchResult",
      "SuggestRequest",
      "SuggestResponse"
    ],
    "health_check": "/health/search",
    "metrics": "/metrics/search",
    "metadata_enrichment": true,
    "action_map": {
      "search": {
        "proto_method": "Search",
        "request_model": "SearchRequest",
        "response_model": "SearchResponse",
        "rest_required_fields": ["query", "types", "page_number", "page_size", "metadata"]
      },
      "suggest": {
        "proto_method": "Suggest",
        "request_model": "SuggestRequest",
        "response_model": "SuggestResponse",
        "rest_required_fields": ["prefix", "types", "limit", "metadata"]
      }
    }
  },
  {
    "name": "admin",
    "version": "v1",
    "capabilities": [
      "admin_mgmt",
      "role_mgmt",
      "audit",
      "impersonation",
      "settings",
      "metadata_enrichment"
    ],
    "dependencies": ["user", "security", "nexus"],
    "schema": {
      "proto_path": "api/protos/admin/v1/admin.proto",
      "methods": [
        "CreateUser",
        "UpdateUser",
        "DeleteUser",
        "ListUsers",
        "GetUser",
        "CreateRole",
        "UpdateRole",
        "DeleteRole",
        "ListRoles",
        "AssignRole",
        "RevokeRole",
        "GetAuditLogs",
        "GetSettings",
        "UpdateSettings",
        "CheckPermission"
      ]
    },
    "endpoints": [
      {
        "path": "/api/admin_ops",
        "method": "POST",
        "actions": [
          "create_user",
          "update_user",
          "delete_user",
          "get_user",
          "list_users",
          "create_role",
          "update_role",
          "delete_role",
          "list_roles",
          "assign_role",
          "revoke_role"
        ],
        "description": "Composable admin operations endpoint. Each action maps to a gRPC/proto method and supports metadata enrichment."
      }
    ],
    "models": [
      "User",
      "Role",
      "AuditLog",
      "Settings",
      "CreateUserRequest",
      "CreateUserResponse",
      "UpdateUserRequest",
      "UpdateUserResponse",
      "DeleteUserRequest",
      "DeleteUserResponse",
      "ListUsersRequest",
      "ListUsersResponse",
      "GetUserRequest",
      "GetUserResponse",
      "CreateRoleRequest",
      "CreateRoleResponse",
      "UpdateRoleRequest",
      "UpdateRoleResponse",
      "DeleteRoleRequest",
      "DeleteRoleResponse",
      "ListRolesRequest",
      "ListRolesResponse",
      "AssignRoleRequest",
      "AssignRoleResponse",
      "RevokeRoleRequest",
      "RevokeRoleResponse",
      "GetAuditLogsRequest",
      "GetAuditLogsResponse",
      "GetSettingsRequest",
      "GetSettingsResponse",
      "UpdateSettingsRequest",
      "UpdateSettingsResponse",
      "CheckPermissionRequest",
      "CheckPermissionResponse"
    ],
    "health_check": "/health/admin",
    "metrics": "/metrics/admin",
    "metadata_enrichment": true,
    "action_map": {
      "create_user": {
        "proto_method": "CreateUser",
        "request_model": "CreateUserRequest",
        "response_model": "CreateUserResponse",
        "rest_required_fields": ["email", "name", "metadata"]
      },
      "update_user": {
        "proto_method": "UpdateUser",
        "request_model": "UpdateUserRequest",
        "response_model": "UpdateUserResponse",
        "rest_required_fields": ["user_id", "name", "email", "metadata"]
      },
      "delete_user": {
        "proto_method": "DeleteUser",
        "request_model": "DeleteUserRequest",
        "response_model": "DeleteUserResponse",
        "rest_required_fields": ["user_id"]
      },
      "get_user": {
        "proto_method": "GetUser",
        "request_model": "GetUserRequest",
        "response_model": "GetUserResponse",
        "rest_required_fields": ["user_id"]
      },
      "list_users": {
        "proto_method": "ListUsers",
        "request_model": "ListUsersRequest",
        "response_model": "ListUsersResponse",
        "rest_required_fields": ["page", "page_size"]
      },
      "create_role": {
        "proto_method": "CreateRole",
        "request_model": "CreateRoleRequest",
        "response_model": "CreateRoleResponse",
        "rest_required_fields": ["name", "metadata"]
      },
      "update_role": {
        "proto_method": "UpdateRole",
        "request_model": "UpdateRoleRequest",
        "response_model": "UpdateRoleResponse",
        "rest_required_fields": ["role_id", "name", "metadata"]
      },
      "delete_role": {
        "proto_method": "DeleteRole",
        "request_model": "DeleteRoleRequest",
        "response_model": "DeleteRoleResponse",
        "rest_required_fields": ["role_id"]
      },
      "list_roles": {
        "proto_method": "ListRoles",
        "request_model": "ListRolesRequest",
        "response_model": "ListRolesResponse",
        "rest_required_fields": ["page", "page_size"]
      },
      "assign_role": {
        "proto_method": "AssignRole",
        "request_model": "AssignRoleRequest",
        "response_model": "AssignRoleResponse",
        "rest_required_fields": ["user_id", "role_id"]
      },
      "revoke_role": {
        "proto_method": "RevokeRole",
        "request_model": "RevokeRoleRequest",
        "response_model": "RevokeRoleResponse",
        "rest_required_fields": ["user_id", "role_id"]
      }
    }
  },
  {
    "name": "analytics",
    "version": "v1",
    "capabilities": ["event", "usage", "reporting", "metadata_enrichment"],
    "dependencies": ["user", "content", "product"],
    "schema": {
      "proto_path": "api/protos/analytics/v1/analytics.proto",
      "methods": [
        "TrackEvent",
        "BatchTrackEvents",
        "GetUserEvents",
        "GetProductEvents",
        "GetReport",
        "ListReports",
        "CaptureEvent",
        "ListEvents",
        "EnrichEventMetadata"
      ]
    },
    "endpoints": [
      {
        "path": "/api/analytics_ops",
        "method": "POST",
        "actions": [
          "capture_event",
          "list_events",
          "enrich_event_metadata",
          "track_event",
          "batch_track_events",
          "get_user_events",
          "get_product_events",
          "get_report",
          "list_reports"
        ],
        "description": "Composable analytics operations endpoint. Each action maps to a gRPC/proto method and supports metadata enrichment."
      }
    ],
    "models": [
      "Event",
      "TrackEventRequest",
      "TrackEventResponse",
      "BatchTrackEventsRequest",
      "BatchTrackEventsResponse",
      "GetUserEventsRequest",
      "GetUserEventsResponse",
      "GetProductEventsRequest",
      "GetProductEventsResponse",
      "GetReportRequest",
      "GetReportResponse",
      "ListReportsRequest",
      "ListReportsResponse",
      "Report",
      "CaptureEventRequest",
      "CaptureEventResponse",
      "AnalyticsEvent",
      "ListEventsRequest",
      "ListEventsResponse",
      "EnrichEventMetadataRequest",
      "EnrichEventMetadataResponse"
    ],
    "health_check": "/health/analytics",
    "metrics": "/metrics/analytics",
    "metadata_enrichment": true,
    "action_map": {
      "capture_event": {
        "proto_method": "CaptureEvent",
        "request_model": "CaptureEventRequest",
        "response_model": "CaptureEventResponse",
        "rest_required_fields": [
          "event_type",
          "user_id",
          "user_email",
          "properties",
          "groups",
          "context",
          "gdpr_obscure"
        ]
      },
      "list_events": {
        "proto_method": "ListEvents",
        "request_model": "ListEventsRequest",
        "response_model": "ListEventsResponse",
        "rest_required_fields": []
      },
      "enrich_event_metadata": {
        "proto_method": "EnrichEventMetadata",
        "request_model": "EnrichEventMetadataRequest",
        "response_model": "EnrichEventMetadataResponse",
        "rest_required_fields": ["event_id", "new_fields"]
      },
      "track_event": {
        "proto_method": "TrackEvent",
        "request_model": "TrackEventRequest",
        "response_model": "TrackEventResponse",
        "rest_required_fields": ["event"]
      },
      "batch_track_events": {
        "proto_method": "BatchTrackEvents",
        "request_model": "BatchTrackEventsRequest",
        "response_model": "BatchTrackEventsResponse",
        "rest_required_fields": ["events"]
      },
      "get_user_events": {
        "proto_method": "GetUserEvents",
        "request_model": "GetUserEventsRequest",
        "response_model": "GetUserEventsResponse",
        "rest_required_fields": ["user_id", "page", "page_size"]
      },
      "get_product_events": {
        "proto_method": "GetProductEvents",
        "request_model": "GetProductEventsRequest",
        "response_model": "GetProductEventsResponse",
        "rest_required_fields": ["product_id", "page", "page_size"]
      },
      "get_report": {
        "proto_method": "GetReport",
        "request_model": "GetReportRequest",
        "response_model": "GetReportResponse",
        "rest_required_fields": ["report_id", "parameters"]
      },
      "list_reports": {
        "proto_method": "ListReports",
        "request_model": "ListReportsRequest",
        "response_model": "ListReportsResponse",
        "rest_required_fields": ["page", "page_size"]
      }
    }
  },
  {
    "name": "contentmoderation",
    "version": "v1",
    "capabilities": ["moderation", "compliance", "flagging", "review", "metadata_enrichment"],
    "dependencies": ["content", "user"],
    "schema": {
      "proto_path": "api/protos/contentmoderation/v1/contentmoderation.proto",
      "methods": [
        "SubmitContentForModeration",
        "GetModerationResult",
        "ListFlaggedContent",
        "ApproveContent",
        "RejectContent"
      ]
    },
    "endpoints": [
      {
        "path": "/api/contentmoderation_ops",
        "method": "POST",
        "actions": [
          "submit_content_for_moderation",
          "get_moderation_result",
          "list_flagged_content",
          "approve_content",
          "reject_content"
        ],
        "description": "Composable content moderation operations endpoint. Each action maps to a gRPC/proto method and supports metadata enrichment."
      }
    ],
    "models": [
      "ModerationResult",
      "SubmitContentForModerationRequest",
      "SubmitContentForModerationResponse",
      "GetModerationResultRequest",
      "GetModerationResultResponse",
      "ListFlaggedContentRequest",
      "ListFlaggedContentResponse",
      "ApproveContentRequest",
      "ApproveContentResponse",
      "RejectContentRequest",
      "RejectContentResponse"
    ],
    "health_check": "/health/contentmoderation",
    "metrics": "/metrics/contentmoderation",
    "metadata_enrichment": true,
    "action_map": {
      "submit_content_for_moderation": {
        "proto_method": "SubmitContentForModeration",
        "request_model": "SubmitContentForModerationRequest",
        "response_model": "SubmitContentForModerationResponse",
        "rest_required_fields": ["content_id", "user_id", "content_type", "content", "metadata"]
      },
      "get_moderation_result": {
        "proto_method": "GetModerationResult",
        "request_model": "GetModerationResultRequest",
        "response_model": "GetModerationResultResponse",
        "rest_required_fields": ["content_id"]
      },
      "list_flagged_content": {
        "proto_method": "ListFlaggedContent",
        "request_model": "ListFlaggedContentRequest",
        "response_model": "ListFlaggedContentResponse",
        "rest_required_fields": ["page", "page_size", "status"]
      },
      "approve_content": {
        "proto_method": "ApproveContent",
        "request_model": "ApproveContentRequest",
        "response_model": "ApproveContentResponse",
        "rest_required_fields": ["content_id", "metadata"]
      },
      "reject_content": {
        "proto_method": "RejectContent",
        "request_model": "RejectContentRequest",
        "response_model": "RejectContentResponse",
        "rest_required_fields": ["content_id", "reason", "metadata"]
      }
    }
  },
  {
    "name": "talent",
    "version": "v1",
    "capabilities": ["profiles", "bookings"],
    "dependencies": ["user"],
    "schema": {},
    "endpoints": [],
    "models": [],
    "health_check": "/health/talent",
    "metrics": "/metrics/talent"
  },
  {
    "name": "nexus",
    "version": "v1",
    "capabilities": [
      "orchestration",
      "pattern_registration",
      "pattern_mining",
      "introspection",
      "metadata_enrichment"
    ],
    "dependencies": ["all_services"],
    "schema": {
      "proto_path": "api/protos/nexus/v1/nexus.proto",
      "methods": [
        "RegisterPattern",
        "ListPatterns",
        "Orchestrate",
        "TracePattern",
        "MinePatterns",
        "Feedback",
        "HandleOps"
      ]
    },
    "endpoints": [
      {
        "path": "/api/nexus_ops",
        "method": "POST",
        "actions": ["handle_ops"],
        "description": "Composable nexus operations endpoint. Main action is handle_ops, which maps to the HandleOps gRPC method and supports metadata enrichment."
      }
    ],
    "models": [
      "RegisterPatternRequest",
      "RegisterPatternResponse",
      "ListPatternsRequest",
      "ListPatternsResponse",
      "Pattern",
      "OrchestrateRequest",
      "OrchestrateResponse",
      "TracePatternRequest",
      "TracePatternResponse",
      "TraceStep",
      "MinePatternsRequest",
      "MinePatternsResponse",
      "FeedbackRequest",
      "FeedbackResponse",
      "HandleOpsRequest",
      "HandleOpsResponse"
    ],
    "health_check": "/health/nexus",
    "metrics": "/metrics/nexus",
    "metadata_enrichment": true,
    "action_map": {
      "handle_ops": {
        "proto_method": "HandleOps",
        "request_model": "HandleOpsRequest",
        "response_model": "HandleOpsResponse",
        "rest_required_fields": ["op", "params", "metadata"]
      }
    }
  },
  {
    "name": "messaging",
    "version": "v1",
    "capabilities": [
      "direct_messaging",
      "group_messaging",
      "threads",
      "conversations",
      "chat_groups",
      "reactions",
      "preferences",
      "analytics_events",
      "real_time_streaming",
      "metadata_enrichment"
    ],
    "dependencies": ["user"],
    "schema": {
      "proto_path": "api/protos/messaging/v1/messaging.proto",
      "methods": [
        "SendMessage",
        "SendGroupMessage",
        "EditMessage",
        "DeleteMessage",
        "ReactToMessage",
        "GetMessage",
        "ListMessages",
        "ListThreads",
        "ListConversations",
        "StreamMessages",
        "StreamTyping",
        "StreamPresence",
        "MarkAsRead",
        "MarkAsDelivered",
        "AcknowledgeMessage",
        "CreateChatGroup",
        "AddChatGroupMember",
        "RemoveChatGroupMember",
        "ListChatGroupMembers",
        "UpdateMessagingPreferences",
        "ListMessageEvents"
      ]
    },
    "endpoints": [
      {
        "path": "/api/messaging_ops",
        "method": "POST",
        "actions": ["send_message", "list_messages", "update_preferences"],
        "description": "Composable messaging operations endpoint. Each action maps to a gRPC/proto method and supports metadata enrichment."
      }
    ],
    "models": [
      "Message",
      "Thread",
      "Conversation",
      "ChatGroup",
      "Reaction",
      "Attachment",
      "SendMessageRequest",
      "SendMessageResponse",
      "SendGroupMessageRequest",
      "SendGroupMessageResponse",
      "EditMessageRequest",
      "EditMessageResponse",
      "DeleteMessageRequest",
      "DeleteMessageResponse",
      "ReactToMessageRequest",
      "ReactToMessageResponse",
      "GetMessageRequest",
      "GetMessageResponse",
      "ListMessagesRequest",
      "ListMessagesResponse",
      "ListThreadsRequest",
      "ListThreadsResponse",
      "ListConversationsRequest",
      "ListConversationsResponse",
      "StreamMessagesRequest",
      "MessageEvent",
      "StreamTypingRequest",
      "TypingEvent",
      "StreamPresenceRequest",
      "PresenceEvent",
      "MarkAsReadRequest",
      "MarkAsReadResponse",
      "MarkAsDeliveredRequest",
      "MarkAsDeliveredResponse",
      "AcknowledgeMessageRequest",
      "AcknowledgeMessageResponse",
      "CreateChatGroupRequest",
      "CreateChatGroupResponse",
      "AddChatGroupMemberRequest",
      "AddChatGroupMemberResponse",
      "RemoveChatGroupMemberRequest",
      "RemoveChatGroupMemberResponse",
      "ListChatGroupMembersRequest",
      "ListChatGroupMembersResponse",
      "MessagingPreferences",
      "UpdateMessagingPreferencesRequest",
      "UpdateMessagingPreferencesResponse",
      "ListMessageEventsRequest",
      "ListMessageEventsResponse"
    ],
    "health_check": "/health/messaging",
    "metrics": "/metrics/messaging",
    "metadata_enrichment": true,
    "action_map": {
      "send_message": {
        "proto_method": "SendMessage",
        "request_model": "SendMessageRequest",
        "response_model": "SendMessageResponse",
        "rest_required_fields": [
          "thread_id",
          "conversation_id",
          "chat_group_id",
          "sender_id",
          "recipient_ids",
          "content",
          "type",
          "metadata"
        ]
      },
      "list_messages": {
        "proto_method": "ListMessages",
        "request_model": "ListMessagesRequest",
        "response_model": "ListMessagesResponse",
        "rest_required_fields": [
          "thread_id",
          "conversation_id",
          "chat_group_id",
          "page",
          "page_size",
          "metadata"
        ]
      },
      "update_preferences": {
        "proto_method": "UpdateMessagingPreferences",
        "request_model": "UpdateMessagingPreferencesRequest",
        "response_model": "UpdateMessagingPreferencesResponse",
        "rest_required_fields": ["user_id", "preferences"]
      }
    }
  },
  {
    "name": "product",
    "version": "v1",
    "capabilities": [
      "catalog",
      "listings",
      "inventory",
      "reviews",
      "variants",
      "metadata_enrichment"
    ],
    "dependencies": ["commerce", "user"],
    "schema": {
      "proto_path": "api/protos/product/v1/product.proto",
      "methods": [
        "CreateProduct",
        "UpdateProduct",
        "DeleteProduct",
        "GetProduct",
        "ListProducts",
        "SearchProducts",
        "UpdateInventory",
        "ListProductVariants"
      ]
    },
    "endpoints": [
      {
        "path": "/api/product_ops",
        "method": "POST",
        "actions": [
          "create_product",
          "get_product",
          "update_product",
          "delete_product",
          "list_products"
        ],
        "description": "Composable product operations endpoint. Each action maps to a gRPC/proto method and supports metadata enrichment."
      }
    ],
    "models": [
      "Product",
      "ProductVariant",
      "CreateProductRequest",
      "CreateProductResponse",
      "UpdateProductRequest",
      "UpdateProductResponse",
      "DeleteProductRequest",
      "DeleteProductResponse",
      "GetProductRequest",
      "GetProductResponse",
      "ListProductsRequest",
      "ListProductsResponse"
    ],
    "health_check": "/health/product",
    "metrics": "/metrics/product",
    "metadata_enrichment": true,
    "action_map": {
      "create_product": {
        "proto_method": "CreateProduct",
        "request_model": "CreateProductRequest",
        "response_model": "CreateProductResponse",
        "rest_required_fields": [
          "name",
          "description",
          "type",
          "status",
          "tags",
          "owner_id",
          "metadata"
        ]
      },
      "get_product": {
        "proto_method": "GetProduct",
        "request_model": "GetProductRequest",
        "response_model": "GetProductResponse",
        "rest_required_fields": ["product_id"]
      },
      "update_product": {
        "proto_method": "UpdateProduct",
        "request_model": "UpdateProductRequest",
        "response_model": "UpdateProductResponse",
        "rest_required_fields": [
          "product_id",
          "name",
          "description",
          "type",
          "status",
          "tags",
          "owner_id",
          "metadata"
        ]
      },
      "delete_product": {
        "proto_method": "DeleteProduct",
        "request_model": "DeleteProductRequest",
        "response_model": "DeleteProductResponse",
        "rest_required_fields": ["product_id"]
      },
      "list_products": {
        "proto_method": "ListProducts",
        "request_model": "ListProductsRequest",
        "response_model": "ListProductsResponse",
        "rest_required_fields": ["page", "page_size", "owner_id", "tags", "metadata_filters"]
      }
    }
  },
  {
    "name": "scheduler",
    "version": "v1",
    "capabilities": ["job_scheduling", "automation", "cdc_triggers", "metadata_enrichment"],
    "dependencies": ["master", "nexus"],
    "schema": {
      "proto_path": "api/protos/scheduler/v1/scheduler.proto",
      "methods": [
        "CreateJob",
        "UpdateJob",
        "DeleteJob",
        "GetJob",
        "ListJobs",
        "RunJob",
        "ListJobRuns"
      ]
    },
    "endpoints": [
      {
        "path": "/api/scheduler_ops",
        "method": "POST",
        "actions": [
          "create_job",
          "update_job",
          "delete_job",
          "get_job",
          "list_jobs",
          "run_job",
          "list_job_runs"
        ],
        "description": "Composable scheduler operations endpoint. Each action maps to a gRPC/proto method and supports metadata enrichment."
      }
    ],
    "models": [
      "Job",
      "JobRun",
      "CreateJobRequest",
      "CreateJobResponse",
      "UpdateJobRequest",
      "UpdateJobResponse",
      "DeleteJobRequest",
      "DeleteJobResponse",
      "GetJobRequest",
      "GetJobResponse",
      "ListJobsRequest",
      "ListJobsResponse",
      "RunJobRequest",
      "RunJobResponse",
      "ListJobRunsRequest",
      "ListJobRunsResponse"
    ],
    "health_check": "/health/scheduler",
    "metrics": "/metrics/scheduler",
    "metadata_enrichment": true,
    "action_map": {
      "create_job": {
        "proto_method": "CreateJob",
        "request_model": "CreateJobRequest",
        "response_model": "CreateJobResponse",
        "rest_required_fields": ["job"]
      },
      "update_job": {
        "proto_method": "UpdateJob",
        "request_model": "UpdateJobRequest",
        "response_model": "UpdateJobResponse",
        "rest_required_fields": ["job"]
      },
      "delete_job": {
        "proto_method": "DeleteJob",
        "request_model": "DeleteJobRequest",
        "response_model": "DeleteJobResponse",
        "rest_required_fields": ["job_id"]
      },
      "get_job": {
        "proto_method": "GetJob",
        "request_model": "GetJobRequest",
        "response_model": "GetJobResponse",
        "rest_required_fields": ["job_id"]
      },
      "list_jobs": {
        "proto_method": "ListJobs",
        "request_model": "ListJobsRequest",
        "response_model": "ListJobsResponse",
        "rest_required_fields": ["page", "page_size", "status"]
      },
      "run_job": {
        "proto_method": "RunJob",
        "request_model": "RunJobRequest",
        "response_model": "RunJobResponse",
        "rest_required_fields": ["job_id"]
      },
      "list_job_runs": {
        "proto_method": "ListJobRuns",
        "request_model": "ListJobRunsRequest",
        "response_model": "ListJobRunsResponse",
        "rest_required_fields": ["job_id", "page", "page_size"]
      }
    }
  }
]
