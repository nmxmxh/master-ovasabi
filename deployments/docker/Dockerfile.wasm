# --- Go WASM Build Stage ---
# This stage builds the Go WASM binary.
FROM golang:1.24-alpine AS wasm-builder
WORKDIR /wasm
COPY wasm/go.mod wasm/go.sum ./
RUN go mod download
COPY wasm/ .
# Build the WASM binary and place it in a known location.
RUN GOOS=js GOARCH=wasm go build -o /build/main.wasm .

# --- Frontend Build Stage ---
# This stage builds the JavaScript/TypeScript frontend assets.
FROM node:alpine AS frontend-builder
WORKDIR /frontend
COPY frontend/package*.json ./
RUN yarn install --frozen-lockfile
COPY frontend/ .
# Copy the compiled WASM binary from the previous stage into the public assets directory.
COPY --from=wasm-builder /build/main.wasm ./public/
# Build the production-ready frontend assets.
RUN yarn build

# --- Production Nginx Stage ---
# This is the final, lean image that will serve the static frontend.
FROM nginx:alpine AS prod
# Copy the custom Nginx configuration.
COPY deployments/docker/nginx.conf /etc/nginx/conf.d/default.conf
# Copy the built frontend assets from the frontend-builder stage.
COPY --from=frontend-builder /frontend/dist /usr/share/nginx/html
EXPOSE 80 8100
CMD ["nginx", "-g", "daemon off;"]