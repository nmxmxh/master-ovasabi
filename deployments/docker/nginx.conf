# Production-ready nginx.conf for WASM + WebSocket AI microservice (HTTP-only for local dev)
# - Serves static frontend
# - Proxies /ws to AI microservice (load balanced)
# - Proxies /api to backend API
# - Gzip compression, caching, security headers
# - Sample gRPC proxy config included

worker_processes 1;

# Events block
events { worker_connections 1024; }

http {
    log_format main_json '{"time":"$time_iso8601","remote_addr":"$remote_addr","x_forwarded_for":"$proxy_add_x_forwarded_for","request_method":"$request_method","request_uri":"$request_uri","status":$status,"body_bytes_sent":$body_bytes_sent,"request_time":$request_time,"upstream_response_time":"$upstream_response_time","http_referer":"$http_referer","http_user_agent":"$http_user_agent","request_id":"$request_id"}';
    access_log  /var/log/nginx/access.log  main_json;
    include       mime.types;
    default_type  application/octet-stream;
    sendfile        on;
    keepalive_timeout  65;

    # Gzip compression for static and WASM assets
    gzip on;
    gzip_types text/plain text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript application/wasm;
    gzip_min_length 256;
    gzip_comp_level 6;

    # Rate limiting (tune as needed)
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;

    # Upstream for central WebSocket gateway (ws-gateway:8090)
    upstream ws_gateway {
        server ws-gateway:8090;
    }
    # Upstream for backend API (app:8080)
    upstream app_api {
        server app:8080;
    }
    # Upstream for Python AI service
    # upstream ai_service {
    #     server ai:9000;
    # }
    # Upstream for gRPC-Web proxy (grpcwebproxy:8080)
    # server grpcwebproxy:8080;

    # HTTP server
    server {
        listen 80;
        server_name _;
        root   /usr/share/nginx/html;

        # Security headers
        add_header X-Frame-Options "SAMEORIGIN";
        add_header X-Content-Type-Options "nosniff";
        add_header X-XSS-Protection "1; mode=block";
        add_header Referrer-Policy "strict-origin-when-cross-origin";
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        # Required for WASM threads (SharedArrayBuffer/crossOriginIsolated)
        add_header Cross-Origin-Opener-Policy "same-origin" always;
        add_header Cross-Origin-Embedder-Policy "require-corp" always;

        # Rate limiting (tune as needed)
        limit_req zone=api_limit burst=20 nodelay;

        # Serve static files with optimal caching
        # Serve Vite SPA from /usr/share/nginx/html (mounted from ./frontend/dist)
        location / {
            index  index.html;
            try_files $uri $uri/ /index.html;
            expires 1y;
            add_header Cache-Control "public, max-age=31536000, immutable";
            add_header Cross-Origin-Opener-Policy "same-origin" always;
            add_header Cross-Origin-Embedder-Policy "require-corp" always;
        }

        # DEV: Prevent index.html from being cached in development
        location = /index.html {
            expires -1;
            add_header Cache-Control "no-store";
            add_header Cross-Origin-Opener-Policy "same-origin" always;
            add_header Cross-Origin-Embedder-Policy "require-corp" always;
        }

        # DEV: Prevent WASM files from being cached in development
        location ~* \.wasm$ {
            expires -1;
            add_header Cache-Control "no-store, no-cache, must-revalidate";
            add_header Cross-Origin-Opener-Policy "same-origin" always;
            add_header Cross-Origin-Embedder-Policy "require-corp" always;
        }

        # Proxy WebSocket requests to central ws-gateway
        location /ws {
            proxy_pass http://ws_gateway;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";
            proxy_set_header Host $host;
            proxy_read_timeout 86400;
            proxy_send_timeout 86400;
            proxy_buffering off;
        }

        # Development: Proxy Vite HMR WebSocket to dev server (port 5174)
        # This allows development with nginx as reverse proxy
        location /__vite_ping {
            proxy_pass http://host.docker.internal:5174;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Development: Proxy Vite HMR WebSocket to dev server (port 5174)
        location /__vite_hmr {
            proxy_pass http://host.docker.internal:5174;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Proxy API requests to backend
        location /api {
            proxy_pass http://app_api;
            proxy_set_header Host $host;
            limit_req zone=api_limit;
        }

        # Proxy AI service requests
        # location /ai/ {
        #     proxy_pass http://ai_service;
        #     proxy_set_header Host $host;
        #     limit_req zone=api_limit;
        # }

        # gRPC-Web proxy (for browser gRPC clients)
        location /grpc-web/ {
            # proxy_pass http://grpcweb;
            proxy_set_header Host $host;
            grpc_set_header X-User-Agent $http_user_agent;
            grpc_set_header X-Real-IP $remote_addr;
        }
    }

    # HTTPS server
    server {
        listen 443 ssl;
        http2 on;
        server_name localhost;

        ssl_certificate /etc/nginx/certs/localhost.pem;
        ssl_certificate_key /etc/nginx/certs/localhost-key.pem;

        # SSL hardening (from Mozilla SSL Config Generator)
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 1d;
        ssl_session_tickets off;

        # Add security headers as in the HTTP block
        add_header X-Frame-Options "SAMEORIGIN";
        add_header X-Content-Type-Options "nosniff";
        add_header X-XSS-Protection "1; mode=block";
        add_header Referrer-Policy "strict-origin-when-cross-origin";
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        # Required for WASM threads (SharedArrayBuffer/crossOriginIsolated)
        add_header Cross-Origin-Opener-Policy "same-origin" always;
        add_header Cross-Origin-Embedder-Policy "require-corp" always;

        root /usr/share/nginx/html;

        location / {
            try_files $uri $uri/ /index.html;
        }

        # Proxy WebSocket requests to central ws-gateway
        location /ws {
            proxy_pass http://ws_gateway;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";
            proxy_set_header Host $host;
            proxy_read_timeout 86400;
            proxy_send_timeout 86400;
            proxy_buffering off;
        }

        # Proxy API requests to backend
        location /api {
            proxy_pass http://app_api;
            proxy_set_header Host $host;
        }

        # Proxy AI service requests
        # location /ai/ {
        #     proxy_pass http://ai_service;
        #     proxy_set_header Host $host;
        # }

        # gRPC-Web proxy
        location /grpc-web/ {
            # proxy_pass http://grpcweb;
            proxy_set_header Host $host;
            grpc_set_header X-User-Agent $http_user_agent;
            grpc_set_header X-Real-IP $remote_addr;
        }
    }
}