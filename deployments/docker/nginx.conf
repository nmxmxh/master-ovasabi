# Production-ready nginx.conf for WASM + WebSocket AI microservice (HTTP-only for local dev)
# - Serves static frontend
# - Proxies /ws to AI microservice (load balanced)
# - Proxies /api to backend API
# - Gzip compression, caching, security headers
# - Sample gRPC proxy config included

worker_processes 1;

# Events block
events { worker_connections 1024; }

http {
    include       mime.types;
    default_type  application/octet-stream;
    sendfile        on;
    keepalive_timeout  65;

    # Gzip compression for static and WASM assets
    gzip on;
    gzip_types text/plain text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript application/wasm;
    gzip_min_length 256;
    gzip_comp_level 6;

    # SSL configuration (use real certs in production)
    ssl_certificate     /etc/nginx/certs/fullchain.pem;
    ssl_certificate_key /etc/nginx/certs/privkey.pem;
    ssl_protocols       TLSv1.2 TLSv1.3;
    ssl_ciphers         HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers on;

    # Upstream for WebSocket AI microservice (wasm-frontend:8081)
    upstream ws_ai {
        server wasm-frontend:8081;
    }
    # Upstream for backend API (app:8080)
    upstream app_api {
        server app:8080;
    }
    # Upstream for gRPC-Web proxy (grpcwebproxy:8080)
    # server grpcwebproxy:8080;

    # HTTP server: redirect all to HTTPS
    server {
        listen 80;
        server_name _;
        return 301 https://$host$request_uri;
    }

    # HTTPS server
    server {
        listen 443 ssl;
        server_name _;

        # Security headers
        add_header X-Frame-Options "SAMEORIGIN";
        add_header X-Content-Type-Options "nosniff";
        add_header X-XSS-Protection "1; mode=block";
        add_header Referrer-Policy "strict-origin-when-cross-origin";
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        # Rate limiting (tune as needed)
        limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;
        limit_req zone=api_limit burst=20 nodelay;

        # Serve static files with optimal caching
        location / {
            root   /usr/share/nginx/html;
            index  index.html index.htm;
            try_files $uri $uri/ /index.html;
            expires 1y;
            add_header Cache-Control "public, max-age=31536000, immutable";
        }

        # Proxy WebSocket requests to AI microservice
        location /ws {
            proxy_pass http://ws_ai;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";
            proxy_set_header Host $host;
            proxy_read_timeout 86400;
            proxy_send_timeout 86400;
            proxy_buffering off;
            # Optional: limit rate for abuse prevention
            limit_req zone=api_limit;
        }

        # Proxy API requests to backend
        location /api {
            proxy_pass http://app_api;
            proxy_set_header Host $host;
            limit_req zone=api_limit;
        }

        # gRPC-Web proxy (for browser gRPC clients)
        location /grpc-web/ {
            # proxy_pass http://grpcweb;
            proxy_set_header Host $host;
            grpc_set_header X-User-Agent $http_user_agent;
            grpc_set_header X-Real-IP $remote_addr;
        }
    }
} 