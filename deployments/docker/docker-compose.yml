name: master-ovasabi

services:
  app:
    build:
      context: ../..
      dockerfile: deployments/docker/Dockerfile
      args:
        BUILDKIT_INLINE_CACHE: 1
      cache_from:
        - ovasabi/master-ovasabi:latest
    ports:
      - "8080:8080" # gRPC port
    environment:
      ENVIRONMENT: development
      LOG_LEVEL: debug
      CONFIG_PATH: /app/config/config.yaml
      DB_HOST: postgres
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      DB_NAME: ${DB_NAME:-master_ovasabi}
      REDIS_HOST: ${REDIS_HOST:-redis}
      REDIS_PORT: ${REDIS_PORT:-6379}
    volumes:
      - ../../config:/app/config:ro
    depends_on:
      postgres-init:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:50051"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    networks:
      - ovasabi-network
    env_file:
      - ../../.env

  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      DB_NAME: ${DB_NAME:-master_ovasabi}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    command: ["postgres", "-c", "listen_addresses=*", "-c", "max_connections=100"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${DB_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - ovasabi-network
    env_file:
      - ../../.env

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    environment:
      REDIS_HOST: ${REDIS_HOST:-redis}
      REDIS_PORT: ${REDIS_PORT:-6379}
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      REDIS_DB: ${REDIS_DB:-0}
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - ovasabi-network
    env_file:
      - ../../.env

  migrate:
    image: migrate/migrate
    entrypoint: ["/bin/sh", "-c"]
    command: >
      migrate -path /migrations -database "postgres://${DB_USER:-postgres}:${DB_PASSWORD:-postgres}@postgres:5432/${DB_NAME:-master_ovasabi}?sslmode=disable" drop -f &&
      migrate -path /migrations -database "postgres://${DB_USER:-postgres}:${DB_PASSWORD:-postgres}@postgres:5432/${DB_NAME:-master_ovasabi}?sslmode=disable" up
    depends_on:
      postgres:
        condition: service_healthy
      postgres-init:
        condition: service_completed_successfully
    volumes:
      - ../../database/migrations:/migrations
    networks:
      - ovasabi-network
    env_file:
      - ../../.env

  postgres-init:
    image: postgres:15-alpine
    environment:
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      DB_NAME: ${DB_NAME:-master_ovasabi}
      ADMIN_USER: ${ADMIN_USER:-admin}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD:-admin}
    entrypoint: ["/bin/sh", "-c", "export PGPASSWORD='$DB_PASSWORD'; until pg_isready -h postgres -U '$DB_USER'; do echo 'Waiting for postgres...'; sleep 2; done && psql -h postgres -U '$DB_USER' -d '$DB_NAME' -c 'CREATE ROLE \"$ADMIN_USER\" WITH LOGIN PASSWORD '\\''$ADMIN_PASSWORD'\\'' SUPERUSER;' || true"]
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - ovasabi-network
    env_file:
      - ../../.env

volumes:
  postgres_data:
  redis_data:

networks:
  ovasabi-network:
    driver: bridge
