name: master-ovasabi

services:
  app:
    build:
      context: ../..
      dockerfile: deployments/docker/Dockerfile
      args:
        BUILDKIT_INLINE_CACHE: 1
      cache_from:
        - ovasabi/master-ovasabi:latest
    ports:
      - '8080:8080'
      - '50051:50051'
    environment:
      APP_ENV: '${APP_ENV:-development}'
      APP_NAME: '${APP_NAME:-master-ovasabi}'
      ENVIRONMENT: development
      LOG_LEVEL: debug
      CONFIG_PATH: /app/config/config.yaml
      DB_HOST: postgres
      DB_PORT: '${DB_PORT:-5432}'
      DB_USER: '${DB_USER:-postgres}'
      DB_PASSWORD: '${DB_PASSWORD:-postgres}'
      DB_NAME: '${DB_NAME:-master_ovasabi}'
      REDIS_HOST: '${REDIS_HOST:-redis}'
      REDIS_PORT: '${REDIS_PORT:-6379}'
      ADMIN_USER: '${ADMIN_USER:-okhai}'
      ADMIN_PASSWORD: '${ADMIN_PASSWORD:-@Osiano1995}'
    volumes:
      - ./config:/app/config:ro
      - ./amadeus/knowledge_graph.json:/app/amadeus/knowledge_graph.json
      - ./amadeus/backups:/app/amadeus/backups
      # Proto codegen for Go is now in-place; no need to mount gen/go
    depends_on:
      postgres-init:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
    healthcheck:
      test: ['CMD', 'grpc_health_probe', '-addr=localhost:8080']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    networks:
      - ovasabi-network
    env_file:
      - ../../.env

  redis:
    image: redis:8
    ports:
      - '6379:6379'
    environment:
      REDIS_PASSWORD: '@Osiano1995'
    volumes:
      - ../../redis.conf:/usr/local/etc/redis/redis.conf:ro
      - redis_data:/data
    command: ['redis-server', '/usr/local/etc/redis/redis.conf', '--requirepass', '@Osiano1995']
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - ovasabi-network

  postgres:
    image: postgres:15-alpine
    ports:
      - '5432:5432'
    environment:
      POSTGRES_USER: '${POSTGRES_USER:-postgres}'
      POSTGRES_PASSWORD: '${POSTGRES_PASSWORD:-postgres}'
      POSTGRES_DB: '${POSTGRES_DB:-master_ovasabi}'
      DB_USER: '${DB_USER:-postgres}'
      DB_PASSWORD: '${DB_PASSWORD:-postgres}'
      DB_NAME: '${DB_NAME:-master_ovasabi}'
      ADMIN_USER: '${ADMIN_USER:-okhai}'
      ADMIN_PASSWORD: '${ADMIN_PASSWORD:-@Osiano1995}'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    command: ['postgres', '-c', 'listen_addresses=*', '-c', 'max_connections=100']
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER:-postgres}']
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - ovasabi-network
    env_file:
      - ../../.env

  migrate:
    image: migrate/migrate
    volumes:
      - ../../database/migrations:/migrations
    networks:
      - ovasabi-network
    env_file:
      - ../../.env

  postgres-init:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: '${POSTGRES_USER:-postgres}'
      POSTGRES_PASSWORD: '${POSTGRES_PASSWORD:-postgres}'
      POSTGRES_DB: '${POSTGRES_DB:-master_ovasabi}'
      DB_USER: '${DB_USER:-postgres}'
      DB_PASSWORD: '${DB_PASSWORD:-postgres}'
      DB_NAME: '${DB_NAME:-master_ovasabi}'
      ADMIN_USER: '${ADMIN_USER:-okhai}'
      ADMIN_PASSWORD: '${ADMIN_PASSWORD:-@Osiano1995}'
    entrypoint:
      [
        '/bin/sh',
        '-c',
        "export PGPASSWORD='$DB_PASSWORD'; until pg_isready -h postgres -U '$DB_USER'; do echo
        'Waiting for postgres...'; sleep 2; done && psql -h postgres -U '$DB_USER' -d '$DB_NAME' -c
        'CREATE ROLE \"$ADMIN_USER\" WITH LOGIN PASSWORD '\\''$ADMIN_PASSWORD'\\'' SUPERUSER;' ||
        true"
      ]
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - ovasabi-network
    env_file:
      - ../../.env

  libretranslate:
    image: libretranslate/libretranslate:latest
    ports:
      - '5002:5000'
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  ovasabi-network:
    driver: bridge
