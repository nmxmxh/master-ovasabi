// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: api/protos/broadcast/v1/broadcast.proto

package broadcast

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BroadcastService_BroadcastAction_FullMethodName            = "/broadcast.v1.BroadcastService/BroadcastAction"
	BroadcastService_SubscribeToActions_FullMethodName         = "/broadcast.v1.BroadcastService/SubscribeToActions"
	BroadcastService_CreateBroadcast_FullMethodName            = "/broadcast.v1.BroadcastService/CreateBroadcast"
	BroadcastService_GetBroadcast_FullMethodName               = "/broadcast.v1.BroadcastService/GetBroadcast"
	BroadcastService_ListBroadcasts_FullMethodName             = "/broadcast.v1.BroadcastService/ListBroadcasts"
	BroadcastService_SubscribeToLiveAssetChunks_FullMethodName = "/broadcast.v1.BroadcastService/SubscribeToLiveAssetChunks"
	BroadcastService_PublishLiveAssetChunk_FullMethodName      = "/broadcast.v1.BroadcastService/PublishLiveAssetChunk"
)

// BroadcastServiceClient is the client API for BroadcastService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// BroadcastService provides concurrent broadcasting of user actions
type BroadcastServiceClient interface {
	// BroadcastAction broadcasts a user action to subscribed clients
	BroadcastAction(ctx context.Context, in *BroadcastActionRequest, opts ...grpc.CallOption) (*BroadcastActionResponse, error)
	// SubscribeToActions subscribes to receive action broadcasts
	SubscribeToActions(ctx context.Context, in *SubscribeToActionsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SubscribeToActionsResponse], error)
	CreateBroadcast(ctx context.Context, in *CreateBroadcastRequest, opts ...grpc.CallOption) (*CreateBroadcastResponse, error)
	GetBroadcast(ctx context.Context, in *GetBroadcastRequest, opts ...grpc.CallOption) (*GetBroadcastResponse, error)
	ListBroadcasts(ctx context.Context, in *ListBroadcastsRequest, opts ...grpc.CallOption) (*ListBroadcastsResponse, error)
	// Real-time asset chunk streaming
	SubscribeToLiveAssetChunks(ctx context.Context, in *SubscribeToLiveAssetChunksRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SubscribeToLiveAssetChunksResponse], error)
	PublishLiveAssetChunk(ctx context.Context, in *PublishLiveAssetChunkRequest, opts ...grpc.CallOption) (*PublishLiveAssetChunkResponse, error)
}

type broadcastServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBroadcastServiceClient(cc grpc.ClientConnInterface) BroadcastServiceClient {
	return &broadcastServiceClient{cc}
}

func (c *broadcastServiceClient) BroadcastAction(ctx context.Context, in *BroadcastActionRequest, opts ...grpc.CallOption) (*BroadcastActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BroadcastActionResponse)
	err := c.cc.Invoke(ctx, BroadcastService_BroadcastAction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *broadcastServiceClient) SubscribeToActions(ctx context.Context, in *SubscribeToActionsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SubscribeToActionsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BroadcastService_ServiceDesc.Streams[0], BroadcastService_SubscribeToActions_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeToActionsRequest, SubscribeToActionsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BroadcastService_SubscribeToActionsClient = grpc.ServerStreamingClient[SubscribeToActionsResponse]

func (c *broadcastServiceClient) CreateBroadcast(ctx context.Context, in *CreateBroadcastRequest, opts ...grpc.CallOption) (*CreateBroadcastResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBroadcastResponse)
	err := c.cc.Invoke(ctx, BroadcastService_CreateBroadcast_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *broadcastServiceClient) GetBroadcast(ctx context.Context, in *GetBroadcastRequest, opts ...grpc.CallOption) (*GetBroadcastResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBroadcastResponse)
	err := c.cc.Invoke(ctx, BroadcastService_GetBroadcast_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *broadcastServiceClient) ListBroadcasts(ctx context.Context, in *ListBroadcastsRequest, opts ...grpc.CallOption) (*ListBroadcastsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBroadcastsResponse)
	err := c.cc.Invoke(ctx, BroadcastService_ListBroadcasts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *broadcastServiceClient) SubscribeToLiveAssetChunks(ctx context.Context, in *SubscribeToLiveAssetChunksRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SubscribeToLiveAssetChunksResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BroadcastService_ServiceDesc.Streams[1], BroadcastService_SubscribeToLiveAssetChunks_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeToLiveAssetChunksRequest, SubscribeToLiveAssetChunksResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BroadcastService_SubscribeToLiveAssetChunksClient = grpc.ServerStreamingClient[SubscribeToLiveAssetChunksResponse]

func (c *broadcastServiceClient) PublishLiveAssetChunk(ctx context.Context, in *PublishLiveAssetChunkRequest, opts ...grpc.CallOption) (*PublishLiveAssetChunkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublishLiveAssetChunkResponse)
	err := c.cc.Invoke(ctx, BroadcastService_PublishLiveAssetChunk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BroadcastServiceServer is the server API for BroadcastService service.
// All implementations must embed UnimplementedBroadcastServiceServer
// for forward compatibility.
//
// BroadcastService provides concurrent broadcasting of user actions
type BroadcastServiceServer interface {
	// BroadcastAction broadcasts a user action to subscribed clients
	BroadcastAction(context.Context, *BroadcastActionRequest) (*BroadcastActionResponse, error)
	// SubscribeToActions subscribes to receive action broadcasts
	SubscribeToActions(*SubscribeToActionsRequest, grpc.ServerStreamingServer[SubscribeToActionsResponse]) error
	CreateBroadcast(context.Context, *CreateBroadcastRequest) (*CreateBroadcastResponse, error)
	GetBroadcast(context.Context, *GetBroadcastRequest) (*GetBroadcastResponse, error)
	ListBroadcasts(context.Context, *ListBroadcastsRequest) (*ListBroadcastsResponse, error)
	// Real-time asset chunk streaming
	SubscribeToLiveAssetChunks(*SubscribeToLiveAssetChunksRequest, grpc.ServerStreamingServer[SubscribeToLiveAssetChunksResponse]) error
	PublishLiveAssetChunk(context.Context, *PublishLiveAssetChunkRequest) (*PublishLiveAssetChunkResponse, error)
	mustEmbedUnimplementedBroadcastServiceServer()
}

// UnimplementedBroadcastServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBroadcastServiceServer struct{}

func (UnimplementedBroadcastServiceServer) BroadcastAction(context.Context, *BroadcastActionRequest) (*BroadcastActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BroadcastAction not implemented")
}
func (UnimplementedBroadcastServiceServer) SubscribeToActions(*SubscribeToActionsRequest, grpc.ServerStreamingServer[SubscribeToActionsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToActions not implemented")
}
func (UnimplementedBroadcastServiceServer) CreateBroadcast(context.Context, *CreateBroadcastRequest) (*CreateBroadcastResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBroadcast not implemented")
}
func (UnimplementedBroadcastServiceServer) GetBroadcast(context.Context, *GetBroadcastRequest) (*GetBroadcastResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBroadcast not implemented")
}
func (UnimplementedBroadcastServiceServer) ListBroadcasts(context.Context, *ListBroadcastsRequest) (*ListBroadcastsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBroadcasts not implemented")
}
func (UnimplementedBroadcastServiceServer) SubscribeToLiveAssetChunks(*SubscribeToLiveAssetChunksRequest, grpc.ServerStreamingServer[SubscribeToLiveAssetChunksResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToLiveAssetChunks not implemented")
}
func (UnimplementedBroadcastServiceServer) PublishLiveAssetChunk(context.Context, *PublishLiveAssetChunkRequest) (*PublishLiveAssetChunkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishLiveAssetChunk not implemented")
}
func (UnimplementedBroadcastServiceServer) mustEmbedUnimplementedBroadcastServiceServer() {}
func (UnimplementedBroadcastServiceServer) testEmbeddedByValue()                          {}

// UnsafeBroadcastServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BroadcastServiceServer will
// result in compilation errors.
type UnsafeBroadcastServiceServer interface {
	mustEmbedUnimplementedBroadcastServiceServer()
}

func RegisterBroadcastServiceServer(s grpc.ServiceRegistrar, srv BroadcastServiceServer) {
	// If the following call pancis, it indicates UnimplementedBroadcastServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BroadcastService_ServiceDesc, srv)
}

func _BroadcastService_BroadcastAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BroadcastActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BroadcastServiceServer).BroadcastAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BroadcastService_BroadcastAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BroadcastServiceServer).BroadcastAction(ctx, req.(*BroadcastActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BroadcastService_SubscribeToActions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeToActionsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BroadcastServiceServer).SubscribeToActions(m, &grpc.GenericServerStream[SubscribeToActionsRequest, SubscribeToActionsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BroadcastService_SubscribeToActionsServer = grpc.ServerStreamingServer[SubscribeToActionsResponse]

func _BroadcastService_CreateBroadcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBroadcastRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BroadcastServiceServer).CreateBroadcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BroadcastService_CreateBroadcast_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BroadcastServiceServer).CreateBroadcast(ctx, req.(*CreateBroadcastRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BroadcastService_GetBroadcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBroadcastRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BroadcastServiceServer).GetBroadcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BroadcastService_GetBroadcast_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BroadcastServiceServer).GetBroadcast(ctx, req.(*GetBroadcastRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BroadcastService_ListBroadcasts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBroadcastsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BroadcastServiceServer).ListBroadcasts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BroadcastService_ListBroadcasts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BroadcastServiceServer).ListBroadcasts(ctx, req.(*ListBroadcastsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BroadcastService_SubscribeToLiveAssetChunks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeToLiveAssetChunksRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BroadcastServiceServer).SubscribeToLiveAssetChunks(m, &grpc.GenericServerStream[SubscribeToLiveAssetChunksRequest, SubscribeToLiveAssetChunksResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BroadcastService_SubscribeToLiveAssetChunksServer = grpc.ServerStreamingServer[SubscribeToLiveAssetChunksResponse]

func _BroadcastService_PublishLiveAssetChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishLiveAssetChunkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BroadcastServiceServer).PublishLiveAssetChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BroadcastService_PublishLiveAssetChunk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BroadcastServiceServer).PublishLiveAssetChunk(ctx, req.(*PublishLiveAssetChunkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BroadcastService_ServiceDesc is the grpc.ServiceDesc for BroadcastService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BroadcastService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "broadcast.v1.BroadcastService",
	HandlerType: (*BroadcastServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BroadcastAction",
			Handler:    _BroadcastService_BroadcastAction_Handler,
		},
		{
			MethodName: "CreateBroadcast",
			Handler:    _BroadcastService_CreateBroadcast_Handler,
		},
		{
			MethodName: "GetBroadcast",
			Handler:    _BroadcastService_GetBroadcast_Handler,
		},
		{
			MethodName: "ListBroadcasts",
			Handler:    _BroadcastService_ListBroadcasts_Handler,
		},
		{
			MethodName: "PublishLiveAssetChunk",
			Handler:    _BroadcastService_PublishLiveAssetChunk_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeToActions",
			Handler:       _BroadcastService_SubscribeToActions_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeToLiveAssetChunks",
			Handler:       _BroadcastService_SubscribeToLiveAssetChunks_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/protos/broadcast/v1/broadcast.proto",
}
