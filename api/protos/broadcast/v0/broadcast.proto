syntax = "proto3";

package broadcast;

option go_package = "github.com/nmxmxh/master-ovasabi/api/protos/broadcast";

import "google/protobuf/timestamp.proto";

// Broadcast message for campaigns or services
message Broadcast {
  int32 id = 1;
  int32 master_id = 2;
  int32 campaign_id = 3;
  string channel = 4; // e.g., email, sms, push
  string subject = 5;
  string message = 6;
  map<string, string> payload = 7; // Flexible, JSONB-like
  google.protobuf.Timestamp created_at = 8;
  google.protobuf.Timestamp scheduled_at = 9;
}

message CreateBroadcastRequest {
  int32 master_id = 1;
  int32 campaign_id = 2;
  string channel = 3;
  string subject = 4;
  string message = 5;
  map<string, string> payload = 6;
  google.protobuf.Timestamp scheduled_at = 7;
}

message CreateBroadcastResponse {
  Broadcast broadcast = 1;
  bool success = 2;
}

message GetBroadcastRequest {
  int32 broadcast_id = 1;
}

message GetBroadcastResponse {
  Broadcast broadcast = 1;
}

message ListBroadcastsRequest {
  int32 campaign_id = 1;
  int32 page = 2;
  int32 page_size = 3;
}

message ListBroadcastsResponse {
  repeated Broadcast broadcasts = 1;
  int32 total_count = 2;
  int32 page = 3;
  int32 total_pages = 4;
}

// BroadcastService provides concurrent broadcasting of user actions
service BroadcastService {
  // BroadcastAction broadcasts a user action to subscribed clients
  rpc BroadcastAction(BroadcastActionRequest) returns (BroadcastActionResponse) {}
  // SubscribeToActions subscribes to receive action broadcasts
  rpc SubscribeToActions(SubscribeRequest) returns (stream ActionSummary) {}
  rpc CreateBroadcast(CreateBroadcastRequest) returns (CreateBroadcastResponse);
  rpc GetBroadcast(GetBroadcastRequest) returns (GetBroadcastResponse);
  rpc ListBroadcasts(ListBroadcastsRequest) returns (ListBroadcastsResponse);
}

// BroadcastActionRequest contains the action to broadcast
message BroadcastActionRequest {
  string user_id = 1;
  string action_type = 2;
  string application_id = 3;
  map<string, string> metadata = 4;
}

// BroadcastActionResponse contains the broadcast result
message BroadcastActionResponse {
  bool success = 1;
  string message = 2;
}

// SubscribeRequest contains subscription parameters
message SubscribeRequest {
  string application_id = 1;
  repeated string action_types = 2;
}

// ActionSummary contains a summary of user actions
message ActionSummary {
  string user_id = 1;
  string action_type = 2;
  string application_id = 3;
  map<string, string> metadata = 4;
  int64 timestamp = 5;
} 