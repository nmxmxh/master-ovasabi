// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.29.2
// source: api/protos/broadcast/broadcast.proto

package broadcast

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BroadcastService_BroadcastAction_FullMethodName    = "/broadcast.BroadcastService/BroadcastAction"
	BroadcastService_SubscribeToActions_FullMethodName = "/broadcast.BroadcastService/SubscribeToActions"
)

// BroadcastServiceClient is the client API for BroadcastService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BroadcastServiceClient interface {
	// BroadcastAction broadcasts a user action to subscribed clients
	BroadcastAction(ctx context.Context, in *BroadcastActionRequest, opts ...grpc.CallOption) (*BroadcastActionResponse, error)
	// SubscribeToActions subscribes to receive action broadcasts
	SubscribeToActions(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (BroadcastService_SubscribeToActionsClient, error)
}

type broadcastServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBroadcastServiceClient(cc grpc.ClientConnInterface) BroadcastServiceClient {
	return &broadcastServiceClient{cc}
}

func (c *broadcastServiceClient) BroadcastAction(ctx context.Context, in *BroadcastActionRequest, opts ...grpc.CallOption) (*BroadcastActionResponse, error) {
	out := new(BroadcastActionResponse)
	err := c.cc.Invoke(ctx, BroadcastService_BroadcastAction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *broadcastServiceClient) SubscribeToActions(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (BroadcastService_SubscribeToActionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &BroadcastService_ServiceDesc.Streams[0], BroadcastService_SubscribeToActions_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &broadcastServiceSubscribeToActionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BroadcastService_SubscribeToActionsClient interface {
	Recv() (*ActionSummary, error)
	grpc.ClientStream
}

type broadcastServiceSubscribeToActionsClient struct {
	grpc.ClientStream
}

func (x *broadcastServiceSubscribeToActionsClient) Recv() (*ActionSummary, error) {
	m := new(ActionSummary)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BroadcastServiceServer is the server API for BroadcastService service.
// All implementations must embed UnimplementedBroadcastServiceServer
// for forward compatibility
type BroadcastServiceServer interface {
	// BroadcastAction broadcasts a user action to subscribed clients
	BroadcastAction(context.Context, *BroadcastActionRequest) (*BroadcastActionResponse, error)
	// SubscribeToActions subscribes to receive action broadcasts
	SubscribeToActions(*SubscribeRequest, BroadcastService_SubscribeToActionsServer) error
	mustEmbedUnimplementedBroadcastServiceServer()
}

// UnimplementedBroadcastServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBroadcastServiceServer struct {
}

func (UnimplementedBroadcastServiceServer) BroadcastAction(context.Context, *BroadcastActionRequest) (*BroadcastActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BroadcastAction not implemented")
}
func (UnimplementedBroadcastServiceServer) SubscribeToActions(*SubscribeRequest, BroadcastService_SubscribeToActionsServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToActions not implemented")
}
func (UnimplementedBroadcastServiceServer) mustEmbedUnimplementedBroadcastServiceServer() {}

// UnsafeBroadcastServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BroadcastServiceServer will
// result in compilation errors.
type UnsafeBroadcastServiceServer interface {
	mustEmbedUnimplementedBroadcastServiceServer()
}

func RegisterBroadcastServiceServer(s grpc.ServiceRegistrar, srv BroadcastServiceServer) {
	s.RegisterService(&BroadcastService_ServiceDesc, srv)
}

func _BroadcastService_BroadcastAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BroadcastActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BroadcastServiceServer).BroadcastAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BroadcastService_BroadcastAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BroadcastServiceServer).BroadcastAction(ctx, req.(*BroadcastActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BroadcastService_SubscribeToActions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BroadcastServiceServer).SubscribeToActions(m, &broadcastServiceSubscribeToActionsServer{stream})
}

type BroadcastService_SubscribeToActionsServer interface {
	Send(*ActionSummary) error
	grpc.ServerStream
}

type broadcastServiceSubscribeToActionsServer struct {
	grpc.ServerStream
}

func (x *broadcastServiceSubscribeToActionsServer) Send(m *ActionSummary) error {
	return x.ServerStream.SendMsg(m)
}

// BroadcastService_ServiceDesc is the grpc.ServiceDesc for BroadcastService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BroadcastService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "broadcast.BroadcastService",
	HandlerType: (*BroadcastServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BroadcastAction",
			Handler:    _BroadcastService_BroadcastAction_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeToActions",
			Handler:       _BroadcastService_SubscribeToActions_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/protos/broadcast/broadcast.proto",
}
