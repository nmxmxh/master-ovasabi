// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: localization/v1/localization.proto

package localizationpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LocalizationService_Translate_FullMethodName         = "/localization.v1.LocalizationService/Translate"
	LocalizationService_BatchTranslate_FullMethodName    = "/localization.v1.LocalizationService/BatchTranslate"
	LocalizationService_CreateTranslation_FullMethodName = "/localization.v1.LocalizationService/CreateTranslation"
	LocalizationService_GetTranslation_FullMethodName    = "/localization.v1.LocalizationService/GetTranslation"
	LocalizationService_ListTranslations_FullMethodName  = "/localization.v1.LocalizationService/ListTranslations"
	LocalizationService_GetPricingRule_FullMethodName    = "/localization.v1.LocalizationService/GetPricingRule"
	LocalizationService_SetPricingRule_FullMethodName    = "/localization.v1.LocalizationService/SetPricingRule"
	LocalizationService_ListPricingRules_FullMethodName  = "/localization.v1.LocalizationService/ListPricingRules"
	LocalizationService_ListLocales_FullMethodName       = "/localization.v1.LocalizationService/ListLocales"
	LocalizationService_GetLocaleMetadata_FullMethodName = "/localization.v1.LocalizationService/GetLocaleMetadata"
)

// LocalizationServiceClient is the client API for LocalizationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LocalizationServiceClient interface {
	// Translation
	Translate(ctx context.Context, in *TranslateRequest, opts ...grpc.CallOption) (*TranslateResponse, error)
	BatchTranslate(ctx context.Context, in *BatchTranslateRequest, opts ...grpc.CallOption) (*BatchTranslateResponse, error)
	CreateTranslation(ctx context.Context, in *CreateTranslationRequest, opts ...grpc.CallOption) (*CreateTranslationResponse, error)
	GetTranslation(ctx context.Context, in *GetTranslationRequest, opts ...grpc.CallOption) (*GetTranslationResponse, error)
	ListTranslations(ctx context.Context, in *ListTranslationsRequest, opts ...grpc.CallOption) (*ListTranslationsResponse, error)
	// Pricing
	GetPricingRule(ctx context.Context, in *GetPricingRuleRequest, opts ...grpc.CallOption) (*GetPricingRuleResponse, error)
	SetPricingRule(ctx context.Context, in *SetPricingRuleRequest, opts ...grpc.CallOption) (*SetPricingRuleResponse, error)
	ListPricingRules(ctx context.Context, in *ListPricingRulesRequest, opts ...grpc.CallOption) (*ListPricingRulesResponse, error)
	// Locale metadata
	ListLocales(ctx context.Context, in *ListLocalesRequest, opts ...grpc.CallOption) (*ListLocalesResponse, error)
	GetLocaleMetadata(ctx context.Context, in *GetLocaleMetadataRequest, opts ...grpc.CallOption) (*GetLocaleMetadataResponse, error)
}

type localizationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLocalizationServiceClient(cc grpc.ClientConnInterface) LocalizationServiceClient {
	return &localizationServiceClient{cc}
}

func (c *localizationServiceClient) Translate(ctx context.Context, in *TranslateRequest, opts ...grpc.CallOption) (*TranslateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TranslateResponse)
	err := c.cc.Invoke(ctx, LocalizationService_Translate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localizationServiceClient) BatchTranslate(ctx context.Context, in *BatchTranslateRequest, opts ...grpc.CallOption) (*BatchTranslateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchTranslateResponse)
	err := c.cc.Invoke(ctx, LocalizationService_BatchTranslate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localizationServiceClient) CreateTranslation(ctx context.Context, in *CreateTranslationRequest, opts ...grpc.CallOption) (*CreateTranslationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTranslationResponse)
	err := c.cc.Invoke(ctx, LocalizationService_CreateTranslation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localizationServiceClient) GetTranslation(ctx context.Context, in *GetTranslationRequest, opts ...grpc.CallOption) (*GetTranslationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTranslationResponse)
	err := c.cc.Invoke(ctx, LocalizationService_GetTranslation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localizationServiceClient) ListTranslations(ctx context.Context, in *ListTranslationsRequest, opts ...grpc.CallOption) (*ListTranslationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTranslationsResponse)
	err := c.cc.Invoke(ctx, LocalizationService_ListTranslations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localizationServiceClient) GetPricingRule(ctx context.Context, in *GetPricingRuleRequest, opts ...grpc.CallOption) (*GetPricingRuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPricingRuleResponse)
	err := c.cc.Invoke(ctx, LocalizationService_GetPricingRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localizationServiceClient) SetPricingRule(ctx context.Context, in *SetPricingRuleRequest, opts ...grpc.CallOption) (*SetPricingRuleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetPricingRuleResponse)
	err := c.cc.Invoke(ctx, LocalizationService_SetPricingRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localizationServiceClient) ListPricingRules(ctx context.Context, in *ListPricingRulesRequest, opts ...grpc.CallOption) (*ListPricingRulesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPricingRulesResponse)
	err := c.cc.Invoke(ctx, LocalizationService_ListPricingRules_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localizationServiceClient) ListLocales(ctx context.Context, in *ListLocalesRequest, opts ...grpc.CallOption) (*ListLocalesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListLocalesResponse)
	err := c.cc.Invoke(ctx, LocalizationService_ListLocales_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localizationServiceClient) GetLocaleMetadata(ctx context.Context, in *GetLocaleMetadataRequest, opts ...grpc.CallOption) (*GetLocaleMetadataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLocaleMetadataResponse)
	err := c.cc.Invoke(ctx, LocalizationService_GetLocaleMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LocalizationServiceServer is the server API for LocalizationService service.
// All implementations must embed UnimplementedLocalizationServiceServer
// for forward compatibility.
type LocalizationServiceServer interface {
	// Translation
	Translate(context.Context, *TranslateRequest) (*TranslateResponse, error)
	BatchTranslate(context.Context, *BatchTranslateRequest) (*BatchTranslateResponse, error)
	CreateTranslation(context.Context, *CreateTranslationRequest) (*CreateTranslationResponse, error)
	GetTranslation(context.Context, *GetTranslationRequest) (*GetTranslationResponse, error)
	ListTranslations(context.Context, *ListTranslationsRequest) (*ListTranslationsResponse, error)
	// Pricing
	GetPricingRule(context.Context, *GetPricingRuleRequest) (*GetPricingRuleResponse, error)
	SetPricingRule(context.Context, *SetPricingRuleRequest) (*SetPricingRuleResponse, error)
	ListPricingRules(context.Context, *ListPricingRulesRequest) (*ListPricingRulesResponse, error)
	// Locale metadata
	ListLocales(context.Context, *ListLocalesRequest) (*ListLocalesResponse, error)
	GetLocaleMetadata(context.Context, *GetLocaleMetadataRequest) (*GetLocaleMetadataResponse, error)
	mustEmbedUnimplementedLocalizationServiceServer()
}

// UnimplementedLocalizationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLocalizationServiceServer struct{}

func (UnimplementedLocalizationServiceServer) Translate(context.Context, *TranslateRequest) (*TranslateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Translate not implemented")
}
func (UnimplementedLocalizationServiceServer) BatchTranslate(context.Context, *BatchTranslateRequest) (*BatchTranslateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchTranslate not implemented")
}
func (UnimplementedLocalizationServiceServer) CreateTranslation(context.Context, *CreateTranslationRequest) (*CreateTranslationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTranslation not implemented")
}
func (UnimplementedLocalizationServiceServer) GetTranslation(context.Context, *GetTranslationRequest) (*GetTranslationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTranslation not implemented")
}
func (UnimplementedLocalizationServiceServer) ListTranslations(context.Context, *ListTranslationsRequest) (*ListTranslationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTranslations not implemented")
}
func (UnimplementedLocalizationServiceServer) GetPricingRule(context.Context, *GetPricingRuleRequest) (*GetPricingRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPricingRule not implemented")
}
func (UnimplementedLocalizationServiceServer) SetPricingRule(context.Context, *SetPricingRuleRequest) (*SetPricingRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPricingRule not implemented")
}
func (UnimplementedLocalizationServiceServer) ListPricingRules(context.Context, *ListPricingRulesRequest) (*ListPricingRulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPricingRules not implemented")
}
func (UnimplementedLocalizationServiceServer) ListLocales(context.Context, *ListLocalesRequest) (*ListLocalesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLocales not implemented")
}
func (UnimplementedLocalizationServiceServer) GetLocaleMetadata(context.Context, *GetLocaleMetadataRequest) (*GetLocaleMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLocaleMetadata not implemented")
}
func (UnimplementedLocalizationServiceServer) mustEmbedUnimplementedLocalizationServiceServer() {}
func (UnimplementedLocalizationServiceServer) testEmbeddedByValue()                             {}

// UnsafeLocalizationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LocalizationServiceServer will
// result in compilation errors.
type UnsafeLocalizationServiceServer interface {
	mustEmbedUnimplementedLocalizationServiceServer()
}

func RegisterLocalizationServiceServer(s grpc.ServiceRegistrar, srv LocalizationServiceServer) {
	// If the following call pancis, it indicates UnimplementedLocalizationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LocalizationService_ServiceDesc, srv)
}

func _LocalizationService_Translate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TranslateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalizationServiceServer).Translate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocalizationService_Translate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalizationServiceServer).Translate(ctx, req.(*TranslateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalizationService_BatchTranslate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchTranslateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalizationServiceServer).BatchTranslate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocalizationService_BatchTranslate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalizationServiceServer).BatchTranslate(ctx, req.(*BatchTranslateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalizationService_CreateTranslation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTranslationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalizationServiceServer).CreateTranslation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocalizationService_CreateTranslation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalizationServiceServer).CreateTranslation(ctx, req.(*CreateTranslationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalizationService_GetTranslation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTranslationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalizationServiceServer).GetTranslation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocalizationService_GetTranslation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalizationServiceServer).GetTranslation(ctx, req.(*GetTranslationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalizationService_ListTranslations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTranslationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalizationServiceServer).ListTranslations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocalizationService_ListTranslations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalizationServiceServer).ListTranslations(ctx, req.(*ListTranslationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalizationService_GetPricingRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPricingRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalizationServiceServer).GetPricingRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocalizationService_GetPricingRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalizationServiceServer).GetPricingRule(ctx, req.(*GetPricingRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalizationService_SetPricingRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPricingRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalizationServiceServer).SetPricingRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocalizationService_SetPricingRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalizationServiceServer).SetPricingRule(ctx, req.(*SetPricingRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalizationService_ListPricingRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPricingRulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalizationServiceServer).ListPricingRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocalizationService_ListPricingRules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalizationServiceServer).ListPricingRules(ctx, req.(*ListPricingRulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalizationService_ListLocales_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLocalesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalizationServiceServer).ListLocales(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocalizationService_ListLocales_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalizationServiceServer).ListLocales(ctx, req.(*ListLocalesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalizationService_GetLocaleMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLocaleMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalizationServiceServer).GetLocaleMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocalizationService_GetLocaleMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalizationServiceServer).GetLocaleMetadata(ctx, req.(*GetLocaleMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LocalizationService_ServiceDesc is the grpc.ServiceDesc for LocalizationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LocalizationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "localization.v1.LocalizationService",
	HandlerType: (*LocalizationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Translate",
			Handler:    _LocalizationService_Translate_Handler,
		},
		{
			MethodName: "BatchTranslate",
			Handler:    _LocalizationService_BatchTranslate_Handler,
		},
		{
			MethodName: "CreateTranslation",
			Handler:    _LocalizationService_CreateTranslation_Handler,
		},
		{
			MethodName: "GetTranslation",
			Handler:    _LocalizationService_GetTranslation_Handler,
		},
		{
			MethodName: "ListTranslations",
			Handler:    _LocalizationService_ListTranslations_Handler,
		},
		{
			MethodName: "GetPricingRule",
			Handler:    _LocalizationService_GetPricingRule_Handler,
		},
		{
			MethodName: "SetPricingRule",
			Handler:    _LocalizationService_SetPricingRule_Handler,
		},
		{
			MethodName: "ListPricingRules",
			Handler:    _LocalizationService_ListPricingRules_Handler,
		},
		{
			MethodName: "ListLocales",
			Handler:    _LocalizationService_ListLocales_Handler,
		},
		{
			MethodName: "GetLocaleMetadata",
			Handler:    _LocalizationService_GetLocaleMetadata_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "localization/v1/localization.proto",
}
