// Universal compute schema for device-agnostic distributed execution
// Fits Nexus event bus using common.Payload and common.Metadata
syntax = "proto3";

package common.v1;

import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/nmxmxh/master-ovasabi/api/protos/common/v1;commonpb";

// DataRef represents an input/output datum.
message DataRef {
  string name = 1;
  string content_type = 2; // e.g. application/json, application/octet-stream
  oneof body {
    bytes inline_bytes = 3;
    google.protobuf.Struct inline_json = 4;
    string uri = 5; // s3://, https://, ipfs://, file://wasi/...
  }
  map<string, string> annotations = 6; // checksum, shape, dtype, layout, etc.
}

// TensorSpec describes tensor metadata for validation and placement.
message TensorSpec {
  string dtype = 1; // f16,f32,i8,u8,bf16,...
  repeated int64 shapes = 2; // e.g. [1,3,224,224]
  string layout = 3; // NCHW, NHWC, CHW, HWC
  string device_hint = 4; // cpu or gpu
  // Optional quantization parameters
  message Quantization {
    double scale = 1;
    int64 zero_point = 2;
    string scheme = 3; // per_tensor, per_channel
  }
  Quantization quant = 5;
}

// BufferSpec describes low-level buffer constraints.
message BufferSpec {
  uint64 byte_length = 1;
  uint32 stride = 2;
  uint32 offset = 3;
  uint32 alignment = 4;
}

// GPUDescriptor captures GPU/backend information across environments.
message GPUDescriptor {
  string backend = 1; // webgpu|cuda|metal|vulkan|directml|rocm
  string vendor = 2; // nvidia|amd|intel|apple|qualcomm|arm|unknown
  string adapter_name = 3;
  string adapter_uuid = 4;
  repeated string features = 5; // shader_f16, subgroup, timestamp_query, storage_64...
  map<string, uint64> limits = 6; // maxThreadsPerGroup, maxBufferSize, maxBindGroups...
}

// Capability advertises a worker's abilities and resources.
message Capability {
  bool wasm = 1;
  bool threads = 2;
  bool simd = 3;
  bool webgpu = 4;
  uint32 cpu_cores = 5;
  uint32 memory_mb = 6;
  GPUDescriptor gpu = 7; // optional
  repeated string labels = 8; // camera, low-power, 5g, wifi
  map<string, string> attributes = 9; // os, arch, browser, driver_version...
}

// Requirements expresses hard and soft constraints.
message Requirements {
  Capability min = 1; // must-have
  Capability preferred = 2; // nice-to-have
  map<string, string> qos = 3; // priority, deadline_ms, retries, preemptible, budget_ms
  string isolation = 4; // sandbox|trusted|exclusive
  map<string, string> locality = 5; // region, az, affinity labels
}

// ModuleSpec defines how to locate and invoke the module.
message ModuleSpec {
  string kind = 1; // wasm|builtin|container
  string uri = 2; // module location (for wasm/container)
  string hash = 3; // sha256 or similar for integrity
  string entry = 4; // function name e.g. runGPUCompute
  repeated TensorSpec expected_inputs = 5;
  repeated TensorSpec expected_outputs = 6;
  map<string, string> params = 7; // hyperparameters
  map<string, string> permissions = 8; // wasi_fs, net, gpu_access, memory_limit_mb
}

// ComputeEnvelope is the task definition carried over the event bus.
message ComputeEnvelope {
  string task_id = 1;
  string op = 2; // logical operation id
  string version = 3; // semver of op
  ModuleSpec module = 4;
  Requirements requirements = 5;
  repeated DataRef inputs = 6;
  map<string, string> params = 7;
  string return_channel = 8; // event type/topic for results
  map<string, string> security = 9; // task_token, signature, requester_id
  // carry timing hints
  google.protobuf.Timestamp not_before = 10;
  google.protobuf.Timestamp deadline = 11;
}

// Claim emitted by a worker or used in assignment acknowledgement.
message ComputeClaim {
  string task_id = 1;
  string worker_id = 2;
  Capability capabilities = 3;
}

// Assignment confirms scheduler routing.
message ComputeAssignment {
  string task_id = 1;
  string worker_id = 2;
  map<string, string> metadata = 3;
}

// Progress updates with optional metrics.
message ComputeProgress {
  string task_id = 1;
  uint32 pct = 2; // 0..100
  string note = 3;
  map<string, string> metrics = 4; // throughput, tokens_s, tf_ops, mem_used_mb
}

// Result carries outputs and a brief summary for indexing.
message ComputeResult {
  string task_id = 1;
  repeated DataRef outputs = 2;
  map<string, string> summary = 3; // quick, queryable fields
}

// Failure describes terminal errors.
message ComputeFailure {
  string task_id = 1;
  string reason = 2;
  map<string, string> details = 3;
}



