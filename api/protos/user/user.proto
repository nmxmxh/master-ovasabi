syntax = "proto3";

package user;

option go_package = "github.com/ovasabi/master-ovasabi/api/protos/user";

// UserService handles user management operations
service UserService {
  // CreateUser creates a new user
  rpc CreateUser(CreateUserRequest) returns (CreateUserResponse) {}
  
  // GetUser retrieves user information
  rpc GetUser(GetUserRequest) returns (GetUserResponse) {}
  
  // UpdateUser updates user information
  rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse) {}
  
  // DeleteUser deletes a user
  rpc DeleteUser(DeleteUserRequest) returns (DeleteUserResponse) {}
  
  // ListUsers retrieves a list of users
  rpc ListUsers(ListUsersRequest) returns (ListUsersResponse) {}
  
  // UpdatePassword updates a user's password
  rpc UpdatePassword(UpdatePasswordRequest) returns (UpdatePasswordResponse) {}
  
  // UpdateProfile updates a user's profile information
  rpc UpdateProfile(UpdateProfileRequest) returns (UpdateProfileResponse) {}
}

// User represents a user in the system
message User {
  string id = 1;
  string email = 2;
  string username = 3;
  repeated string roles = 4;
  UserProfile profile = 5;
  UserStatus status = 6;
  int64 created_at = 7;
  int64 updated_at = 8;
  map<string, string> metadata = 9;
}

// UserProfile contains additional user information
message UserProfile {
  string first_name = 1;
  string last_name = 2;
  string phone_number = 3;
  string avatar_url = 4;
  string bio = 5;
  string location = 6;
  string timezone = 7;
  string language = 8;
  map<string, string> custom_fields = 9;
}

// UserStatus represents the user's account status
enum UserStatus {
  USER_STATUS_UNSPECIFIED = 0;
  USER_STATUS_ACTIVE = 1;
  USER_STATUS_INACTIVE = 2;
  USER_STATUS_SUSPENDED = 3;
  USER_STATUS_PENDING = 4;
}

// CreateUserRequest represents the request to create a new user
message CreateUserRequest {
  string email = 1;
  string username = 2;
  string password = 3;
  UserProfile profile = 4;
  repeated string roles = 5;
  map<string, string> metadata = 6;
}

// CreateUserResponse represents the response from creating a user
message CreateUserResponse {
  User user = 1;
}

// GetUserRequest represents the request to get user information
message GetUserRequest {
  string user_id = 1;
}

// GetUserResponse represents the response containing user information
message GetUserResponse {
  User user = 1;
}

// UpdateUserRequest represents the request to update user information
message UpdateUserRequest {
  string user_id = 1;
  User user = 2;
  repeated string fields_to_update = 3;
}

// UpdateUserResponse represents the response from updating user information
message UpdateUserResponse {
  User user = 1;
}

// DeleteUserRequest represents the request to delete a user
message DeleteUserRequest {
  string user_id = 1;
  bool hard_delete = 2;
}

// DeleteUserResponse represents the response from deleting a user
message DeleteUserResponse {
  bool success = 1;
}

// ListUsersRequest represents the request to list users
message ListUsersRequest {
  int32 page = 1;
  int32 page_size = 2;
  string sort_by = 3;
  bool sort_desc = 4;
  map<string, string> filters = 5;
}

// ListUsersResponse represents the response containing a list of users
message ListUsersResponse {
  repeated User users = 1;
  int32 total_count = 2;
  int32 page = 3;
  int32 total_pages = 4;
}

// UpdatePasswordRequest represents the request to update a user's password
message UpdatePasswordRequest {
  string user_id = 1;
  string current_password = 2;
  string new_password = 3;
}

// UpdatePasswordResponse represents the response from updating a password
message UpdatePasswordResponse {
  bool success = 1;
  int64 updated_at = 2;
}

// UpdateProfileRequest represents the request to update a user's profile
message UpdateProfileRequest {
  string user_id = 1;
  UserProfile profile = 2;
  repeated string fields_to_update = 3;
}

// UpdateProfileResponse represents the response from updating a profile
message UpdateProfileResponse {
  User user = 1;
} 