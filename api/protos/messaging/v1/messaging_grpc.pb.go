// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: messaging/v1/messaging.proto

package messagingpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MessagingService_SendMessage_FullMethodName                = "/messaging.v1.MessagingService/SendMessage"
	MessagingService_SendGroupMessage_FullMethodName           = "/messaging.v1.MessagingService/SendGroupMessage"
	MessagingService_EditMessage_FullMethodName                = "/messaging.v1.MessagingService/EditMessage"
	MessagingService_DeleteMessage_FullMethodName              = "/messaging.v1.MessagingService/DeleteMessage"
	MessagingService_ReactToMessage_FullMethodName             = "/messaging.v1.MessagingService/ReactToMessage"
	MessagingService_GetMessage_FullMethodName                 = "/messaging.v1.MessagingService/GetMessage"
	MessagingService_ListMessages_FullMethodName               = "/messaging.v1.MessagingService/ListMessages"
	MessagingService_ListThreads_FullMethodName                = "/messaging.v1.MessagingService/ListThreads"
	MessagingService_ListConversations_FullMethodName          = "/messaging.v1.MessagingService/ListConversations"
	MessagingService_StreamMessages_FullMethodName             = "/messaging.v1.MessagingService/StreamMessages"
	MessagingService_StreamTyping_FullMethodName               = "/messaging.v1.MessagingService/StreamTyping"
	MessagingService_StreamPresence_FullMethodName             = "/messaging.v1.MessagingService/StreamPresence"
	MessagingService_MarkAsRead_FullMethodName                 = "/messaging.v1.MessagingService/MarkAsRead"
	MessagingService_MarkAsDelivered_FullMethodName            = "/messaging.v1.MessagingService/MarkAsDelivered"
	MessagingService_AcknowledgeMessage_FullMethodName         = "/messaging.v1.MessagingService/AcknowledgeMessage"
	MessagingService_CreateChatGroup_FullMethodName            = "/messaging.v1.MessagingService/CreateChatGroup"
	MessagingService_AddChatGroupMember_FullMethodName         = "/messaging.v1.MessagingService/AddChatGroupMember"
	MessagingService_RemoveChatGroupMember_FullMethodName      = "/messaging.v1.MessagingService/RemoveChatGroupMember"
	MessagingService_ListChatGroupMembers_FullMethodName       = "/messaging.v1.MessagingService/ListChatGroupMembers"
	MessagingService_UpdateMessagingPreferences_FullMethodName = "/messaging.v1.MessagingService/UpdateMessagingPreferences"
	MessagingService_ListMessageEvents_FullMethodName          = "/messaging.v1.MessagingService/ListMessageEvents"
)

// MessagingServiceClient is the client API for MessagingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// --- Messaging Service: Robust, Extensible, Real-Time ---
type MessagingServiceClient interface {
	// --- Direct & Group Messaging ---
	SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error)
	SendGroupMessage(ctx context.Context, in *SendGroupMessageRequest, opts ...grpc.CallOption) (*SendGroupMessageResponse, error)
	EditMessage(ctx context.Context, in *EditMessageRequest, opts ...grpc.CallOption) (*EditMessageResponse, error)
	DeleteMessage(ctx context.Context, in *DeleteMessageRequest, opts ...grpc.CallOption) (*DeleteMessageResponse, error)
	ReactToMessage(ctx context.Context, in *ReactToMessageRequest, opts ...grpc.CallOption) (*ReactToMessageResponse, error)
	// --- Retrieval ---
	GetMessage(ctx context.Context, in *GetMessageRequest, opts ...grpc.CallOption) (*GetMessageResponse, error)
	ListMessages(ctx context.Context, in *ListMessagesRequest, opts ...grpc.CallOption) (*ListMessagesResponse, error)
	ListThreads(ctx context.Context, in *ListThreadsRequest, opts ...grpc.CallOption) (*ListThreadsResponse, error)
	ListConversations(ctx context.Context, in *ListConversationsRequest, opts ...grpc.CallOption) (*ListConversationsResponse, error)
	// --- Real-Time Streaming ---
	StreamMessages(ctx context.Context, in *StreamMessagesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[MessageEvent], error)
	StreamTyping(ctx context.Context, in *StreamTypingRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TypingEvent], error)
	StreamPresence(ctx context.Context, in *StreamPresenceRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PresenceEvent], error)
	// --- Read/Delivery/Ack ---
	MarkAsRead(ctx context.Context, in *MarkAsReadRequest, opts ...grpc.CallOption) (*MarkAsReadResponse, error)
	MarkAsDelivered(ctx context.Context, in *MarkAsDeliveredRequest, opts ...grpc.CallOption) (*MarkAsDeliveredResponse, error)
	AcknowledgeMessage(ctx context.Context, in *AcknowledgeMessageRequest, opts ...grpc.CallOption) (*AcknowledgeMessageResponse, error)
	// --- Group Management ---
	CreateChatGroup(ctx context.Context, in *CreateChatGroupRequest, opts ...grpc.CallOption) (*CreateChatGroupResponse, error)
	AddChatGroupMember(ctx context.Context, in *AddChatGroupMemberRequest, opts ...grpc.CallOption) (*AddChatGroupMemberResponse, error)
	RemoveChatGroupMember(ctx context.Context, in *RemoveChatGroupMemberRequest, opts ...grpc.CallOption) (*RemoveChatGroupMemberResponse, error)
	ListChatGroupMembers(ctx context.Context, in *ListChatGroupMembersRequest, opts ...grpc.CallOption) (*ListChatGroupMembersResponse, error)
	// --- Preferences ---
	UpdateMessagingPreferences(ctx context.Context, in *UpdateMessagingPreferencesRequest, opts ...grpc.CallOption) (*UpdateMessagingPreferencesResponse, error)
	// --- Analytics/Events ---
	ListMessageEvents(ctx context.Context, in *ListMessageEventsRequest, opts ...grpc.CallOption) (*ListMessageEventsResponse, error)
}

type messagingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMessagingServiceClient(cc grpc.ClientConnInterface) MessagingServiceClient {
	return &messagingServiceClient{cc}
}

func (c *messagingServiceClient) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendMessageResponse)
	err := c.cc.Invoke(ctx, MessagingService_SendMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingServiceClient) SendGroupMessage(ctx context.Context, in *SendGroupMessageRequest, opts ...grpc.CallOption) (*SendGroupMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendGroupMessageResponse)
	err := c.cc.Invoke(ctx, MessagingService_SendGroupMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingServiceClient) EditMessage(ctx context.Context, in *EditMessageRequest, opts ...grpc.CallOption) (*EditMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EditMessageResponse)
	err := c.cc.Invoke(ctx, MessagingService_EditMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingServiceClient) DeleteMessage(ctx context.Context, in *DeleteMessageRequest, opts ...grpc.CallOption) (*DeleteMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteMessageResponse)
	err := c.cc.Invoke(ctx, MessagingService_DeleteMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingServiceClient) ReactToMessage(ctx context.Context, in *ReactToMessageRequest, opts ...grpc.CallOption) (*ReactToMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReactToMessageResponse)
	err := c.cc.Invoke(ctx, MessagingService_ReactToMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingServiceClient) GetMessage(ctx context.Context, in *GetMessageRequest, opts ...grpc.CallOption) (*GetMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMessageResponse)
	err := c.cc.Invoke(ctx, MessagingService_GetMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingServiceClient) ListMessages(ctx context.Context, in *ListMessagesRequest, opts ...grpc.CallOption) (*ListMessagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMessagesResponse)
	err := c.cc.Invoke(ctx, MessagingService_ListMessages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingServiceClient) ListThreads(ctx context.Context, in *ListThreadsRequest, opts ...grpc.CallOption) (*ListThreadsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListThreadsResponse)
	err := c.cc.Invoke(ctx, MessagingService_ListThreads_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingServiceClient) ListConversations(ctx context.Context, in *ListConversationsRequest, opts ...grpc.CallOption) (*ListConversationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListConversationsResponse)
	err := c.cc.Invoke(ctx, MessagingService_ListConversations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingServiceClient) StreamMessages(ctx context.Context, in *StreamMessagesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[MessageEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MessagingService_ServiceDesc.Streams[0], MessagingService_StreamMessages_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamMessagesRequest, MessageEvent]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MessagingService_StreamMessagesClient = grpc.ServerStreamingClient[MessageEvent]

func (c *messagingServiceClient) StreamTyping(ctx context.Context, in *StreamTypingRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TypingEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MessagingService_ServiceDesc.Streams[1], MessagingService_StreamTyping_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamTypingRequest, TypingEvent]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MessagingService_StreamTypingClient = grpc.ServerStreamingClient[TypingEvent]

func (c *messagingServiceClient) StreamPresence(ctx context.Context, in *StreamPresenceRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PresenceEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MessagingService_ServiceDesc.Streams[2], MessagingService_StreamPresence_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamPresenceRequest, PresenceEvent]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MessagingService_StreamPresenceClient = grpc.ServerStreamingClient[PresenceEvent]

func (c *messagingServiceClient) MarkAsRead(ctx context.Context, in *MarkAsReadRequest, opts ...grpc.CallOption) (*MarkAsReadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MarkAsReadResponse)
	err := c.cc.Invoke(ctx, MessagingService_MarkAsRead_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingServiceClient) MarkAsDelivered(ctx context.Context, in *MarkAsDeliveredRequest, opts ...grpc.CallOption) (*MarkAsDeliveredResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MarkAsDeliveredResponse)
	err := c.cc.Invoke(ctx, MessagingService_MarkAsDelivered_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingServiceClient) AcknowledgeMessage(ctx context.Context, in *AcknowledgeMessageRequest, opts ...grpc.CallOption) (*AcknowledgeMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AcknowledgeMessageResponse)
	err := c.cc.Invoke(ctx, MessagingService_AcknowledgeMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingServiceClient) CreateChatGroup(ctx context.Context, in *CreateChatGroupRequest, opts ...grpc.CallOption) (*CreateChatGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateChatGroupResponse)
	err := c.cc.Invoke(ctx, MessagingService_CreateChatGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingServiceClient) AddChatGroupMember(ctx context.Context, in *AddChatGroupMemberRequest, opts ...grpc.CallOption) (*AddChatGroupMemberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddChatGroupMemberResponse)
	err := c.cc.Invoke(ctx, MessagingService_AddChatGroupMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingServiceClient) RemoveChatGroupMember(ctx context.Context, in *RemoveChatGroupMemberRequest, opts ...grpc.CallOption) (*RemoveChatGroupMemberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveChatGroupMemberResponse)
	err := c.cc.Invoke(ctx, MessagingService_RemoveChatGroupMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingServiceClient) ListChatGroupMembers(ctx context.Context, in *ListChatGroupMembersRequest, opts ...grpc.CallOption) (*ListChatGroupMembersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListChatGroupMembersResponse)
	err := c.cc.Invoke(ctx, MessagingService_ListChatGroupMembers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingServiceClient) UpdateMessagingPreferences(ctx context.Context, in *UpdateMessagingPreferencesRequest, opts ...grpc.CallOption) (*UpdateMessagingPreferencesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateMessagingPreferencesResponse)
	err := c.cc.Invoke(ctx, MessagingService_UpdateMessagingPreferences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingServiceClient) ListMessageEvents(ctx context.Context, in *ListMessageEventsRequest, opts ...grpc.CallOption) (*ListMessageEventsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMessageEventsResponse)
	err := c.cc.Invoke(ctx, MessagingService_ListMessageEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessagingServiceServer is the server API for MessagingService service.
// All implementations must embed UnimplementedMessagingServiceServer
// for forward compatibility.
//
// --- Messaging Service: Robust, Extensible, Real-Time ---
type MessagingServiceServer interface {
	// --- Direct & Group Messaging ---
	SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error)
	SendGroupMessage(context.Context, *SendGroupMessageRequest) (*SendGroupMessageResponse, error)
	EditMessage(context.Context, *EditMessageRequest) (*EditMessageResponse, error)
	DeleteMessage(context.Context, *DeleteMessageRequest) (*DeleteMessageResponse, error)
	ReactToMessage(context.Context, *ReactToMessageRequest) (*ReactToMessageResponse, error)
	// --- Retrieval ---
	GetMessage(context.Context, *GetMessageRequest) (*GetMessageResponse, error)
	ListMessages(context.Context, *ListMessagesRequest) (*ListMessagesResponse, error)
	ListThreads(context.Context, *ListThreadsRequest) (*ListThreadsResponse, error)
	ListConversations(context.Context, *ListConversationsRequest) (*ListConversationsResponse, error)
	// --- Real-Time Streaming ---
	StreamMessages(*StreamMessagesRequest, grpc.ServerStreamingServer[MessageEvent]) error
	StreamTyping(*StreamTypingRequest, grpc.ServerStreamingServer[TypingEvent]) error
	StreamPresence(*StreamPresenceRequest, grpc.ServerStreamingServer[PresenceEvent]) error
	// --- Read/Delivery/Ack ---
	MarkAsRead(context.Context, *MarkAsReadRequest) (*MarkAsReadResponse, error)
	MarkAsDelivered(context.Context, *MarkAsDeliveredRequest) (*MarkAsDeliveredResponse, error)
	AcknowledgeMessage(context.Context, *AcknowledgeMessageRequest) (*AcknowledgeMessageResponse, error)
	// --- Group Management ---
	CreateChatGroup(context.Context, *CreateChatGroupRequest) (*CreateChatGroupResponse, error)
	AddChatGroupMember(context.Context, *AddChatGroupMemberRequest) (*AddChatGroupMemberResponse, error)
	RemoveChatGroupMember(context.Context, *RemoveChatGroupMemberRequest) (*RemoveChatGroupMemberResponse, error)
	ListChatGroupMembers(context.Context, *ListChatGroupMembersRequest) (*ListChatGroupMembersResponse, error)
	// --- Preferences ---
	UpdateMessagingPreferences(context.Context, *UpdateMessagingPreferencesRequest) (*UpdateMessagingPreferencesResponse, error)
	// --- Analytics/Events ---
	ListMessageEvents(context.Context, *ListMessageEventsRequest) (*ListMessageEventsResponse, error)
	mustEmbedUnimplementedMessagingServiceServer()
}

// UnimplementedMessagingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMessagingServiceServer struct{}

func (UnimplementedMessagingServiceServer) SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedMessagingServiceServer) SendGroupMessage(context.Context, *SendGroupMessageRequest) (*SendGroupMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendGroupMessage not implemented")
}
func (UnimplementedMessagingServiceServer) EditMessage(context.Context, *EditMessageRequest) (*EditMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditMessage not implemented")
}
func (UnimplementedMessagingServiceServer) DeleteMessage(context.Context, *DeleteMessageRequest) (*DeleteMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMessage not implemented")
}
func (UnimplementedMessagingServiceServer) ReactToMessage(context.Context, *ReactToMessageRequest) (*ReactToMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReactToMessage not implemented")
}
func (UnimplementedMessagingServiceServer) GetMessage(context.Context, *GetMessageRequest) (*GetMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessage not implemented")
}
func (UnimplementedMessagingServiceServer) ListMessages(context.Context, *ListMessagesRequest) (*ListMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMessages not implemented")
}
func (UnimplementedMessagingServiceServer) ListThreads(context.Context, *ListThreadsRequest) (*ListThreadsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListThreads not implemented")
}
func (UnimplementedMessagingServiceServer) ListConversations(context.Context, *ListConversationsRequest) (*ListConversationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConversations not implemented")
}
func (UnimplementedMessagingServiceServer) StreamMessages(*StreamMessagesRequest, grpc.ServerStreamingServer[MessageEvent]) error {
	return status.Errorf(codes.Unimplemented, "method StreamMessages not implemented")
}
func (UnimplementedMessagingServiceServer) StreamTyping(*StreamTypingRequest, grpc.ServerStreamingServer[TypingEvent]) error {
	return status.Errorf(codes.Unimplemented, "method StreamTyping not implemented")
}
func (UnimplementedMessagingServiceServer) StreamPresence(*StreamPresenceRequest, grpc.ServerStreamingServer[PresenceEvent]) error {
	return status.Errorf(codes.Unimplemented, "method StreamPresence not implemented")
}
func (UnimplementedMessagingServiceServer) MarkAsRead(context.Context, *MarkAsReadRequest) (*MarkAsReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkAsRead not implemented")
}
func (UnimplementedMessagingServiceServer) MarkAsDelivered(context.Context, *MarkAsDeliveredRequest) (*MarkAsDeliveredResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkAsDelivered not implemented")
}
func (UnimplementedMessagingServiceServer) AcknowledgeMessage(context.Context, *AcknowledgeMessageRequest) (*AcknowledgeMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcknowledgeMessage not implemented")
}
func (UnimplementedMessagingServiceServer) CreateChatGroup(context.Context, *CreateChatGroupRequest) (*CreateChatGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChatGroup not implemented")
}
func (UnimplementedMessagingServiceServer) AddChatGroupMember(context.Context, *AddChatGroupMemberRequest) (*AddChatGroupMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddChatGroupMember not implemented")
}
func (UnimplementedMessagingServiceServer) RemoveChatGroupMember(context.Context, *RemoveChatGroupMemberRequest) (*RemoveChatGroupMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveChatGroupMember not implemented")
}
func (UnimplementedMessagingServiceServer) ListChatGroupMembers(context.Context, *ListChatGroupMembersRequest) (*ListChatGroupMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChatGroupMembers not implemented")
}
func (UnimplementedMessagingServiceServer) UpdateMessagingPreferences(context.Context, *UpdateMessagingPreferencesRequest) (*UpdateMessagingPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMessagingPreferences not implemented")
}
func (UnimplementedMessagingServiceServer) ListMessageEvents(context.Context, *ListMessageEventsRequest) (*ListMessageEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMessageEvents not implemented")
}
func (UnimplementedMessagingServiceServer) mustEmbedUnimplementedMessagingServiceServer() {}
func (UnimplementedMessagingServiceServer) testEmbeddedByValue()                          {}

// UnsafeMessagingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessagingServiceServer will
// result in compilation errors.
type UnsafeMessagingServiceServer interface {
	mustEmbedUnimplementedMessagingServiceServer()
}

func RegisterMessagingServiceServer(s grpc.ServiceRegistrar, srv MessagingServiceServer) {
	// If the following call pancis, it indicates UnimplementedMessagingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MessagingService_ServiceDesc, srv)
}

func _MessagingService_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServiceServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessagingService_SendMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServiceServer).SendMessage(ctx, req.(*SendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessagingService_SendGroupMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendGroupMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServiceServer).SendGroupMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessagingService_SendGroupMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServiceServer).SendGroupMessage(ctx, req.(*SendGroupMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessagingService_EditMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServiceServer).EditMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessagingService_EditMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServiceServer).EditMessage(ctx, req.(*EditMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessagingService_DeleteMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServiceServer).DeleteMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessagingService_DeleteMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServiceServer).DeleteMessage(ctx, req.(*DeleteMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessagingService_ReactToMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReactToMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServiceServer).ReactToMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessagingService_ReactToMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServiceServer).ReactToMessage(ctx, req.(*ReactToMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessagingService_GetMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServiceServer).GetMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessagingService_GetMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServiceServer).GetMessage(ctx, req.(*GetMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessagingService_ListMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServiceServer).ListMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessagingService_ListMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServiceServer).ListMessages(ctx, req.(*ListMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessagingService_ListThreads_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListThreadsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServiceServer).ListThreads(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessagingService_ListThreads_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServiceServer).ListThreads(ctx, req.(*ListThreadsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessagingService_ListConversations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConversationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServiceServer).ListConversations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessagingService_ListConversations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServiceServer).ListConversations(ctx, req.(*ListConversationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessagingService_StreamMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamMessagesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessagingServiceServer).StreamMessages(m, &grpc.GenericServerStream[StreamMessagesRequest, MessageEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MessagingService_StreamMessagesServer = grpc.ServerStreamingServer[MessageEvent]

func _MessagingService_StreamTyping_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamTypingRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessagingServiceServer).StreamTyping(m, &grpc.GenericServerStream[StreamTypingRequest, TypingEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MessagingService_StreamTypingServer = grpc.ServerStreamingServer[TypingEvent]

func _MessagingService_StreamPresence_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamPresenceRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessagingServiceServer).StreamPresence(m, &grpc.GenericServerStream[StreamPresenceRequest, PresenceEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MessagingService_StreamPresenceServer = grpc.ServerStreamingServer[PresenceEvent]

func _MessagingService_MarkAsRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkAsReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServiceServer).MarkAsRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessagingService_MarkAsRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServiceServer).MarkAsRead(ctx, req.(*MarkAsReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessagingService_MarkAsDelivered_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkAsDeliveredRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServiceServer).MarkAsDelivered(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessagingService_MarkAsDelivered_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServiceServer).MarkAsDelivered(ctx, req.(*MarkAsDeliveredRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessagingService_AcknowledgeMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcknowledgeMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServiceServer).AcknowledgeMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessagingService_AcknowledgeMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServiceServer).AcknowledgeMessage(ctx, req.(*AcknowledgeMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessagingService_CreateChatGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChatGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServiceServer).CreateChatGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessagingService_CreateChatGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServiceServer).CreateChatGroup(ctx, req.(*CreateChatGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessagingService_AddChatGroupMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddChatGroupMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServiceServer).AddChatGroupMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessagingService_AddChatGroupMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServiceServer).AddChatGroupMember(ctx, req.(*AddChatGroupMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessagingService_RemoveChatGroupMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveChatGroupMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServiceServer).RemoveChatGroupMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessagingService_RemoveChatGroupMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServiceServer).RemoveChatGroupMember(ctx, req.(*RemoveChatGroupMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessagingService_ListChatGroupMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChatGroupMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServiceServer).ListChatGroupMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessagingService_ListChatGroupMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServiceServer).ListChatGroupMembers(ctx, req.(*ListChatGroupMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessagingService_UpdateMessagingPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMessagingPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServiceServer).UpdateMessagingPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessagingService_UpdateMessagingPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServiceServer).UpdateMessagingPreferences(ctx, req.(*UpdateMessagingPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessagingService_ListMessageEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMessageEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServiceServer).ListMessageEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessagingService_ListMessageEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServiceServer).ListMessageEvents(ctx, req.(*ListMessageEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MessagingService_ServiceDesc is the grpc.ServiceDesc for MessagingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessagingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "messaging.v1.MessagingService",
	HandlerType: (*MessagingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMessage",
			Handler:    _MessagingService_SendMessage_Handler,
		},
		{
			MethodName: "SendGroupMessage",
			Handler:    _MessagingService_SendGroupMessage_Handler,
		},
		{
			MethodName: "EditMessage",
			Handler:    _MessagingService_EditMessage_Handler,
		},
		{
			MethodName: "DeleteMessage",
			Handler:    _MessagingService_DeleteMessage_Handler,
		},
		{
			MethodName: "ReactToMessage",
			Handler:    _MessagingService_ReactToMessage_Handler,
		},
		{
			MethodName: "GetMessage",
			Handler:    _MessagingService_GetMessage_Handler,
		},
		{
			MethodName: "ListMessages",
			Handler:    _MessagingService_ListMessages_Handler,
		},
		{
			MethodName: "ListThreads",
			Handler:    _MessagingService_ListThreads_Handler,
		},
		{
			MethodName: "ListConversations",
			Handler:    _MessagingService_ListConversations_Handler,
		},
		{
			MethodName: "MarkAsRead",
			Handler:    _MessagingService_MarkAsRead_Handler,
		},
		{
			MethodName: "MarkAsDelivered",
			Handler:    _MessagingService_MarkAsDelivered_Handler,
		},
		{
			MethodName: "AcknowledgeMessage",
			Handler:    _MessagingService_AcknowledgeMessage_Handler,
		},
		{
			MethodName: "CreateChatGroup",
			Handler:    _MessagingService_CreateChatGroup_Handler,
		},
		{
			MethodName: "AddChatGroupMember",
			Handler:    _MessagingService_AddChatGroupMember_Handler,
		},
		{
			MethodName: "RemoveChatGroupMember",
			Handler:    _MessagingService_RemoveChatGroupMember_Handler,
		},
		{
			MethodName: "ListChatGroupMembers",
			Handler:    _MessagingService_ListChatGroupMembers_Handler,
		},
		{
			MethodName: "UpdateMessagingPreferences",
			Handler:    _MessagingService_UpdateMessagingPreferences_Handler,
		},
		{
			MethodName: "ListMessageEvents",
			Handler:    _MessagingService_ListMessageEvents_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamMessages",
			Handler:       _MessagingService_StreamMessages_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamTyping",
			Handler:       _MessagingService_StreamTyping_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamPresence",
			Handler:       _MessagingService_StreamPresence_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "messaging/v1/messaging.proto",
}
