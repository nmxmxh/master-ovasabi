// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: api/protos/quotes/v0/quotes.proto

package quotes

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	QuotesService_CreateQuote_FullMethodName = "/quotes.QuotesService/CreateQuote"
	QuotesService_GetQuote_FullMethodName    = "/quotes.QuotesService/GetQuote"
	QuotesService_ListQuotes_FullMethodName  = "/quotes.QuotesService/ListQuotes"
)

// QuotesServiceClient is the client API for QuotesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// QuotesService provides operations for managing quotes
type QuotesServiceClient interface {
	CreateQuote(ctx context.Context, in *CreateQuoteRequest, opts ...grpc.CallOption) (*CreateQuoteResponse, error)
	GetQuote(ctx context.Context, in *GetQuoteRequest, opts ...grpc.CallOption) (*GetQuoteResponse, error)
	ListQuotes(ctx context.Context, in *ListQuotesRequest, opts ...grpc.CallOption) (*ListQuotesResponse, error)
}

type quotesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQuotesServiceClient(cc grpc.ClientConnInterface) QuotesServiceClient {
	return &quotesServiceClient{cc}
}

func (c *quotesServiceClient) CreateQuote(ctx context.Context, in *CreateQuoteRequest, opts ...grpc.CallOption) (*CreateQuoteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateQuoteResponse)
	err := c.cc.Invoke(ctx, QuotesService_CreateQuote_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotesServiceClient) GetQuote(ctx context.Context, in *GetQuoteRequest, opts ...grpc.CallOption) (*GetQuoteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetQuoteResponse)
	err := c.cc.Invoke(ctx, QuotesService_GetQuote_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotesServiceClient) ListQuotes(ctx context.Context, in *ListQuotesRequest, opts ...grpc.CallOption) (*ListQuotesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListQuotesResponse)
	err := c.cc.Invoke(ctx, QuotesService_ListQuotes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuotesServiceServer is the server API for QuotesService service.
// All implementations must embed UnimplementedQuotesServiceServer
// for forward compatibility.
//
// QuotesService provides operations for managing quotes
type QuotesServiceServer interface {
	CreateQuote(context.Context, *CreateQuoteRequest) (*CreateQuoteResponse, error)
	GetQuote(context.Context, *GetQuoteRequest) (*GetQuoteResponse, error)
	ListQuotes(context.Context, *ListQuotesRequest) (*ListQuotesResponse, error)
	mustEmbedUnimplementedQuotesServiceServer()
}

// UnimplementedQuotesServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedQuotesServiceServer struct{}

func (UnimplementedQuotesServiceServer) CreateQuote(context.Context, *CreateQuoteRequest) (*CreateQuoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQuote not implemented")
}
func (UnimplementedQuotesServiceServer) GetQuote(context.Context, *GetQuoteRequest) (*GetQuoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuote not implemented")
}
func (UnimplementedQuotesServiceServer) ListQuotes(context.Context, *ListQuotesRequest) (*ListQuotesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListQuotes not implemented")
}
func (UnimplementedQuotesServiceServer) mustEmbedUnimplementedQuotesServiceServer() {}
func (UnimplementedQuotesServiceServer) testEmbeddedByValue()                       {}

// UnsafeQuotesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuotesServiceServer will
// result in compilation errors.
type UnsafeQuotesServiceServer interface {
	mustEmbedUnimplementedQuotesServiceServer()
}

func RegisterQuotesServiceServer(s grpc.ServiceRegistrar, srv QuotesServiceServer) {
	// If the following call pancis, it indicates UnimplementedQuotesServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&QuotesService_ServiceDesc, srv)
}

func _QuotesService_CreateQuote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQuoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuotesServiceServer).CreateQuote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuotesService_CreateQuote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuotesServiceServer).CreateQuote(ctx, req.(*CreateQuoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuotesService_GetQuote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuotesServiceServer).GetQuote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuotesService_GetQuote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuotesServiceServer).GetQuote(ctx, req.(*GetQuoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuotesService_ListQuotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListQuotesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuotesServiceServer).ListQuotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuotesService_ListQuotes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuotesServiceServer).ListQuotes(ctx, req.(*ListQuotesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QuotesService_ServiceDesc is the grpc.ServiceDesc for QuotesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QuotesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "quotes.QuotesService",
	HandlerType: (*QuotesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateQuote",
			Handler:    _QuotesService_CreateQuote_Handler,
		},
		{
			MethodName: "GetQuote",
			Handler:    _QuotesService_GetQuote_Handler,
		},
		{
			MethodName: "ListQuotes",
			Handler:    _QuotesService_ListQuotes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/protos/quotes/v0/quotes.proto",
}
