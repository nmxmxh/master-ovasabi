// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: media/v1/media.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MediaService_UploadLightMedia_FullMethodName       = "/media.v1.MediaService/UploadLightMedia"
	MediaService_StartHeavyMediaUpload_FullMethodName  = "/media.v1.MediaService/StartHeavyMediaUpload"
	MediaService_StreamMediaChunk_FullMethodName       = "/media.v1.MediaService/StreamMediaChunk"
	MediaService_CompleteMediaUpload_FullMethodName    = "/media.v1.MediaService/CompleteMediaUpload"
	MediaService_GetMedia_FullMethodName               = "/media.v1.MediaService/GetMedia"
	MediaService_StreamMediaContent_FullMethodName     = "/media.v1.MediaService/StreamMediaContent"
	MediaService_DeleteMedia_FullMethodName            = "/media.v1.MediaService/DeleteMedia"
	MediaService_ListUserMedia_FullMethodName          = "/media.v1.MediaService/ListUserMedia"
	MediaService_ListSystemMedia_FullMethodName        = "/media.v1.MediaService/ListSystemMedia"
	MediaService_SubscribeToUserMedia_FullMethodName   = "/media.v1.MediaService/SubscribeToUserMedia"
	MediaService_SubscribeToSystemMedia_FullMethodName = "/media.v1.MediaService/SubscribeToSystemMedia"
	MediaService_BroadcastSystemMedia_FullMethodName   = "/media.v1.MediaService/BroadcastSystemMedia"
)

// MediaServiceClient is the client API for MediaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// MediaService handles storage and retrieval of media files
// (images, videos, 3D assets, etc.)
type MediaServiceClient interface {
	UploadLightMedia(ctx context.Context, in *UploadLightMediaRequest, opts ...grpc.CallOption) (*UploadLightMediaResponse, error)
	StartHeavyMediaUpload(ctx context.Context, in *StartHeavyMediaUploadRequest, opts ...grpc.CallOption) (*StartHeavyMediaUploadResponse, error)
	StreamMediaChunk(ctx context.Context, in *StreamMediaChunkRequest, opts ...grpc.CallOption) (*StreamMediaChunkResponse, error)
	CompleteMediaUpload(ctx context.Context, in *CompleteMediaUploadRequest, opts ...grpc.CallOption) (*CompleteMediaUploadResponse, error)
	GetMedia(ctx context.Context, in *GetMediaRequest, opts ...grpc.CallOption) (*GetMediaResponse, error)
	StreamMediaContent(ctx context.Context, in *StreamMediaContentRequest, opts ...grpc.CallOption) (*StreamMediaContentResponse, error)
	DeleteMedia(ctx context.Context, in *DeleteMediaRequest, opts ...grpc.CallOption) (*DeleteMediaResponse, error)
	ListUserMedia(ctx context.Context, in *ListUserMediaRequest, opts ...grpc.CallOption) (*ListUserMediaResponse, error)
	ListSystemMedia(ctx context.Context, in *ListSystemMediaRequest, opts ...grpc.CallOption) (*ListSystemMediaResponse, error)
	SubscribeToUserMedia(ctx context.Context, in *SubscribeToUserMediaRequest, opts ...grpc.CallOption) (*SubscribeToUserMediaResponse, error)
	SubscribeToSystemMedia(ctx context.Context, in *SubscribeToSystemMediaRequest, opts ...grpc.CallOption) (*SubscribeToSystemMediaResponse, error)
	BroadcastSystemMedia(ctx context.Context, in *BroadcastSystemMediaRequest, opts ...grpc.CallOption) (*BroadcastSystemMediaResponse, error)
}

type mediaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMediaServiceClient(cc grpc.ClientConnInterface) MediaServiceClient {
	return &mediaServiceClient{cc}
}

func (c *mediaServiceClient) UploadLightMedia(ctx context.Context, in *UploadLightMediaRequest, opts ...grpc.CallOption) (*UploadLightMediaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadLightMediaResponse)
	err := c.cc.Invoke(ctx, MediaService_UploadLightMedia_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaServiceClient) StartHeavyMediaUpload(ctx context.Context, in *StartHeavyMediaUploadRequest, opts ...grpc.CallOption) (*StartHeavyMediaUploadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartHeavyMediaUploadResponse)
	err := c.cc.Invoke(ctx, MediaService_StartHeavyMediaUpload_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaServiceClient) StreamMediaChunk(ctx context.Context, in *StreamMediaChunkRequest, opts ...grpc.CallOption) (*StreamMediaChunkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StreamMediaChunkResponse)
	err := c.cc.Invoke(ctx, MediaService_StreamMediaChunk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaServiceClient) CompleteMediaUpload(ctx context.Context, in *CompleteMediaUploadRequest, opts ...grpc.CallOption) (*CompleteMediaUploadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CompleteMediaUploadResponse)
	err := c.cc.Invoke(ctx, MediaService_CompleteMediaUpload_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaServiceClient) GetMedia(ctx context.Context, in *GetMediaRequest, opts ...grpc.CallOption) (*GetMediaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMediaResponse)
	err := c.cc.Invoke(ctx, MediaService_GetMedia_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaServiceClient) StreamMediaContent(ctx context.Context, in *StreamMediaContentRequest, opts ...grpc.CallOption) (*StreamMediaContentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StreamMediaContentResponse)
	err := c.cc.Invoke(ctx, MediaService_StreamMediaContent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaServiceClient) DeleteMedia(ctx context.Context, in *DeleteMediaRequest, opts ...grpc.CallOption) (*DeleteMediaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteMediaResponse)
	err := c.cc.Invoke(ctx, MediaService_DeleteMedia_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaServiceClient) ListUserMedia(ctx context.Context, in *ListUserMediaRequest, opts ...grpc.CallOption) (*ListUserMediaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUserMediaResponse)
	err := c.cc.Invoke(ctx, MediaService_ListUserMedia_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaServiceClient) ListSystemMedia(ctx context.Context, in *ListSystemMediaRequest, opts ...grpc.CallOption) (*ListSystemMediaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSystemMediaResponse)
	err := c.cc.Invoke(ctx, MediaService_ListSystemMedia_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaServiceClient) SubscribeToUserMedia(ctx context.Context, in *SubscribeToUserMediaRequest, opts ...grpc.CallOption) (*SubscribeToUserMediaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubscribeToUserMediaResponse)
	err := c.cc.Invoke(ctx, MediaService_SubscribeToUserMedia_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaServiceClient) SubscribeToSystemMedia(ctx context.Context, in *SubscribeToSystemMediaRequest, opts ...grpc.CallOption) (*SubscribeToSystemMediaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubscribeToSystemMediaResponse)
	err := c.cc.Invoke(ctx, MediaService_SubscribeToSystemMedia_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaServiceClient) BroadcastSystemMedia(ctx context.Context, in *BroadcastSystemMediaRequest, opts ...grpc.CallOption) (*BroadcastSystemMediaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BroadcastSystemMediaResponse)
	err := c.cc.Invoke(ctx, MediaService_BroadcastSystemMedia_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MediaServiceServer is the server API for MediaService service.
// All implementations must embed UnimplementedMediaServiceServer
// for forward compatibility.
//
// MediaService handles storage and retrieval of media files
// (images, videos, 3D assets, etc.)
type MediaServiceServer interface {
	UploadLightMedia(context.Context, *UploadLightMediaRequest) (*UploadLightMediaResponse, error)
	StartHeavyMediaUpload(context.Context, *StartHeavyMediaUploadRequest) (*StartHeavyMediaUploadResponse, error)
	StreamMediaChunk(context.Context, *StreamMediaChunkRequest) (*StreamMediaChunkResponse, error)
	CompleteMediaUpload(context.Context, *CompleteMediaUploadRequest) (*CompleteMediaUploadResponse, error)
	GetMedia(context.Context, *GetMediaRequest) (*GetMediaResponse, error)
	StreamMediaContent(context.Context, *StreamMediaContentRequest) (*StreamMediaContentResponse, error)
	DeleteMedia(context.Context, *DeleteMediaRequest) (*DeleteMediaResponse, error)
	ListUserMedia(context.Context, *ListUserMediaRequest) (*ListUserMediaResponse, error)
	ListSystemMedia(context.Context, *ListSystemMediaRequest) (*ListSystemMediaResponse, error)
	SubscribeToUserMedia(context.Context, *SubscribeToUserMediaRequest) (*SubscribeToUserMediaResponse, error)
	SubscribeToSystemMedia(context.Context, *SubscribeToSystemMediaRequest) (*SubscribeToSystemMediaResponse, error)
	BroadcastSystemMedia(context.Context, *BroadcastSystemMediaRequest) (*BroadcastSystemMediaResponse, error)
	mustEmbedUnimplementedMediaServiceServer()
}

// UnimplementedMediaServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMediaServiceServer struct{}

func (UnimplementedMediaServiceServer) UploadLightMedia(context.Context, *UploadLightMediaRequest) (*UploadLightMediaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadLightMedia not implemented")
}
func (UnimplementedMediaServiceServer) StartHeavyMediaUpload(context.Context, *StartHeavyMediaUploadRequest) (*StartHeavyMediaUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartHeavyMediaUpload not implemented")
}
func (UnimplementedMediaServiceServer) StreamMediaChunk(context.Context, *StreamMediaChunkRequest) (*StreamMediaChunkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StreamMediaChunk not implemented")
}
func (UnimplementedMediaServiceServer) CompleteMediaUpload(context.Context, *CompleteMediaUploadRequest) (*CompleteMediaUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteMediaUpload not implemented")
}
func (UnimplementedMediaServiceServer) GetMedia(context.Context, *GetMediaRequest) (*GetMediaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMedia not implemented")
}
func (UnimplementedMediaServiceServer) StreamMediaContent(context.Context, *StreamMediaContentRequest) (*StreamMediaContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StreamMediaContent not implemented")
}
func (UnimplementedMediaServiceServer) DeleteMedia(context.Context, *DeleteMediaRequest) (*DeleteMediaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMedia not implemented")
}
func (UnimplementedMediaServiceServer) ListUserMedia(context.Context, *ListUserMediaRequest) (*ListUserMediaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserMedia not implemented")
}
func (UnimplementedMediaServiceServer) ListSystemMedia(context.Context, *ListSystemMediaRequest) (*ListSystemMediaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSystemMedia not implemented")
}
func (UnimplementedMediaServiceServer) SubscribeToUserMedia(context.Context, *SubscribeToUserMediaRequest) (*SubscribeToUserMediaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubscribeToUserMedia not implemented")
}
func (UnimplementedMediaServiceServer) SubscribeToSystemMedia(context.Context, *SubscribeToSystemMediaRequest) (*SubscribeToSystemMediaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubscribeToSystemMedia not implemented")
}
func (UnimplementedMediaServiceServer) BroadcastSystemMedia(context.Context, *BroadcastSystemMediaRequest) (*BroadcastSystemMediaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BroadcastSystemMedia not implemented")
}
func (UnimplementedMediaServiceServer) mustEmbedUnimplementedMediaServiceServer() {}
func (UnimplementedMediaServiceServer) testEmbeddedByValue()                      {}

// UnsafeMediaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MediaServiceServer will
// result in compilation errors.
type UnsafeMediaServiceServer interface {
	mustEmbedUnimplementedMediaServiceServer()
}

func RegisterMediaServiceServer(s grpc.ServiceRegistrar, srv MediaServiceServer) {
	// If the following call pancis, it indicates UnimplementedMediaServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MediaService_ServiceDesc, srv)
}

func _MediaService_UploadLightMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadLightMediaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServiceServer).UploadLightMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaService_UploadLightMedia_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServiceServer).UploadLightMedia(ctx, req.(*UploadLightMediaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaService_StartHeavyMediaUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartHeavyMediaUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServiceServer).StartHeavyMediaUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaService_StartHeavyMediaUpload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServiceServer).StartHeavyMediaUpload(ctx, req.(*StartHeavyMediaUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaService_StreamMediaChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamMediaChunkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServiceServer).StreamMediaChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaService_StreamMediaChunk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServiceServer).StreamMediaChunk(ctx, req.(*StreamMediaChunkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaService_CompleteMediaUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteMediaUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServiceServer).CompleteMediaUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaService_CompleteMediaUpload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServiceServer).CompleteMediaUpload(ctx, req.(*CompleteMediaUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaService_GetMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMediaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServiceServer).GetMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaService_GetMedia_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServiceServer).GetMedia(ctx, req.(*GetMediaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaService_StreamMediaContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamMediaContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServiceServer).StreamMediaContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaService_StreamMediaContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServiceServer).StreamMediaContent(ctx, req.(*StreamMediaContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaService_DeleteMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMediaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServiceServer).DeleteMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaService_DeleteMedia_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServiceServer).DeleteMedia(ctx, req.(*DeleteMediaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaService_ListUserMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserMediaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServiceServer).ListUserMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaService_ListUserMedia_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServiceServer).ListUserMedia(ctx, req.(*ListUserMediaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaService_ListSystemMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSystemMediaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServiceServer).ListSystemMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaService_ListSystemMedia_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServiceServer).ListSystemMedia(ctx, req.(*ListSystemMediaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaService_SubscribeToUserMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeToUserMediaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServiceServer).SubscribeToUserMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaService_SubscribeToUserMedia_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServiceServer).SubscribeToUserMedia(ctx, req.(*SubscribeToUserMediaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaService_SubscribeToSystemMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeToSystemMediaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServiceServer).SubscribeToSystemMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaService_SubscribeToSystemMedia_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServiceServer).SubscribeToSystemMedia(ctx, req.(*SubscribeToSystemMediaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaService_BroadcastSystemMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BroadcastSystemMediaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServiceServer).BroadcastSystemMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaService_BroadcastSystemMedia_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServiceServer).BroadcastSystemMedia(ctx, req.(*BroadcastSystemMediaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MediaService_ServiceDesc is the grpc.ServiceDesc for MediaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MediaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "media.v1.MediaService",
	HandlerType: (*MediaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadLightMedia",
			Handler:    _MediaService_UploadLightMedia_Handler,
		},
		{
			MethodName: "StartHeavyMediaUpload",
			Handler:    _MediaService_StartHeavyMediaUpload_Handler,
		},
		{
			MethodName: "StreamMediaChunk",
			Handler:    _MediaService_StreamMediaChunk_Handler,
		},
		{
			MethodName: "CompleteMediaUpload",
			Handler:    _MediaService_CompleteMediaUpload_Handler,
		},
		{
			MethodName: "GetMedia",
			Handler:    _MediaService_GetMedia_Handler,
		},
		{
			MethodName: "StreamMediaContent",
			Handler:    _MediaService_StreamMediaContent_Handler,
		},
		{
			MethodName: "DeleteMedia",
			Handler:    _MediaService_DeleteMedia_Handler,
		},
		{
			MethodName: "ListUserMedia",
			Handler:    _MediaService_ListUserMedia_Handler,
		},
		{
			MethodName: "ListSystemMedia",
			Handler:    _MediaService_ListSystemMedia_Handler,
		},
		{
			MethodName: "SubscribeToUserMedia",
			Handler:    _MediaService_SubscribeToUserMedia_Handler,
		},
		{
			MethodName: "SubscribeToSystemMedia",
			Handler:    _MediaService_SubscribeToSystemMedia_Handler,
		},
		{
			MethodName: "BroadcastSystemMedia",
			Handler:    _MediaService_BroadcastSystemMedia_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "media/v1/media.proto",
}
