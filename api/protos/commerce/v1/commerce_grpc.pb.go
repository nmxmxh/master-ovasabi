// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: commerce/v1/commerce.proto

package commercepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CommerceService_CreateQuote_FullMethodName             = "/commerce.v1.CommerceService/CreateQuote"
	CommerceService_GetQuote_FullMethodName                = "/commerce.v1.CommerceService/GetQuote"
	CommerceService_ListQuotes_FullMethodName              = "/commerce.v1.CommerceService/ListQuotes"
	CommerceService_CreateOrder_FullMethodName             = "/commerce.v1.CommerceService/CreateOrder"
	CommerceService_GetOrder_FullMethodName                = "/commerce.v1.CommerceService/GetOrder"
	CommerceService_ListOrders_FullMethodName              = "/commerce.v1.CommerceService/ListOrders"
	CommerceService_UpdateOrderStatus_FullMethodName       = "/commerce.v1.CommerceService/UpdateOrderStatus"
	CommerceService_InitiatePayment_FullMethodName         = "/commerce.v1.CommerceService/InitiatePayment"
	CommerceService_ConfirmPayment_FullMethodName          = "/commerce.v1.CommerceService/ConfirmPayment"
	CommerceService_RefundPayment_FullMethodName           = "/commerce.v1.CommerceService/RefundPayment"
	CommerceService_GetTransaction_FullMethodName          = "/commerce.v1.CommerceService/GetTransaction"
	CommerceService_ListTransactions_FullMethodName        = "/commerce.v1.CommerceService/ListTransactions"
	CommerceService_GetBalance_FullMethodName              = "/commerce.v1.CommerceService/GetBalance"
	CommerceService_ListBalances_FullMethodName            = "/commerce.v1.CommerceService/ListBalances"
	CommerceService_ListEvents_FullMethodName              = "/commerce.v1.CommerceService/ListEvents"
	CommerceService_CreateInvestmentAccount_FullMethodName = "/commerce.v1.CommerceService/CreateInvestmentAccount"
	CommerceService_GetInvestmentAccount_FullMethodName    = "/commerce.v1.CommerceService/GetInvestmentAccount"
	CommerceService_PlaceInvestmentOrder_FullMethodName    = "/commerce.v1.CommerceService/PlaceInvestmentOrder"
	CommerceService_GetPortfolio_FullMethodName            = "/commerce.v1.CommerceService/GetPortfolio"
	CommerceService_ListAssets_FullMethodName              = "/commerce.v1.CommerceService/ListAssets"
	CommerceService_ListPortfolios_FullMethodName          = "/commerce.v1.CommerceService/ListPortfolios"
	CommerceService_CreateBankAccount_FullMethodName       = "/commerce.v1.CommerceService/CreateBankAccount"
	CommerceService_InitiateBankTransfer_FullMethodName    = "/commerce.v1.CommerceService/InitiateBankTransfer"
	CommerceService_GetBankStatement_FullMethodName        = "/commerce.v1.CommerceService/GetBankStatement"
	CommerceService_CreateListing_FullMethodName           = "/commerce.v1.CommerceService/CreateListing"
	CommerceService_PlaceMarketplaceOrder_FullMethodName   = "/commerce.v1.CommerceService/PlaceMarketplaceOrder"
	CommerceService_MakeOffer_FullMethodName               = "/commerce.v1.CommerceService/MakeOffer"
	CommerceService_ListListings_FullMethodName            = "/commerce.v1.CommerceService/ListListings"
	CommerceService_PlaceExchangeOrder_FullMethodName      = "/commerce.v1.CommerceService/PlaceExchangeOrder"
	CommerceService_GetExchangeRate_FullMethodName         = "/commerce.v1.CommerceService/GetExchangeRate"
	CommerceService_ListExchangePairs_FullMethodName       = "/commerce.v1.CommerceService/ListExchangePairs"
	CommerceService_CreateExchangePair_FullMethodName      = "/commerce.v1.CommerceService/CreateExchangePair"
	CommerceService_CreateExchangeRate_FullMethodName      = "/commerce.v1.CommerceService/CreateExchangeRate"
)

// CommerceServiceClient is the client API for CommerceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommerceServiceClient interface {
	// Quotes
	CreateQuote(ctx context.Context, in *CreateQuoteRequest, opts ...grpc.CallOption) (*CreateQuoteResponse, error)
	GetQuote(ctx context.Context, in *GetQuoteRequest, opts ...grpc.CallOption) (*GetQuoteResponse, error)
	ListQuotes(ctx context.Context, in *ListQuotesRequest, opts ...grpc.CallOption) (*ListQuotesResponse, error)
	// Orders
	CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderResponse, error)
	GetOrder(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (*GetOrderResponse, error)
	ListOrders(ctx context.Context, in *ListOrdersRequest, opts ...grpc.CallOption) (*ListOrdersResponse, error)
	UpdateOrderStatus(ctx context.Context, in *UpdateOrderStatusRequest, opts ...grpc.CallOption) (*UpdateOrderStatusResponse, error)
	// Payments
	InitiatePayment(ctx context.Context, in *InitiatePaymentRequest, opts ...grpc.CallOption) (*InitiatePaymentResponse, error)
	ConfirmPayment(ctx context.Context, in *ConfirmPaymentRequest, opts ...grpc.CallOption) (*ConfirmPaymentResponse, error)
	RefundPayment(ctx context.Context, in *RefundPaymentRequest, opts ...grpc.CallOption) (*RefundPaymentResponse, error)
	// Transactions
	GetTransaction(ctx context.Context, in *GetTransactionRequest, opts ...grpc.CallOption) (*GetTransactionResponse, error)
	ListTransactions(ctx context.Context, in *ListTransactionsRequest, opts ...grpc.CallOption) (*ListTransactionsResponse, error)
	// Balances
	GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetBalanceResponse, error)
	ListBalances(ctx context.Context, in *ListBalancesRequest, opts ...grpc.CallOption) (*ListBalancesResponse, error)
	// Events (for analytics/audit)
	ListEvents(ctx context.Context, in *ListEventsRequest, opts ...grpc.CallOption) (*ListEventsResponse, error)
	// Investment
	CreateInvestmentAccount(ctx context.Context, in *CreateInvestmentAccountRequest, opts ...grpc.CallOption) (*CreateInvestmentAccountResponse, error)
	GetInvestmentAccount(ctx context.Context, in *GetInvestmentAccountRequest, opts ...grpc.CallOption) (*GetInvestmentAccountResponse, error)
	PlaceInvestmentOrder(ctx context.Context, in *PlaceInvestmentOrderRequest, opts ...grpc.CallOption) (*PlaceInvestmentOrderResponse, error)
	GetPortfolio(ctx context.Context, in *GetPortfolioRequest, opts ...grpc.CallOption) (*GetPortfolioResponse, error)
	ListAssets(ctx context.Context, in *ListAssetsRequest, opts ...grpc.CallOption) (*ListAssetsResponse, error)
	ListPortfolios(ctx context.Context, in *ListPortfoliosRequest, opts ...grpc.CallOption) (*ListPortfoliosResponse, error)
	// Banking
	CreateBankAccount(ctx context.Context, in *CreateBankAccountRequest, opts ...grpc.CallOption) (*CreateBankAccountResponse, error)
	InitiateBankTransfer(ctx context.Context, in *InitiateBankTransferRequest, opts ...grpc.CallOption) (*InitiateBankTransferResponse, error)
	GetBankStatement(ctx context.Context, in *GetBankStatementRequest, opts ...grpc.CallOption) (*GetBankStatementResponse, error)
	// Marketplace
	CreateListing(ctx context.Context, in *CreateListingRequest, opts ...grpc.CallOption) (*CreateListingResponse, error)
	PlaceMarketplaceOrder(ctx context.Context, in *PlaceMarketplaceOrderRequest, opts ...grpc.CallOption) (*PlaceMarketplaceOrderResponse, error)
	MakeOffer(ctx context.Context, in *MakeOfferRequest, opts ...grpc.CallOption) (*MakeOfferResponse, error)
	ListListings(ctx context.Context, in *ListListingsRequest, opts ...grpc.CallOption) (*ListListingsResponse, error)
	// Exchange
	PlaceExchangeOrder(ctx context.Context, in *PlaceExchangeOrderRequest, opts ...grpc.CallOption) (*PlaceExchangeOrderResponse, error)
	GetExchangeRate(ctx context.Context, in *GetExchangeRateRequest, opts ...grpc.CallOption) (*GetExchangeRateResponse, error)
	ListExchangePairs(ctx context.Context, in *ListExchangePairsRequest, opts ...grpc.CallOption) (*ListExchangePairsResponse, error)
	CreateExchangePair(ctx context.Context, in *CreateExchangePairRequest, opts ...grpc.CallOption) (*CreateExchangePairResponse, error)
	CreateExchangeRate(ctx context.Context, in *CreateExchangeRateRequest, opts ...grpc.CallOption) (*CreateExchangeRateResponse, error)
}

type commerceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCommerceServiceClient(cc grpc.ClientConnInterface) CommerceServiceClient {
	return &commerceServiceClient{cc}
}

func (c *commerceServiceClient) CreateQuote(ctx context.Context, in *CreateQuoteRequest, opts ...grpc.CallOption) (*CreateQuoteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateQuoteResponse)
	err := c.cc.Invoke(ctx, CommerceService_CreateQuote_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commerceServiceClient) GetQuote(ctx context.Context, in *GetQuoteRequest, opts ...grpc.CallOption) (*GetQuoteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetQuoteResponse)
	err := c.cc.Invoke(ctx, CommerceService_GetQuote_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commerceServiceClient) ListQuotes(ctx context.Context, in *ListQuotesRequest, opts ...grpc.CallOption) (*ListQuotesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListQuotesResponse)
	err := c.cc.Invoke(ctx, CommerceService_ListQuotes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commerceServiceClient) CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateOrderResponse)
	err := c.cc.Invoke(ctx, CommerceService_CreateOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commerceServiceClient) GetOrder(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (*GetOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOrderResponse)
	err := c.cc.Invoke(ctx, CommerceService_GetOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commerceServiceClient) ListOrders(ctx context.Context, in *ListOrdersRequest, opts ...grpc.CallOption) (*ListOrdersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListOrdersResponse)
	err := c.cc.Invoke(ctx, CommerceService_ListOrders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commerceServiceClient) UpdateOrderStatus(ctx context.Context, in *UpdateOrderStatusRequest, opts ...grpc.CallOption) (*UpdateOrderStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateOrderStatusResponse)
	err := c.cc.Invoke(ctx, CommerceService_UpdateOrderStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commerceServiceClient) InitiatePayment(ctx context.Context, in *InitiatePaymentRequest, opts ...grpc.CallOption) (*InitiatePaymentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InitiatePaymentResponse)
	err := c.cc.Invoke(ctx, CommerceService_InitiatePayment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commerceServiceClient) ConfirmPayment(ctx context.Context, in *ConfirmPaymentRequest, opts ...grpc.CallOption) (*ConfirmPaymentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConfirmPaymentResponse)
	err := c.cc.Invoke(ctx, CommerceService_ConfirmPayment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commerceServiceClient) RefundPayment(ctx context.Context, in *RefundPaymentRequest, opts ...grpc.CallOption) (*RefundPaymentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RefundPaymentResponse)
	err := c.cc.Invoke(ctx, CommerceService_RefundPayment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commerceServiceClient) GetTransaction(ctx context.Context, in *GetTransactionRequest, opts ...grpc.CallOption) (*GetTransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTransactionResponse)
	err := c.cc.Invoke(ctx, CommerceService_GetTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commerceServiceClient) ListTransactions(ctx context.Context, in *ListTransactionsRequest, opts ...grpc.CallOption) (*ListTransactionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTransactionsResponse)
	err := c.cc.Invoke(ctx, CommerceService_ListTransactions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commerceServiceClient) GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetBalanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBalanceResponse)
	err := c.cc.Invoke(ctx, CommerceService_GetBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commerceServiceClient) ListBalances(ctx context.Context, in *ListBalancesRequest, opts ...grpc.CallOption) (*ListBalancesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBalancesResponse)
	err := c.cc.Invoke(ctx, CommerceService_ListBalances_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commerceServiceClient) ListEvents(ctx context.Context, in *ListEventsRequest, opts ...grpc.CallOption) (*ListEventsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListEventsResponse)
	err := c.cc.Invoke(ctx, CommerceService_ListEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commerceServiceClient) CreateInvestmentAccount(ctx context.Context, in *CreateInvestmentAccountRequest, opts ...grpc.CallOption) (*CreateInvestmentAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateInvestmentAccountResponse)
	err := c.cc.Invoke(ctx, CommerceService_CreateInvestmentAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commerceServiceClient) GetInvestmentAccount(ctx context.Context, in *GetInvestmentAccountRequest, opts ...grpc.CallOption) (*GetInvestmentAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInvestmentAccountResponse)
	err := c.cc.Invoke(ctx, CommerceService_GetInvestmentAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commerceServiceClient) PlaceInvestmentOrder(ctx context.Context, in *PlaceInvestmentOrderRequest, opts ...grpc.CallOption) (*PlaceInvestmentOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PlaceInvestmentOrderResponse)
	err := c.cc.Invoke(ctx, CommerceService_PlaceInvestmentOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commerceServiceClient) GetPortfolio(ctx context.Context, in *GetPortfolioRequest, opts ...grpc.CallOption) (*GetPortfolioResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPortfolioResponse)
	err := c.cc.Invoke(ctx, CommerceService_GetPortfolio_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commerceServiceClient) ListAssets(ctx context.Context, in *ListAssetsRequest, opts ...grpc.CallOption) (*ListAssetsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAssetsResponse)
	err := c.cc.Invoke(ctx, CommerceService_ListAssets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commerceServiceClient) ListPortfolios(ctx context.Context, in *ListPortfoliosRequest, opts ...grpc.CallOption) (*ListPortfoliosResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPortfoliosResponse)
	err := c.cc.Invoke(ctx, CommerceService_ListPortfolios_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commerceServiceClient) CreateBankAccount(ctx context.Context, in *CreateBankAccountRequest, opts ...grpc.CallOption) (*CreateBankAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBankAccountResponse)
	err := c.cc.Invoke(ctx, CommerceService_CreateBankAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commerceServiceClient) InitiateBankTransfer(ctx context.Context, in *InitiateBankTransferRequest, opts ...grpc.CallOption) (*InitiateBankTransferResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InitiateBankTransferResponse)
	err := c.cc.Invoke(ctx, CommerceService_InitiateBankTransfer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commerceServiceClient) GetBankStatement(ctx context.Context, in *GetBankStatementRequest, opts ...grpc.CallOption) (*GetBankStatementResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBankStatementResponse)
	err := c.cc.Invoke(ctx, CommerceService_GetBankStatement_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commerceServiceClient) CreateListing(ctx context.Context, in *CreateListingRequest, opts ...grpc.CallOption) (*CreateListingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateListingResponse)
	err := c.cc.Invoke(ctx, CommerceService_CreateListing_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commerceServiceClient) PlaceMarketplaceOrder(ctx context.Context, in *PlaceMarketplaceOrderRequest, opts ...grpc.CallOption) (*PlaceMarketplaceOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PlaceMarketplaceOrderResponse)
	err := c.cc.Invoke(ctx, CommerceService_PlaceMarketplaceOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commerceServiceClient) MakeOffer(ctx context.Context, in *MakeOfferRequest, opts ...grpc.CallOption) (*MakeOfferResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MakeOfferResponse)
	err := c.cc.Invoke(ctx, CommerceService_MakeOffer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commerceServiceClient) ListListings(ctx context.Context, in *ListListingsRequest, opts ...grpc.CallOption) (*ListListingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListListingsResponse)
	err := c.cc.Invoke(ctx, CommerceService_ListListings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commerceServiceClient) PlaceExchangeOrder(ctx context.Context, in *PlaceExchangeOrderRequest, opts ...grpc.CallOption) (*PlaceExchangeOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PlaceExchangeOrderResponse)
	err := c.cc.Invoke(ctx, CommerceService_PlaceExchangeOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commerceServiceClient) GetExchangeRate(ctx context.Context, in *GetExchangeRateRequest, opts ...grpc.CallOption) (*GetExchangeRateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetExchangeRateResponse)
	err := c.cc.Invoke(ctx, CommerceService_GetExchangeRate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commerceServiceClient) ListExchangePairs(ctx context.Context, in *ListExchangePairsRequest, opts ...grpc.CallOption) (*ListExchangePairsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListExchangePairsResponse)
	err := c.cc.Invoke(ctx, CommerceService_ListExchangePairs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commerceServiceClient) CreateExchangePair(ctx context.Context, in *CreateExchangePairRequest, opts ...grpc.CallOption) (*CreateExchangePairResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateExchangePairResponse)
	err := c.cc.Invoke(ctx, CommerceService_CreateExchangePair_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commerceServiceClient) CreateExchangeRate(ctx context.Context, in *CreateExchangeRateRequest, opts ...grpc.CallOption) (*CreateExchangeRateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateExchangeRateResponse)
	err := c.cc.Invoke(ctx, CommerceService_CreateExchangeRate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommerceServiceServer is the server API for CommerceService service.
// All implementations must embed UnimplementedCommerceServiceServer
// for forward compatibility.
type CommerceServiceServer interface {
	// Quotes
	CreateQuote(context.Context, *CreateQuoteRequest) (*CreateQuoteResponse, error)
	GetQuote(context.Context, *GetQuoteRequest) (*GetQuoteResponse, error)
	ListQuotes(context.Context, *ListQuotesRequest) (*ListQuotesResponse, error)
	// Orders
	CreateOrder(context.Context, *CreateOrderRequest) (*CreateOrderResponse, error)
	GetOrder(context.Context, *GetOrderRequest) (*GetOrderResponse, error)
	ListOrders(context.Context, *ListOrdersRequest) (*ListOrdersResponse, error)
	UpdateOrderStatus(context.Context, *UpdateOrderStatusRequest) (*UpdateOrderStatusResponse, error)
	// Payments
	InitiatePayment(context.Context, *InitiatePaymentRequest) (*InitiatePaymentResponse, error)
	ConfirmPayment(context.Context, *ConfirmPaymentRequest) (*ConfirmPaymentResponse, error)
	RefundPayment(context.Context, *RefundPaymentRequest) (*RefundPaymentResponse, error)
	// Transactions
	GetTransaction(context.Context, *GetTransactionRequest) (*GetTransactionResponse, error)
	ListTransactions(context.Context, *ListTransactionsRequest) (*ListTransactionsResponse, error)
	// Balances
	GetBalance(context.Context, *GetBalanceRequest) (*GetBalanceResponse, error)
	ListBalances(context.Context, *ListBalancesRequest) (*ListBalancesResponse, error)
	// Events (for analytics/audit)
	ListEvents(context.Context, *ListEventsRequest) (*ListEventsResponse, error)
	// Investment
	CreateInvestmentAccount(context.Context, *CreateInvestmentAccountRequest) (*CreateInvestmentAccountResponse, error)
	GetInvestmentAccount(context.Context, *GetInvestmentAccountRequest) (*GetInvestmentAccountResponse, error)
	PlaceInvestmentOrder(context.Context, *PlaceInvestmentOrderRequest) (*PlaceInvestmentOrderResponse, error)
	GetPortfolio(context.Context, *GetPortfolioRequest) (*GetPortfolioResponse, error)
	ListAssets(context.Context, *ListAssetsRequest) (*ListAssetsResponse, error)
	ListPortfolios(context.Context, *ListPortfoliosRequest) (*ListPortfoliosResponse, error)
	// Banking
	CreateBankAccount(context.Context, *CreateBankAccountRequest) (*CreateBankAccountResponse, error)
	InitiateBankTransfer(context.Context, *InitiateBankTransferRequest) (*InitiateBankTransferResponse, error)
	GetBankStatement(context.Context, *GetBankStatementRequest) (*GetBankStatementResponse, error)
	// Marketplace
	CreateListing(context.Context, *CreateListingRequest) (*CreateListingResponse, error)
	PlaceMarketplaceOrder(context.Context, *PlaceMarketplaceOrderRequest) (*PlaceMarketplaceOrderResponse, error)
	MakeOffer(context.Context, *MakeOfferRequest) (*MakeOfferResponse, error)
	ListListings(context.Context, *ListListingsRequest) (*ListListingsResponse, error)
	// Exchange
	PlaceExchangeOrder(context.Context, *PlaceExchangeOrderRequest) (*PlaceExchangeOrderResponse, error)
	GetExchangeRate(context.Context, *GetExchangeRateRequest) (*GetExchangeRateResponse, error)
	ListExchangePairs(context.Context, *ListExchangePairsRequest) (*ListExchangePairsResponse, error)
	CreateExchangePair(context.Context, *CreateExchangePairRequest) (*CreateExchangePairResponse, error)
	CreateExchangeRate(context.Context, *CreateExchangeRateRequest) (*CreateExchangeRateResponse, error)
	mustEmbedUnimplementedCommerceServiceServer()
}

// UnimplementedCommerceServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCommerceServiceServer struct{}

func (UnimplementedCommerceServiceServer) CreateQuote(context.Context, *CreateQuoteRequest) (*CreateQuoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQuote not implemented")
}
func (UnimplementedCommerceServiceServer) GetQuote(context.Context, *GetQuoteRequest) (*GetQuoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuote not implemented")
}
func (UnimplementedCommerceServiceServer) ListQuotes(context.Context, *ListQuotesRequest) (*ListQuotesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListQuotes not implemented")
}
func (UnimplementedCommerceServiceServer) CreateOrder(context.Context, *CreateOrderRequest) (*CreateOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (UnimplementedCommerceServiceServer) GetOrder(context.Context, *GetOrderRequest) (*GetOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrder not implemented")
}
func (UnimplementedCommerceServiceServer) ListOrders(context.Context, *ListOrdersRequest) (*ListOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrders not implemented")
}
func (UnimplementedCommerceServiceServer) UpdateOrderStatus(context.Context, *UpdateOrderStatusRequest) (*UpdateOrderStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrderStatus not implemented")
}
func (UnimplementedCommerceServiceServer) InitiatePayment(context.Context, *InitiatePaymentRequest) (*InitiatePaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiatePayment not implemented")
}
func (UnimplementedCommerceServiceServer) ConfirmPayment(context.Context, *ConfirmPaymentRequest) (*ConfirmPaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmPayment not implemented")
}
func (UnimplementedCommerceServiceServer) RefundPayment(context.Context, *RefundPaymentRequest) (*RefundPaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefundPayment not implemented")
}
func (UnimplementedCommerceServiceServer) GetTransaction(context.Context, *GetTransactionRequest) (*GetTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransaction not implemented")
}
func (UnimplementedCommerceServiceServer) ListTransactions(context.Context, *ListTransactionsRequest) (*ListTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTransactions not implemented")
}
func (UnimplementedCommerceServiceServer) GetBalance(context.Context, *GetBalanceRequest) (*GetBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}
func (UnimplementedCommerceServiceServer) ListBalances(context.Context, *ListBalancesRequest) (*ListBalancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBalances not implemented")
}
func (UnimplementedCommerceServiceServer) ListEvents(context.Context, *ListEventsRequest) (*ListEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEvents not implemented")
}
func (UnimplementedCommerceServiceServer) CreateInvestmentAccount(context.Context, *CreateInvestmentAccountRequest) (*CreateInvestmentAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInvestmentAccount not implemented")
}
func (UnimplementedCommerceServiceServer) GetInvestmentAccount(context.Context, *GetInvestmentAccountRequest) (*GetInvestmentAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvestmentAccount not implemented")
}
func (UnimplementedCommerceServiceServer) PlaceInvestmentOrder(context.Context, *PlaceInvestmentOrderRequest) (*PlaceInvestmentOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaceInvestmentOrder not implemented")
}
func (UnimplementedCommerceServiceServer) GetPortfolio(context.Context, *GetPortfolioRequest) (*GetPortfolioResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPortfolio not implemented")
}
func (UnimplementedCommerceServiceServer) ListAssets(context.Context, *ListAssetsRequest) (*ListAssetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAssets not implemented")
}
func (UnimplementedCommerceServiceServer) ListPortfolios(context.Context, *ListPortfoliosRequest) (*ListPortfoliosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPortfolios not implemented")
}
func (UnimplementedCommerceServiceServer) CreateBankAccount(context.Context, *CreateBankAccountRequest) (*CreateBankAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBankAccount not implemented")
}
func (UnimplementedCommerceServiceServer) InitiateBankTransfer(context.Context, *InitiateBankTransferRequest) (*InitiateBankTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiateBankTransfer not implemented")
}
func (UnimplementedCommerceServiceServer) GetBankStatement(context.Context, *GetBankStatementRequest) (*GetBankStatementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBankStatement not implemented")
}
func (UnimplementedCommerceServiceServer) CreateListing(context.Context, *CreateListingRequest) (*CreateListingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateListing not implemented")
}
func (UnimplementedCommerceServiceServer) PlaceMarketplaceOrder(context.Context, *PlaceMarketplaceOrderRequest) (*PlaceMarketplaceOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaceMarketplaceOrder not implemented")
}
func (UnimplementedCommerceServiceServer) MakeOffer(context.Context, *MakeOfferRequest) (*MakeOfferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeOffer not implemented")
}
func (UnimplementedCommerceServiceServer) ListListings(context.Context, *ListListingsRequest) (*ListListingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListListings not implemented")
}
func (UnimplementedCommerceServiceServer) PlaceExchangeOrder(context.Context, *PlaceExchangeOrderRequest) (*PlaceExchangeOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaceExchangeOrder not implemented")
}
func (UnimplementedCommerceServiceServer) GetExchangeRate(context.Context, *GetExchangeRateRequest) (*GetExchangeRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExchangeRate not implemented")
}
func (UnimplementedCommerceServiceServer) ListExchangePairs(context.Context, *ListExchangePairsRequest) (*ListExchangePairsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListExchangePairs not implemented")
}
func (UnimplementedCommerceServiceServer) CreateExchangePair(context.Context, *CreateExchangePairRequest) (*CreateExchangePairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExchangePair not implemented")
}
func (UnimplementedCommerceServiceServer) CreateExchangeRate(context.Context, *CreateExchangeRateRequest) (*CreateExchangeRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExchangeRate not implemented")
}
func (UnimplementedCommerceServiceServer) mustEmbedUnimplementedCommerceServiceServer() {}
func (UnimplementedCommerceServiceServer) testEmbeddedByValue()                         {}

// UnsafeCommerceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommerceServiceServer will
// result in compilation errors.
type UnsafeCommerceServiceServer interface {
	mustEmbedUnimplementedCommerceServiceServer()
}

func RegisterCommerceServiceServer(s grpc.ServiceRegistrar, srv CommerceServiceServer) {
	// If the following call pancis, it indicates UnimplementedCommerceServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CommerceService_ServiceDesc, srv)
}

func _CommerceService_CreateQuote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQuoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommerceServiceServer).CreateQuote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommerceService_CreateQuote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommerceServiceServer).CreateQuote(ctx, req.(*CreateQuoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommerceService_GetQuote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommerceServiceServer).GetQuote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommerceService_GetQuote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommerceServiceServer).GetQuote(ctx, req.(*GetQuoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommerceService_ListQuotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListQuotesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommerceServiceServer).ListQuotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommerceService_ListQuotes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommerceServiceServer).ListQuotes(ctx, req.(*ListQuotesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommerceService_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommerceServiceServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommerceService_CreateOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommerceServiceServer).CreateOrder(ctx, req.(*CreateOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommerceService_GetOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommerceServiceServer).GetOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommerceService_GetOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommerceServiceServer).GetOrder(ctx, req.(*GetOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommerceService_ListOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommerceServiceServer).ListOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommerceService_ListOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommerceServiceServer).ListOrders(ctx, req.(*ListOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommerceService_UpdateOrderStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrderStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommerceServiceServer).UpdateOrderStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommerceService_UpdateOrderStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommerceServiceServer).UpdateOrderStatus(ctx, req.(*UpdateOrderStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommerceService_InitiatePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitiatePaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommerceServiceServer).InitiatePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommerceService_InitiatePayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommerceServiceServer).InitiatePayment(ctx, req.(*InitiatePaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommerceService_ConfirmPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommerceServiceServer).ConfirmPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommerceService_ConfirmPayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommerceServiceServer).ConfirmPayment(ctx, req.(*ConfirmPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommerceService_RefundPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefundPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommerceServiceServer).RefundPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommerceService_RefundPayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommerceServiceServer).RefundPayment(ctx, req.(*RefundPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommerceService_GetTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommerceServiceServer).GetTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommerceService_GetTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommerceServiceServer).GetTransaction(ctx, req.(*GetTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommerceService_ListTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommerceServiceServer).ListTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommerceService_ListTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommerceServiceServer).ListTransactions(ctx, req.(*ListTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommerceService_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommerceServiceServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommerceService_GetBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommerceServiceServer).GetBalance(ctx, req.(*GetBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommerceService_ListBalances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBalancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommerceServiceServer).ListBalances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommerceService_ListBalances_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommerceServiceServer).ListBalances(ctx, req.(*ListBalancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommerceService_ListEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommerceServiceServer).ListEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommerceService_ListEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommerceServiceServer).ListEvents(ctx, req.(*ListEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommerceService_CreateInvestmentAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInvestmentAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommerceServiceServer).CreateInvestmentAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommerceService_CreateInvestmentAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommerceServiceServer).CreateInvestmentAccount(ctx, req.(*CreateInvestmentAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommerceService_GetInvestmentAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvestmentAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommerceServiceServer).GetInvestmentAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommerceService_GetInvestmentAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommerceServiceServer).GetInvestmentAccount(ctx, req.(*GetInvestmentAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommerceService_PlaceInvestmentOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaceInvestmentOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommerceServiceServer).PlaceInvestmentOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommerceService_PlaceInvestmentOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommerceServiceServer).PlaceInvestmentOrder(ctx, req.(*PlaceInvestmentOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommerceService_GetPortfolio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPortfolioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommerceServiceServer).GetPortfolio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommerceService_GetPortfolio_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommerceServiceServer).GetPortfolio(ctx, req.(*GetPortfolioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommerceService_ListAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAssetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommerceServiceServer).ListAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommerceService_ListAssets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommerceServiceServer).ListAssets(ctx, req.(*ListAssetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommerceService_ListPortfolios_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPortfoliosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommerceServiceServer).ListPortfolios(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommerceService_ListPortfolios_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommerceServiceServer).ListPortfolios(ctx, req.(*ListPortfoliosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommerceService_CreateBankAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBankAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommerceServiceServer).CreateBankAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommerceService_CreateBankAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommerceServiceServer).CreateBankAccount(ctx, req.(*CreateBankAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommerceService_InitiateBankTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitiateBankTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommerceServiceServer).InitiateBankTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommerceService_InitiateBankTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommerceServiceServer).InitiateBankTransfer(ctx, req.(*InitiateBankTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommerceService_GetBankStatement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBankStatementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommerceServiceServer).GetBankStatement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommerceService_GetBankStatement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommerceServiceServer).GetBankStatement(ctx, req.(*GetBankStatementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommerceService_CreateListing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateListingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommerceServiceServer).CreateListing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommerceService_CreateListing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommerceServiceServer).CreateListing(ctx, req.(*CreateListingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommerceService_PlaceMarketplaceOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaceMarketplaceOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommerceServiceServer).PlaceMarketplaceOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommerceService_PlaceMarketplaceOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommerceServiceServer).PlaceMarketplaceOrder(ctx, req.(*PlaceMarketplaceOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommerceService_MakeOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakeOfferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommerceServiceServer).MakeOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommerceService_MakeOffer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommerceServiceServer).MakeOffer(ctx, req.(*MakeOfferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommerceService_ListListings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListListingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommerceServiceServer).ListListings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommerceService_ListListings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommerceServiceServer).ListListings(ctx, req.(*ListListingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommerceService_PlaceExchangeOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaceExchangeOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommerceServiceServer).PlaceExchangeOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommerceService_PlaceExchangeOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommerceServiceServer).PlaceExchangeOrder(ctx, req.(*PlaceExchangeOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommerceService_GetExchangeRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExchangeRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommerceServiceServer).GetExchangeRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommerceService_GetExchangeRate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommerceServiceServer).GetExchangeRate(ctx, req.(*GetExchangeRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommerceService_ListExchangePairs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListExchangePairsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommerceServiceServer).ListExchangePairs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommerceService_ListExchangePairs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommerceServiceServer).ListExchangePairs(ctx, req.(*ListExchangePairsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommerceService_CreateExchangePair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateExchangePairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommerceServiceServer).CreateExchangePair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommerceService_CreateExchangePair_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommerceServiceServer).CreateExchangePair(ctx, req.(*CreateExchangePairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommerceService_CreateExchangeRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateExchangeRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommerceServiceServer).CreateExchangeRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommerceService_CreateExchangeRate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommerceServiceServer).CreateExchangeRate(ctx, req.(*CreateExchangeRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CommerceService_ServiceDesc is the grpc.ServiceDesc for CommerceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommerceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "commerce.v1.CommerceService",
	HandlerType: (*CommerceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateQuote",
			Handler:    _CommerceService_CreateQuote_Handler,
		},
		{
			MethodName: "GetQuote",
			Handler:    _CommerceService_GetQuote_Handler,
		},
		{
			MethodName: "ListQuotes",
			Handler:    _CommerceService_ListQuotes_Handler,
		},
		{
			MethodName: "CreateOrder",
			Handler:    _CommerceService_CreateOrder_Handler,
		},
		{
			MethodName: "GetOrder",
			Handler:    _CommerceService_GetOrder_Handler,
		},
		{
			MethodName: "ListOrders",
			Handler:    _CommerceService_ListOrders_Handler,
		},
		{
			MethodName: "UpdateOrderStatus",
			Handler:    _CommerceService_UpdateOrderStatus_Handler,
		},
		{
			MethodName: "InitiatePayment",
			Handler:    _CommerceService_InitiatePayment_Handler,
		},
		{
			MethodName: "ConfirmPayment",
			Handler:    _CommerceService_ConfirmPayment_Handler,
		},
		{
			MethodName: "RefundPayment",
			Handler:    _CommerceService_RefundPayment_Handler,
		},
		{
			MethodName: "GetTransaction",
			Handler:    _CommerceService_GetTransaction_Handler,
		},
		{
			MethodName: "ListTransactions",
			Handler:    _CommerceService_ListTransactions_Handler,
		},
		{
			MethodName: "GetBalance",
			Handler:    _CommerceService_GetBalance_Handler,
		},
		{
			MethodName: "ListBalances",
			Handler:    _CommerceService_ListBalances_Handler,
		},
		{
			MethodName: "ListEvents",
			Handler:    _CommerceService_ListEvents_Handler,
		},
		{
			MethodName: "CreateInvestmentAccount",
			Handler:    _CommerceService_CreateInvestmentAccount_Handler,
		},
		{
			MethodName: "GetInvestmentAccount",
			Handler:    _CommerceService_GetInvestmentAccount_Handler,
		},
		{
			MethodName: "PlaceInvestmentOrder",
			Handler:    _CommerceService_PlaceInvestmentOrder_Handler,
		},
		{
			MethodName: "GetPortfolio",
			Handler:    _CommerceService_GetPortfolio_Handler,
		},
		{
			MethodName: "ListAssets",
			Handler:    _CommerceService_ListAssets_Handler,
		},
		{
			MethodName: "ListPortfolios",
			Handler:    _CommerceService_ListPortfolios_Handler,
		},
		{
			MethodName: "CreateBankAccount",
			Handler:    _CommerceService_CreateBankAccount_Handler,
		},
		{
			MethodName: "InitiateBankTransfer",
			Handler:    _CommerceService_InitiateBankTransfer_Handler,
		},
		{
			MethodName: "GetBankStatement",
			Handler:    _CommerceService_GetBankStatement_Handler,
		},
		{
			MethodName: "CreateListing",
			Handler:    _CommerceService_CreateListing_Handler,
		},
		{
			MethodName: "PlaceMarketplaceOrder",
			Handler:    _CommerceService_PlaceMarketplaceOrder_Handler,
		},
		{
			MethodName: "MakeOffer",
			Handler:    _CommerceService_MakeOffer_Handler,
		},
		{
			MethodName: "ListListings",
			Handler:    _CommerceService_ListListings_Handler,
		},
		{
			MethodName: "PlaceExchangeOrder",
			Handler:    _CommerceService_PlaceExchangeOrder_Handler,
		},
		{
			MethodName: "GetExchangeRate",
			Handler:    _CommerceService_GetExchangeRate_Handler,
		},
		{
			MethodName: "ListExchangePairs",
			Handler:    _CommerceService_ListExchangePairs_Handler,
		},
		{
			MethodName: "CreateExchangePair",
			Handler:    _CommerceService_CreateExchangePair_Handler,
		},
		{
			MethodName: "CreateExchangeRate",
			Handler:    _CommerceService_CreateExchangeRate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "commerce/v1/commerce.proto",
}
