syntax = "proto3";

package asset.v1;

option go_package = "master-ovasabi/api/protos/asset/v0;assetv0";

import "google/protobuf/timestamp.proto";

// Asset service handles storage and retrieval of 3D assets
service AssetService {
  // Upload a small asset (< 500KB) in a single request
  rpc UploadLightAsset(UploadLightAssetRequest) returns (UploadLightAssetResponse);

  // Start a heavy asset upload session (> 500KB)
  rpc StartHeavyAssetUpload(StartHeavyAssetUploadRequest) returns (StartHeavyAssetUploadResponse);

  // Stream chunks for a heavy asset upload
  rpc StreamAssetChunk(StreamAssetChunkRequest) returns (StreamAssetChunkResponse);

  // Complete a heavy asset upload
  rpc CompleteAssetUpload(CompleteAssetUploadRequest) returns (CompleteAssetUploadResponse);

  // Get asset metadata
  rpc GetAsset(GetAssetRequest) returns (GetAssetResponse);

  // Stream asset content
  rpc StreamAssetContent(StreamAssetContentRequest) returns (StreamAssetContentResponse);

  // Delete an asset
  rpc DeleteAsset(DeleteAssetRequest) returns (DeleteAssetResponse);

  // List user assets with pagination
  rpc ListUserAssets(ListUserAssetsRequest) returns (ListUserAssetsResponse);

  // List system assets with pagination
  rpc ListSystemAssets(ListSystemAssetsRequest) returns (ListSystemAssetsResponse);

  // Subscribe to user asset updates stream
  rpc SubscribeToUserAssets(SubscribeToUserAssetsRequest) returns (SubscribeToUserAssetsResponse);

  // Subscribe to system asset updates stream
  rpc SubscribeToSystemAssets(SubscribeToSystemAssetsRequest) returns (SubscribeToSystemAssetsResponse);

  // Broadcast a system asset to all subscribers
  rpc BroadcastSystemAsset(BroadcastSystemAssetRequest) returns (BroadcastSystemAssetResponse);
}

// Asset represents a 3D asset and its metadata
message Asset {
  // Unique identifier
  string id = 1;

  // Owner user ID
  string user_id = 2;

  // Asset type (light/heavy)
  AssetType type = 3;

  // Asset name
  string name = 4;

  // MIME type
  string mime_type = 5;

  // Size in bytes
  int64 size = 6;

  // Binary data for light assets
  bytes data = 7;

  // URL for heavy assets
  string url = 8;

  // Whether this is a system asset
  bool is_system = 9;

  // Creation timestamp
  google.protobuf.Timestamp created_at = 10;

  // Last update timestamp
  google.protobuf.Timestamp updated_at = 11;

  // Deletion timestamp (if soft deleted)
  google.protobuf.Timestamp deleted_at = 12;
}

// Asset types
enum AssetType {
  ASSET_TYPE_UNSPECIFIED = 0;
  ASSET_TYPE_LIGHT = 1;  // < 500KB, stored in DB
  ASSET_TYPE_HEAVY = 2;  // >= 500KB, stored externally
}

// Request to upload a light asset
message UploadLightAssetRequest {
  // TODO: define fields
}

// Response for uploading a light asset
message UploadLightAssetResponse {
  // TODO: define fields
}

// Request to start a heavy asset upload
message StartHeavyAssetUploadRequest {
  string user_id = 1;
  string name = 2;
  string mime_type = 3;
  int64 size = 4;
}

// Response for starting a heavy asset upload
message StartHeavyAssetUploadResponse {
  string upload_id = 1;
  int32 chunk_size = 2;
  int32 chunks_total = 3;
}

// Chunk of asset data for streaming
message AssetChunk {
  string upload_id = 1;
  bytes data = 2;
  uint32 sequence = 3;
}

// Request to stream asset chunks
message StreamAssetChunkRequest {
  // TODO: define fields
}

// Response for streaming asset chunks
message StreamAssetChunkResponse {
  // TODO: define fields
}

// Request to complete an asset upload
message CompleteAssetUploadRequest {
  // TODO: define fields
}

// Response for completing an asset upload
message CompleteAssetUploadResponse {
  // TODO: define fields
}

// Request to get an asset
message GetAssetRequest {
  string id = 1;
}

// Response for getting an asset
message GetAssetResponse {
  // TODO: define fields
}

// Request to stream asset content
message StreamAssetContentRequest {
  // TODO: define fields
}

// Response for streaming asset content
message StreamAssetContentResponse {
  // TODO: define fields
}

// Request to delete an asset
message DeleteAssetRequest {
  // TODO: define fields
}

// Response for deleting an asset
message DeleteAssetResponse {
  // TODO: define fields
}

// Request to list user assets
message ListUserAssetsRequest {
  string user_id = 1;
  int32 page_size = 2;
  string page_token = 3;
}

// Response for listing user assets
message ListUserAssetsResponse {
  repeated Asset assets = 1;
  string next_page_token = 2;
}

// Request to list system assets
message ListSystemAssetsRequest {
  int32 page_size = 1;
  string page_token = 2;
}

// Response for listing system assets
message ListSystemAssetsResponse {
  repeated Asset assets = 1;
  string next_page_token = 2;
}

// Request to subscribe to user asset updates
message SubscribeToUserAssetsRequest {
  // TODO: define fields
}

// Response for subscribing to user asset updates
message SubscribeToUserAssetsResponse {
  // TODO: define fields
}

// Request to subscribe to system asset updates
message SubscribeToSystemAssetsRequest {
  // TODO: define fields
}

// Response for subscribing to system asset updates
message SubscribeToSystemAssetsResponse {
  // TODO: define fields
}

// Request to broadcast a system asset
message BroadcastSystemAssetRequest {
  // TODO: define fields
}

// Response for broadcasting a system asset
message BroadcastSystemAssetResponse {
  // TODO: define fields
}
