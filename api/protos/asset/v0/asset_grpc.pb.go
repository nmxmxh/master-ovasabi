// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.29.2
// source: api/protos/asset/v0/asset.proto

package assetv0

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AssetService_UploadLightAsset_FullMethodName        = "/asset.v0.AssetService/UploadLightAsset"
	AssetService_StartHeavyAssetUpload_FullMethodName   = "/asset.v0.AssetService/StartHeavyAssetUpload"
	AssetService_StreamAssetChunk_FullMethodName        = "/asset.v0.AssetService/StreamAssetChunk"
	AssetService_CompleteAssetUpload_FullMethodName     = "/asset.v0.AssetService/CompleteAssetUpload"
	AssetService_GetAsset_FullMethodName                = "/asset.v0.AssetService/GetAsset"
	AssetService_StreamAssetContent_FullMethodName      = "/asset.v0.AssetService/StreamAssetContent"
	AssetService_DeleteAsset_FullMethodName             = "/asset.v0.AssetService/DeleteAsset"
	AssetService_ListUserAssets_FullMethodName          = "/asset.v0.AssetService/ListUserAssets"
	AssetService_ListSystemAssets_FullMethodName        = "/asset.v0.AssetService/ListSystemAssets"
	AssetService_SubscribeToUserAssets_FullMethodName   = "/asset.v0.AssetService/SubscribeToUserAssets"
	AssetService_SubscribeToSystemAssets_FullMethodName = "/asset.v0.AssetService/SubscribeToSystemAssets"
	AssetService_BroadcastSystemAsset_FullMethodName    = "/asset.v0.AssetService/BroadcastSystemAsset"
)

// AssetServiceClient is the client API for AssetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AssetServiceClient interface {
	// Upload a small asset (< 500KB) in a single request
	UploadLightAsset(ctx context.Context, in *UploadLightAssetRequest, opts ...grpc.CallOption) (*Asset, error)
	// Start a heavy asset upload session (> 500KB)
	StartHeavyAssetUpload(ctx context.Context, in *StartHeavyAssetUploadRequest, opts ...grpc.CallOption) (*StartHeavyAssetUploadResponse, error)
	// Stream chunks for a heavy asset upload
	StreamAssetChunk(ctx context.Context, opts ...grpc.CallOption) (AssetService_StreamAssetChunkClient, error)
	// Complete a heavy asset upload
	CompleteAssetUpload(ctx context.Context, in *CompleteAssetUploadRequest, opts ...grpc.CallOption) (*Asset, error)
	// Get asset metadata
	GetAsset(ctx context.Context, in *GetAssetRequest, opts ...grpc.CallOption) (*Asset, error)
	// Stream asset content
	StreamAssetContent(ctx context.Context, in *GetAssetRequest, opts ...grpc.CallOption) (AssetService_StreamAssetContentClient, error)
	// Delete an asset
	DeleteAsset(ctx context.Context, in *DeleteAssetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// List user assets with pagination
	ListUserAssets(ctx context.Context, in *ListUserAssetsRequest, opts ...grpc.CallOption) (*ListUserAssetsResponse, error)
	// List system assets with pagination
	ListSystemAssets(ctx context.Context, in *ListSystemAssetsRequest, opts ...grpc.CallOption) (*ListSystemAssetsResponse, error)
	// Subscribe to user asset updates stream
	SubscribeToUserAssets(ctx context.Context, in *SubscribeToUserAssetsRequest, opts ...grpc.CallOption) (AssetService_SubscribeToUserAssetsClient, error)
	// Subscribe to system asset updates stream
	SubscribeToSystemAssets(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (AssetService_SubscribeToSystemAssetsClient, error)
	// Broadcast a system asset to all subscribers
	BroadcastSystemAsset(ctx context.Context, in *BroadcastSystemAssetRequest, opts ...grpc.CallOption) (*Asset, error)
}

type assetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAssetServiceClient(cc grpc.ClientConnInterface) AssetServiceClient {
	return &assetServiceClient{cc}
}

func (c *assetServiceClient) UploadLightAsset(ctx context.Context, in *UploadLightAssetRequest, opts ...grpc.CallOption) (*Asset, error) {
	out := new(Asset)
	err := c.cc.Invoke(ctx, AssetService_UploadLightAsset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetServiceClient) StartHeavyAssetUpload(ctx context.Context, in *StartHeavyAssetUploadRequest, opts ...grpc.CallOption) (*StartHeavyAssetUploadResponse, error) {
	out := new(StartHeavyAssetUploadResponse)
	err := c.cc.Invoke(ctx, AssetService_StartHeavyAssetUpload_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetServiceClient) StreamAssetChunk(ctx context.Context, opts ...grpc.CallOption) (AssetService_StreamAssetChunkClient, error) {
	stream, err := c.cc.NewStream(ctx, &AssetService_ServiceDesc.Streams[0], AssetService_StreamAssetChunk_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &assetServiceStreamAssetChunkClient{stream}
	return x, nil
}

type AssetService_StreamAssetChunkClient interface {
	Send(*AssetChunk) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type assetServiceStreamAssetChunkClient struct {
	grpc.ClientStream
}

func (x *assetServiceStreamAssetChunkClient) Send(m *AssetChunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *assetServiceStreamAssetChunkClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *assetServiceClient) CompleteAssetUpload(ctx context.Context, in *CompleteAssetUploadRequest, opts ...grpc.CallOption) (*Asset, error) {
	out := new(Asset)
	err := c.cc.Invoke(ctx, AssetService_CompleteAssetUpload_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetServiceClient) GetAsset(ctx context.Context, in *GetAssetRequest, opts ...grpc.CallOption) (*Asset, error) {
	out := new(Asset)
	err := c.cc.Invoke(ctx, AssetService_GetAsset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetServiceClient) StreamAssetContent(ctx context.Context, in *GetAssetRequest, opts ...grpc.CallOption) (AssetService_StreamAssetContentClient, error) {
	stream, err := c.cc.NewStream(ctx, &AssetService_ServiceDesc.Streams[1], AssetService_StreamAssetContent_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &assetServiceStreamAssetContentClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AssetService_StreamAssetContentClient interface {
	Recv() (*AssetChunk, error)
	grpc.ClientStream
}

type assetServiceStreamAssetContentClient struct {
	grpc.ClientStream
}

func (x *assetServiceStreamAssetContentClient) Recv() (*AssetChunk, error) {
	m := new(AssetChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *assetServiceClient) DeleteAsset(ctx context.Context, in *DeleteAssetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AssetService_DeleteAsset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetServiceClient) ListUserAssets(ctx context.Context, in *ListUserAssetsRequest, opts ...grpc.CallOption) (*ListUserAssetsResponse, error) {
	out := new(ListUserAssetsResponse)
	err := c.cc.Invoke(ctx, AssetService_ListUserAssets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetServiceClient) ListSystemAssets(ctx context.Context, in *ListSystemAssetsRequest, opts ...grpc.CallOption) (*ListSystemAssetsResponse, error) {
	out := new(ListSystemAssetsResponse)
	err := c.cc.Invoke(ctx, AssetService_ListSystemAssets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetServiceClient) SubscribeToUserAssets(ctx context.Context, in *SubscribeToUserAssetsRequest, opts ...grpc.CallOption) (AssetService_SubscribeToUserAssetsClient, error) {
	stream, err := c.cc.NewStream(ctx, &AssetService_ServiceDesc.Streams[2], AssetService_SubscribeToUserAssets_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &assetServiceSubscribeToUserAssetsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AssetService_SubscribeToUserAssetsClient interface {
	Recv() (*AssetUpdate, error)
	grpc.ClientStream
}

type assetServiceSubscribeToUserAssetsClient struct {
	grpc.ClientStream
}

func (x *assetServiceSubscribeToUserAssetsClient) Recv() (*AssetUpdate, error) {
	m := new(AssetUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *assetServiceClient) SubscribeToSystemAssets(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (AssetService_SubscribeToSystemAssetsClient, error) {
	stream, err := c.cc.NewStream(ctx, &AssetService_ServiceDesc.Streams[3], AssetService_SubscribeToSystemAssets_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &assetServiceSubscribeToSystemAssetsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AssetService_SubscribeToSystemAssetsClient interface {
	Recv() (*AssetUpdate, error)
	grpc.ClientStream
}

type assetServiceSubscribeToSystemAssetsClient struct {
	grpc.ClientStream
}

func (x *assetServiceSubscribeToSystemAssetsClient) Recv() (*AssetUpdate, error) {
	m := new(AssetUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *assetServiceClient) BroadcastSystemAsset(ctx context.Context, in *BroadcastSystemAssetRequest, opts ...grpc.CallOption) (*Asset, error) {
	out := new(Asset)
	err := c.cc.Invoke(ctx, AssetService_BroadcastSystemAsset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AssetServiceServer is the server API for AssetService service.
// All implementations must embed UnimplementedAssetServiceServer
// for forward compatibility
type AssetServiceServer interface {
	// Upload a small asset (< 500KB) in a single request
	UploadLightAsset(context.Context, *UploadLightAssetRequest) (*Asset, error)
	// Start a heavy asset upload session (> 500KB)
	StartHeavyAssetUpload(context.Context, *StartHeavyAssetUploadRequest) (*StartHeavyAssetUploadResponse, error)
	// Stream chunks for a heavy asset upload
	StreamAssetChunk(AssetService_StreamAssetChunkServer) error
	// Complete a heavy asset upload
	CompleteAssetUpload(context.Context, *CompleteAssetUploadRequest) (*Asset, error)
	// Get asset metadata
	GetAsset(context.Context, *GetAssetRequest) (*Asset, error)
	// Stream asset content
	StreamAssetContent(*GetAssetRequest, AssetService_StreamAssetContentServer) error
	// Delete an asset
	DeleteAsset(context.Context, *DeleteAssetRequest) (*emptypb.Empty, error)
	// List user assets with pagination
	ListUserAssets(context.Context, *ListUserAssetsRequest) (*ListUserAssetsResponse, error)
	// List system assets with pagination
	ListSystemAssets(context.Context, *ListSystemAssetsRequest) (*ListSystemAssetsResponse, error)
	// Subscribe to user asset updates stream
	SubscribeToUserAssets(*SubscribeToUserAssetsRequest, AssetService_SubscribeToUserAssetsServer) error
	// Subscribe to system asset updates stream
	SubscribeToSystemAssets(*emptypb.Empty, AssetService_SubscribeToSystemAssetsServer) error
	// Broadcast a system asset to all subscribers
	BroadcastSystemAsset(context.Context, *BroadcastSystemAssetRequest) (*Asset, error)
	mustEmbedUnimplementedAssetServiceServer()
}

// UnimplementedAssetServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAssetServiceServer struct {
}

func (UnimplementedAssetServiceServer) UploadLightAsset(context.Context, *UploadLightAssetRequest) (*Asset, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadLightAsset not implemented")
}
func (UnimplementedAssetServiceServer) StartHeavyAssetUpload(context.Context, *StartHeavyAssetUploadRequest) (*StartHeavyAssetUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartHeavyAssetUpload not implemented")
}
func (UnimplementedAssetServiceServer) StreamAssetChunk(AssetService_StreamAssetChunkServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamAssetChunk not implemented")
}
func (UnimplementedAssetServiceServer) CompleteAssetUpload(context.Context, *CompleteAssetUploadRequest) (*Asset, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteAssetUpload not implemented")
}
func (UnimplementedAssetServiceServer) GetAsset(context.Context, *GetAssetRequest) (*Asset, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAsset not implemented")
}
func (UnimplementedAssetServiceServer) StreamAssetContent(*GetAssetRequest, AssetService_StreamAssetContentServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamAssetContent not implemented")
}
func (UnimplementedAssetServiceServer) DeleteAsset(context.Context, *DeleteAssetRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAsset not implemented")
}
func (UnimplementedAssetServiceServer) ListUserAssets(context.Context, *ListUserAssetsRequest) (*ListUserAssetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserAssets not implemented")
}
func (UnimplementedAssetServiceServer) ListSystemAssets(context.Context, *ListSystemAssetsRequest) (*ListSystemAssetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSystemAssets not implemented")
}
func (UnimplementedAssetServiceServer) SubscribeToUserAssets(*SubscribeToUserAssetsRequest, AssetService_SubscribeToUserAssetsServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToUserAssets not implemented")
}
func (UnimplementedAssetServiceServer) SubscribeToSystemAssets(*emptypb.Empty, AssetService_SubscribeToSystemAssetsServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToSystemAssets not implemented")
}
func (UnimplementedAssetServiceServer) BroadcastSystemAsset(context.Context, *BroadcastSystemAssetRequest) (*Asset, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BroadcastSystemAsset not implemented")
}
func (UnimplementedAssetServiceServer) mustEmbedUnimplementedAssetServiceServer() {}

// UnsafeAssetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AssetServiceServer will
// result in compilation errors.
type UnsafeAssetServiceServer interface {
	mustEmbedUnimplementedAssetServiceServer()
}

func RegisterAssetServiceServer(s grpc.ServiceRegistrar, srv AssetServiceServer) {
	s.RegisterService(&AssetService_ServiceDesc, srv)
}

func _AssetService_UploadLightAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadLightAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServiceServer).UploadLightAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetService_UploadLightAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServiceServer).UploadLightAsset(ctx, req.(*UploadLightAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetService_StartHeavyAssetUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartHeavyAssetUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServiceServer).StartHeavyAssetUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetService_StartHeavyAssetUpload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServiceServer).StartHeavyAssetUpload(ctx, req.(*StartHeavyAssetUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetService_StreamAssetChunk_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AssetServiceServer).StreamAssetChunk(&assetServiceStreamAssetChunkServer{stream})
}

type AssetService_StreamAssetChunkServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*AssetChunk, error)
	grpc.ServerStream
}

type assetServiceStreamAssetChunkServer struct {
	grpc.ServerStream
}

func (x *assetServiceStreamAssetChunkServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *assetServiceStreamAssetChunkServer) Recv() (*AssetChunk, error) {
	m := new(AssetChunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _AssetService_CompleteAssetUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteAssetUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServiceServer).CompleteAssetUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetService_CompleteAssetUpload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServiceServer).CompleteAssetUpload(ctx, req.(*CompleteAssetUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetService_GetAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServiceServer).GetAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetService_GetAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServiceServer).GetAsset(ctx, req.(*GetAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetService_StreamAssetContent_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetAssetRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AssetServiceServer).StreamAssetContent(m, &assetServiceStreamAssetContentServer{stream})
}

type AssetService_StreamAssetContentServer interface {
	Send(*AssetChunk) error
	grpc.ServerStream
}

type assetServiceStreamAssetContentServer struct {
	grpc.ServerStream
}

func (x *assetServiceStreamAssetContentServer) Send(m *AssetChunk) error {
	return x.ServerStream.SendMsg(m)
}

func _AssetService_DeleteAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServiceServer).DeleteAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetService_DeleteAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServiceServer).DeleteAsset(ctx, req.(*DeleteAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetService_ListUserAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserAssetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServiceServer).ListUserAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetService_ListUserAssets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServiceServer).ListUserAssets(ctx, req.(*ListUserAssetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetService_ListSystemAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSystemAssetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServiceServer).ListSystemAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetService_ListSystemAssets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServiceServer).ListSystemAssets(ctx, req.(*ListSystemAssetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetService_SubscribeToUserAssets_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeToUserAssetsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AssetServiceServer).SubscribeToUserAssets(m, &assetServiceSubscribeToUserAssetsServer{stream})
}

type AssetService_SubscribeToUserAssetsServer interface {
	Send(*AssetUpdate) error
	grpc.ServerStream
}

type assetServiceSubscribeToUserAssetsServer struct {
	grpc.ServerStream
}

func (x *assetServiceSubscribeToUserAssetsServer) Send(m *AssetUpdate) error {
	return x.ServerStream.SendMsg(m)
}

func _AssetService_SubscribeToSystemAssets_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AssetServiceServer).SubscribeToSystemAssets(m, &assetServiceSubscribeToSystemAssetsServer{stream})
}

type AssetService_SubscribeToSystemAssetsServer interface {
	Send(*AssetUpdate) error
	grpc.ServerStream
}

type assetServiceSubscribeToSystemAssetsServer struct {
	grpc.ServerStream
}

func (x *assetServiceSubscribeToSystemAssetsServer) Send(m *AssetUpdate) error {
	return x.ServerStream.SendMsg(m)
}

func _AssetService_BroadcastSystemAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BroadcastSystemAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServiceServer).BroadcastSystemAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetService_BroadcastSystemAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServiceServer).BroadcastSystemAsset(ctx, req.(*BroadcastSystemAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AssetService_ServiceDesc is the grpc.ServiceDesc for AssetService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AssetService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "asset.v0.AssetService",
	HandlerType: (*AssetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadLightAsset",
			Handler:    _AssetService_UploadLightAsset_Handler,
		},
		{
			MethodName: "StartHeavyAssetUpload",
			Handler:    _AssetService_StartHeavyAssetUpload_Handler,
		},
		{
			MethodName: "CompleteAssetUpload",
			Handler:    _AssetService_CompleteAssetUpload_Handler,
		},
		{
			MethodName: "GetAsset",
			Handler:    _AssetService_GetAsset_Handler,
		},
		{
			MethodName: "DeleteAsset",
			Handler:    _AssetService_DeleteAsset_Handler,
		},
		{
			MethodName: "ListUserAssets",
			Handler:    _AssetService_ListUserAssets_Handler,
		},
		{
			MethodName: "ListSystemAssets",
			Handler:    _AssetService_ListSystemAssets_Handler,
		},
		{
			MethodName: "BroadcastSystemAsset",
			Handler:    _AssetService_BroadcastSystemAsset_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamAssetChunk",
			Handler:       _AssetService_StreamAssetChunk_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamAssetContent",
			Handler:       _AssetService_StreamAssetContent_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeToUserAssets",
			Handler:       _AssetService_SubscribeToUserAssets_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeToSystemAssets",
			Handler:       _AssetService_SubscribeToSystemAssets_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/protos/asset/v0/asset.proto",
}
