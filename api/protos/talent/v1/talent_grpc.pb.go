// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: talent/v1/talent.proto

package talentpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TalentService_CreateTalentProfile_FullMethodName  = "/talent.v1.TalentService/CreateTalentProfile"
	TalentService_UpdateTalentProfile_FullMethodName  = "/talent.v1.TalentService/UpdateTalentProfile"
	TalentService_DeleteTalentProfile_FullMethodName  = "/talent.v1.TalentService/DeleteTalentProfile"
	TalentService_GetTalentProfile_FullMethodName     = "/talent.v1.TalentService/GetTalentProfile"
	TalentService_ListTalentProfiles_FullMethodName   = "/talent.v1.TalentService/ListTalentProfiles"
	TalentService_SearchTalentProfiles_FullMethodName = "/talent.v1.TalentService/SearchTalentProfiles"
	TalentService_BookTalent_FullMethodName           = "/talent.v1.TalentService/BookTalent"
	TalentService_ListBookings_FullMethodName         = "/talent.v1.TalentService/ListBookings"
)

// TalentServiceClient is the client API for TalentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TalentServiceClient interface {
	CreateTalentProfile(ctx context.Context, in *CreateTalentProfileRequest, opts ...grpc.CallOption) (*CreateTalentProfileResponse, error)
	UpdateTalentProfile(ctx context.Context, in *UpdateTalentProfileRequest, opts ...grpc.CallOption) (*UpdateTalentProfileResponse, error)
	DeleteTalentProfile(ctx context.Context, in *DeleteTalentProfileRequest, opts ...grpc.CallOption) (*DeleteTalentProfileResponse, error)
	GetTalentProfile(ctx context.Context, in *GetTalentProfileRequest, opts ...grpc.CallOption) (*GetTalentProfileResponse, error)
	ListTalentProfiles(ctx context.Context, in *ListTalentProfilesRequest, opts ...grpc.CallOption) (*ListTalentProfilesResponse, error)
	SearchTalentProfiles(ctx context.Context, in *SearchTalentProfilesRequest, opts ...grpc.CallOption) (*SearchTalentProfilesResponse, error)
	BookTalent(ctx context.Context, in *BookTalentRequest, opts ...grpc.CallOption) (*BookTalentResponse, error)
	ListBookings(ctx context.Context, in *ListBookingsRequest, opts ...grpc.CallOption) (*ListBookingsResponse, error)
}

type talentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTalentServiceClient(cc grpc.ClientConnInterface) TalentServiceClient {
	return &talentServiceClient{cc}
}

func (c *talentServiceClient) CreateTalentProfile(ctx context.Context, in *CreateTalentProfileRequest, opts ...grpc.CallOption) (*CreateTalentProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTalentProfileResponse)
	err := c.cc.Invoke(ctx, TalentService_CreateTalentProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talentServiceClient) UpdateTalentProfile(ctx context.Context, in *UpdateTalentProfileRequest, opts ...grpc.CallOption) (*UpdateTalentProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTalentProfileResponse)
	err := c.cc.Invoke(ctx, TalentService_UpdateTalentProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talentServiceClient) DeleteTalentProfile(ctx context.Context, in *DeleteTalentProfileRequest, opts ...grpc.CallOption) (*DeleteTalentProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTalentProfileResponse)
	err := c.cc.Invoke(ctx, TalentService_DeleteTalentProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talentServiceClient) GetTalentProfile(ctx context.Context, in *GetTalentProfileRequest, opts ...grpc.CallOption) (*GetTalentProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTalentProfileResponse)
	err := c.cc.Invoke(ctx, TalentService_GetTalentProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talentServiceClient) ListTalentProfiles(ctx context.Context, in *ListTalentProfilesRequest, opts ...grpc.CallOption) (*ListTalentProfilesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTalentProfilesResponse)
	err := c.cc.Invoke(ctx, TalentService_ListTalentProfiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talentServiceClient) SearchTalentProfiles(ctx context.Context, in *SearchTalentProfilesRequest, opts ...grpc.CallOption) (*SearchTalentProfilesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchTalentProfilesResponse)
	err := c.cc.Invoke(ctx, TalentService_SearchTalentProfiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talentServiceClient) BookTalent(ctx context.Context, in *BookTalentRequest, opts ...grpc.CallOption) (*BookTalentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BookTalentResponse)
	err := c.cc.Invoke(ctx, TalentService_BookTalent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *talentServiceClient) ListBookings(ctx context.Context, in *ListBookingsRequest, opts ...grpc.CallOption) (*ListBookingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBookingsResponse)
	err := c.cc.Invoke(ctx, TalentService_ListBookings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TalentServiceServer is the server API for TalentService service.
// All implementations must embed UnimplementedTalentServiceServer
// for forward compatibility.
type TalentServiceServer interface {
	CreateTalentProfile(context.Context, *CreateTalentProfileRequest) (*CreateTalentProfileResponse, error)
	UpdateTalentProfile(context.Context, *UpdateTalentProfileRequest) (*UpdateTalentProfileResponse, error)
	DeleteTalentProfile(context.Context, *DeleteTalentProfileRequest) (*DeleteTalentProfileResponse, error)
	GetTalentProfile(context.Context, *GetTalentProfileRequest) (*GetTalentProfileResponse, error)
	ListTalentProfiles(context.Context, *ListTalentProfilesRequest) (*ListTalentProfilesResponse, error)
	SearchTalentProfiles(context.Context, *SearchTalentProfilesRequest) (*SearchTalentProfilesResponse, error)
	BookTalent(context.Context, *BookTalentRequest) (*BookTalentResponse, error)
	ListBookings(context.Context, *ListBookingsRequest) (*ListBookingsResponse, error)
	mustEmbedUnimplementedTalentServiceServer()
}

// UnimplementedTalentServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTalentServiceServer struct{}

func (UnimplementedTalentServiceServer) CreateTalentProfile(context.Context, *CreateTalentProfileRequest) (*CreateTalentProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTalentProfile not implemented")
}
func (UnimplementedTalentServiceServer) UpdateTalentProfile(context.Context, *UpdateTalentProfileRequest) (*UpdateTalentProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTalentProfile not implemented")
}
func (UnimplementedTalentServiceServer) DeleteTalentProfile(context.Context, *DeleteTalentProfileRequest) (*DeleteTalentProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTalentProfile not implemented")
}
func (UnimplementedTalentServiceServer) GetTalentProfile(context.Context, *GetTalentProfileRequest) (*GetTalentProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTalentProfile not implemented")
}
func (UnimplementedTalentServiceServer) ListTalentProfiles(context.Context, *ListTalentProfilesRequest) (*ListTalentProfilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTalentProfiles not implemented")
}
func (UnimplementedTalentServiceServer) SearchTalentProfiles(context.Context, *SearchTalentProfilesRequest) (*SearchTalentProfilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchTalentProfiles not implemented")
}
func (UnimplementedTalentServiceServer) BookTalent(context.Context, *BookTalentRequest) (*BookTalentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookTalent not implemented")
}
func (UnimplementedTalentServiceServer) ListBookings(context.Context, *ListBookingsRequest) (*ListBookingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBookings not implemented")
}
func (UnimplementedTalentServiceServer) mustEmbedUnimplementedTalentServiceServer() {}
func (UnimplementedTalentServiceServer) testEmbeddedByValue()                       {}

// UnsafeTalentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TalentServiceServer will
// result in compilation errors.
type UnsafeTalentServiceServer interface {
	mustEmbedUnimplementedTalentServiceServer()
}

func RegisterTalentServiceServer(s grpc.ServiceRegistrar, srv TalentServiceServer) {
	// If the following call pancis, it indicates UnimplementedTalentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TalentService_ServiceDesc, srv)
}

func _TalentService_CreateTalentProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTalentProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalentServiceServer).CreateTalentProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TalentService_CreateTalentProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalentServiceServer).CreateTalentProfile(ctx, req.(*CreateTalentProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalentService_UpdateTalentProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTalentProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalentServiceServer).UpdateTalentProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TalentService_UpdateTalentProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalentServiceServer).UpdateTalentProfile(ctx, req.(*UpdateTalentProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalentService_DeleteTalentProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTalentProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalentServiceServer).DeleteTalentProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TalentService_DeleteTalentProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalentServiceServer).DeleteTalentProfile(ctx, req.(*DeleteTalentProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalentService_GetTalentProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTalentProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalentServiceServer).GetTalentProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TalentService_GetTalentProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalentServiceServer).GetTalentProfile(ctx, req.(*GetTalentProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalentService_ListTalentProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTalentProfilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalentServiceServer).ListTalentProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TalentService_ListTalentProfiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalentServiceServer).ListTalentProfiles(ctx, req.(*ListTalentProfilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalentService_SearchTalentProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchTalentProfilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalentServiceServer).SearchTalentProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TalentService_SearchTalentProfiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalentServiceServer).SearchTalentProfiles(ctx, req.(*SearchTalentProfilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalentService_BookTalent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookTalentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalentServiceServer).BookTalent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TalentService_BookTalent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalentServiceServer).BookTalent(ctx, req.(*BookTalentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TalentService_ListBookings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBookingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TalentServiceServer).ListBookings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TalentService_ListBookings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TalentServiceServer).ListBookings(ctx, req.(*ListBookingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TalentService_ServiceDesc is the grpc.ServiceDesc for TalentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TalentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "talent.v1.TalentService",
	HandlerType: (*TalentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTalentProfile",
			Handler:    _TalentService_CreateTalentProfile_Handler,
		},
		{
			MethodName: "UpdateTalentProfile",
			Handler:    _TalentService_UpdateTalentProfile_Handler,
		},
		{
			MethodName: "DeleteTalentProfile",
			Handler:    _TalentService_DeleteTalentProfile_Handler,
		},
		{
			MethodName: "GetTalentProfile",
			Handler:    _TalentService_GetTalentProfile_Handler,
		},
		{
			MethodName: "ListTalentProfiles",
			Handler:    _TalentService_ListTalentProfiles_Handler,
		},
		{
			MethodName: "SearchTalentProfiles",
			Handler:    _TalentService_SearchTalentProfiles_Handler,
		},
		{
			MethodName: "BookTalent",
			Handler:    _TalentService_BookTalent_Handler,
		},
		{
			MethodName: "ListBookings",
			Handler:    _TalentService_ListBookings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "talent/v1/talent.proto",
}
