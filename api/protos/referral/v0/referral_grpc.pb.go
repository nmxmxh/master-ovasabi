// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.29.2
// source: api/protos/referral/v0/referral.proto

package referral

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ReferralService_CreateReferral_FullMethodName   = "/referral.ReferralService/CreateReferral"
	ReferralService_GetReferral_FullMethodName      = "/referral.ReferralService/GetReferral"
	ReferralService_GetReferralStats_FullMethodName = "/referral.ReferralService/GetReferralStats"
)

// ReferralServiceClient is the client API for ReferralService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReferralServiceClient interface {
	// CreateReferral creates a new referral code for a user
	CreateReferral(ctx context.Context, in *CreateReferralRequest, opts ...grpc.CallOption) (*CreateReferralResponse, error)
	// GetReferral retrieves a referral by referral code
	GetReferral(ctx context.Context, in *GetReferralRequest, opts ...grpc.CallOption) (*GetReferralResponse, error)
	// GetReferralStats retrieves referral statistics
	GetReferralStats(ctx context.Context, in *GetReferralStatsRequest, opts ...grpc.CallOption) (*GetReferralStatsResponse, error)
}

type referralServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReferralServiceClient(cc grpc.ClientConnInterface) ReferralServiceClient {
	return &referralServiceClient{cc}
}

func (c *referralServiceClient) CreateReferral(ctx context.Context, in *CreateReferralRequest, opts ...grpc.CallOption) (*CreateReferralResponse, error) {
	out := new(CreateReferralResponse)
	err := c.cc.Invoke(ctx, ReferralService_CreateReferral_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *referralServiceClient) GetReferral(ctx context.Context, in *GetReferralRequest, opts ...grpc.CallOption) (*GetReferralResponse, error) {
	out := new(GetReferralResponse)
	err := c.cc.Invoke(ctx, ReferralService_GetReferral_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *referralServiceClient) GetReferralStats(ctx context.Context, in *GetReferralStatsRequest, opts ...grpc.CallOption) (*GetReferralStatsResponse, error) {
	out := new(GetReferralStatsResponse)
	err := c.cc.Invoke(ctx, ReferralService_GetReferralStats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReferralServiceServer is the server API for ReferralService service.
// All implementations must embed UnimplementedReferralServiceServer
// for forward compatibility
type ReferralServiceServer interface {
	// CreateReferral creates a new referral code for a user
	CreateReferral(context.Context, *CreateReferralRequest) (*CreateReferralResponse, error)
	// GetReferral retrieves a referral by referral code
	GetReferral(context.Context, *GetReferralRequest) (*GetReferralResponse, error)
	// GetReferralStats retrieves referral statistics
	GetReferralStats(context.Context, *GetReferralStatsRequest) (*GetReferralStatsResponse, error)
	mustEmbedUnimplementedReferralServiceServer()
}

// UnimplementedReferralServiceServer must be embedded to have forward compatible implementations.
type UnimplementedReferralServiceServer struct {
}

func (UnimplementedReferralServiceServer) CreateReferral(context.Context, *CreateReferralRequest) (*CreateReferralResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReferral not implemented")
}
func (UnimplementedReferralServiceServer) GetReferral(context.Context, *GetReferralRequest) (*GetReferralResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReferral not implemented")
}
func (UnimplementedReferralServiceServer) GetReferralStats(context.Context, *GetReferralStatsRequest) (*GetReferralStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReferralStats not implemented")
}
func (UnimplementedReferralServiceServer) mustEmbedUnimplementedReferralServiceServer() {}

// UnsafeReferralServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReferralServiceServer will
// result in compilation errors.
type UnsafeReferralServiceServer interface {
	mustEmbedUnimplementedReferralServiceServer()
}

func RegisterReferralServiceServer(s grpc.ServiceRegistrar, srv ReferralServiceServer) {
	s.RegisterService(&ReferralService_ServiceDesc, srv)
}

func _ReferralService_CreateReferral_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReferralRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferralServiceServer).CreateReferral(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReferralService_CreateReferral_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferralServiceServer).CreateReferral(ctx, req.(*CreateReferralRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReferralService_GetReferral_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReferralRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferralServiceServer).GetReferral(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReferralService_GetReferral_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferralServiceServer).GetReferral(ctx, req.(*GetReferralRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReferralService_GetReferralStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReferralStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReferralServiceServer).GetReferralStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReferralService_GetReferralStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReferralServiceServer).GetReferralStats(ctx, req.(*GetReferralStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReferralService_ServiceDesc is the grpc.ServiceDesc for ReferralService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReferralService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "referral.ReferralService",
	HandlerType: (*ReferralServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateReferral",
			Handler:    _ReferralService_CreateReferral_Handler,
		},
		{
			MethodName: "GetReferral",
			Handler:    _ReferralService_GetReferral_Handler,
		},
		{
			MethodName: "GetReferralStats",
			Handler:    _ReferralService_GetReferralStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/protos/referral/v0/referral.proto",
}
