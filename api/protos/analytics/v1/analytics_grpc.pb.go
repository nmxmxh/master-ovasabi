// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: analytics/v1/analytics.proto

package analyticspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AnalyticsService_TrackEvent_FullMethodName       = "/analytics.v1.AnalyticsService/TrackEvent"
	AnalyticsService_BatchTrackEvents_FullMethodName = "/analytics.v1.AnalyticsService/BatchTrackEvents"
	AnalyticsService_GetUserEvents_FullMethodName    = "/analytics.v1.AnalyticsService/GetUserEvents"
	AnalyticsService_GetProductEvents_FullMethodName = "/analytics.v1.AnalyticsService/GetProductEvents"
	AnalyticsService_GetReport_FullMethodName        = "/analytics.v1.AnalyticsService/GetReport"
	AnalyticsService_ListReports_FullMethodName      = "/analytics.v1.AnalyticsService/ListReports"
)

// AnalyticsServiceClient is the client API for AnalyticsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AnalyticsServiceClient interface {
	TrackEvent(ctx context.Context, in *TrackEventRequest, opts ...grpc.CallOption) (*TrackEventResponse, error)
	BatchTrackEvents(ctx context.Context, in *BatchTrackEventsRequest, opts ...grpc.CallOption) (*BatchTrackEventsResponse, error)
	GetUserEvents(ctx context.Context, in *GetUserEventsRequest, opts ...grpc.CallOption) (*GetUserEventsResponse, error)
	GetProductEvents(ctx context.Context, in *GetProductEventsRequest, opts ...grpc.CallOption) (*GetProductEventsResponse, error)
	GetReport(ctx context.Context, in *GetReportRequest, opts ...grpc.CallOption) (*GetReportResponse, error)
	ListReports(ctx context.Context, in *ListReportsRequest, opts ...grpc.CallOption) (*ListReportsResponse, error)
}

type analyticsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAnalyticsServiceClient(cc grpc.ClientConnInterface) AnalyticsServiceClient {
	return &analyticsServiceClient{cc}
}

func (c *analyticsServiceClient) TrackEvent(ctx context.Context, in *TrackEventRequest, opts ...grpc.CallOption) (*TrackEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TrackEventResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_TrackEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) BatchTrackEvents(ctx context.Context, in *BatchTrackEventsRequest, opts ...grpc.CallOption) (*BatchTrackEventsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchTrackEventsResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_BatchTrackEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) GetUserEvents(ctx context.Context, in *GetUserEventsRequest, opts ...grpc.CallOption) (*GetUserEventsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserEventsResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_GetUserEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) GetProductEvents(ctx context.Context, in *GetProductEventsRequest, opts ...grpc.CallOption) (*GetProductEventsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProductEventsResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_GetProductEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) GetReport(ctx context.Context, in *GetReportRequest, opts ...grpc.CallOption) (*GetReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetReportResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_GetReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) ListReports(ctx context.Context, in *ListReportsRequest, opts ...grpc.CallOption) (*ListReportsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListReportsResponse)
	err := c.cc.Invoke(ctx, AnalyticsService_ListReports_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnalyticsServiceServer is the server API for AnalyticsService service.
// All implementations must embed UnimplementedAnalyticsServiceServer
// for forward compatibility.
type AnalyticsServiceServer interface {
	TrackEvent(context.Context, *TrackEventRequest) (*TrackEventResponse, error)
	BatchTrackEvents(context.Context, *BatchTrackEventsRequest) (*BatchTrackEventsResponse, error)
	GetUserEvents(context.Context, *GetUserEventsRequest) (*GetUserEventsResponse, error)
	GetProductEvents(context.Context, *GetProductEventsRequest) (*GetProductEventsResponse, error)
	GetReport(context.Context, *GetReportRequest) (*GetReportResponse, error)
	ListReports(context.Context, *ListReportsRequest) (*ListReportsResponse, error)
	mustEmbedUnimplementedAnalyticsServiceServer()
}

// UnimplementedAnalyticsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAnalyticsServiceServer struct{}

func (UnimplementedAnalyticsServiceServer) TrackEvent(context.Context, *TrackEventRequest) (*TrackEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrackEvent not implemented")
}
func (UnimplementedAnalyticsServiceServer) BatchTrackEvents(context.Context, *BatchTrackEventsRequest) (*BatchTrackEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchTrackEvents not implemented")
}
func (UnimplementedAnalyticsServiceServer) GetUserEvents(context.Context, *GetUserEventsRequest) (*GetUserEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserEvents not implemented")
}
func (UnimplementedAnalyticsServiceServer) GetProductEvents(context.Context, *GetProductEventsRequest) (*GetProductEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductEvents not implemented")
}
func (UnimplementedAnalyticsServiceServer) GetReport(context.Context, *GetReportRequest) (*GetReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReport not implemented")
}
func (UnimplementedAnalyticsServiceServer) ListReports(context.Context, *ListReportsRequest) (*ListReportsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReports not implemented")
}
func (UnimplementedAnalyticsServiceServer) mustEmbedUnimplementedAnalyticsServiceServer() {}
func (UnimplementedAnalyticsServiceServer) testEmbeddedByValue()                          {}

// UnsafeAnalyticsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnalyticsServiceServer will
// result in compilation errors.
type UnsafeAnalyticsServiceServer interface {
	mustEmbedUnimplementedAnalyticsServiceServer()
}

func RegisterAnalyticsServiceServer(s grpc.ServiceRegistrar, srv AnalyticsServiceServer) {
	// If the following call pancis, it indicates UnimplementedAnalyticsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AnalyticsService_ServiceDesc, srv)
}

func _AnalyticsService_TrackEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrackEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).TrackEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_TrackEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).TrackEvent(ctx, req.(*TrackEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_BatchTrackEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchTrackEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).BatchTrackEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_BatchTrackEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).BatchTrackEvents(ctx, req.(*BatchTrackEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_GetUserEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).GetUserEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_GetUserEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).GetUserEvents(ctx, req.(*GetUserEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_GetProductEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).GetProductEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_GetProductEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).GetProductEvents(ctx, req.(*GetProductEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_GetReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).GetReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_GetReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).GetReport(ctx, req.(*GetReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_ListReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReportsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).ListReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnalyticsService_ListReports_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).ListReports(ctx, req.(*ListReportsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AnalyticsService_ServiceDesc is the grpc.ServiceDesc for AnalyticsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AnalyticsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "analytics.v1.AnalyticsService",
	HandlerType: (*AnalyticsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TrackEvent",
			Handler:    _AnalyticsService_TrackEvent_Handler,
		},
		{
			MethodName: "BatchTrackEvents",
			Handler:    _AnalyticsService_BatchTrackEvents_Handler,
		},
		{
			MethodName: "GetUserEvents",
			Handler:    _AnalyticsService_GetUserEvents_Handler,
		},
		{
			MethodName: "GetProductEvents",
			Handler:    _AnalyticsService_GetProductEvents_Handler,
		},
		{
			MethodName: "GetReport",
			Handler:    _AnalyticsService_GetReport_Handler,
		},
		{
			MethodName: "ListReports",
			Handler:    _AnalyticsService_ListReports_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "analytics/v1/analytics.proto",
}
