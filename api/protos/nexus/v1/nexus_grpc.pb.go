// NexusService proto
// See docs/services/nexus.md for full documentation and research inspirations.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: nexus/v1/nexus.proto

package nexus

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NexusService_RegisterPattern_FullMethodName = "/nexus.v1.NexusService/RegisterPattern"
	NexusService_ListPatterns_FullMethodName    = "/nexus.v1.NexusService/ListPatterns"
	NexusService_Orchestrate_FullMethodName     = "/nexus.v1.NexusService/Orchestrate"
	NexusService_TracePattern_FullMethodName    = "/nexus.v1.NexusService/TracePattern"
	NexusService_MinePatterns_FullMethodName    = "/nexus.v1.NexusService/MinePatterns"
	NexusService_Feedback_FullMethodName        = "/nexus.v1.NexusService/Feedback"
	NexusService_HandleOps_FullMethodName       = "/nexus.v1.NexusService/HandleOps"
	NexusService_EmitEvent_FullMethodName       = "/nexus.v1.NexusService/EmitEvent"
	NexusService_SubscribeEvents_FullMethodName = "/nexus.v1.NexusService/SubscribeEvents"
)

// NexusServiceClient is the client API for NexusService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// NexusService: High-level composer, orchestrator, and pattern identifier
type NexusServiceClient interface {
	RegisterPattern(ctx context.Context, in *RegisterPatternRequest, opts ...grpc.CallOption) (*RegisterPatternResponse, error)
	ListPatterns(ctx context.Context, in *ListPatternsRequest, opts ...grpc.CallOption) (*ListPatternsResponse, error)
	Orchestrate(ctx context.Context, in *OrchestrateRequest, opts ...grpc.CallOption) (*OrchestrateResponse, error)
	TracePattern(ctx context.Context, in *TracePatternRequest, opts ...grpc.CallOption) (*TracePatternResponse, error)
	MinePatterns(ctx context.Context, in *MinePatternsRequest, opts ...grpc.CallOption) (*MinePatternsResponse, error)
	Feedback(ctx context.Context, in *FeedbackRequest, opts ...grpc.CallOption) (*FeedbackResponse, error)
	HandleOps(ctx context.Context, in *HandleOpsRequest, opts ...grpc.CallOption) (*HandleOpsResponse, error)
	// --- Event Bus Methods ---
	EmitEvent(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*EventResponse, error)
	SubscribeEvents(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[EventResponse], error)
}

type nexusServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNexusServiceClient(cc grpc.ClientConnInterface) NexusServiceClient {
	return &nexusServiceClient{cc}
}

func (c *nexusServiceClient) RegisterPattern(ctx context.Context, in *RegisterPatternRequest, opts ...grpc.CallOption) (*RegisterPatternResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterPatternResponse)
	err := c.cc.Invoke(ctx, NexusService_RegisterPattern_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusServiceClient) ListPatterns(ctx context.Context, in *ListPatternsRequest, opts ...grpc.CallOption) (*ListPatternsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPatternsResponse)
	err := c.cc.Invoke(ctx, NexusService_ListPatterns_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusServiceClient) Orchestrate(ctx context.Context, in *OrchestrateRequest, opts ...grpc.CallOption) (*OrchestrateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrchestrateResponse)
	err := c.cc.Invoke(ctx, NexusService_Orchestrate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusServiceClient) TracePattern(ctx context.Context, in *TracePatternRequest, opts ...grpc.CallOption) (*TracePatternResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TracePatternResponse)
	err := c.cc.Invoke(ctx, NexusService_TracePattern_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusServiceClient) MinePatterns(ctx context.Context, in *MinePatternsRequest, opts ...grpc.CallOption) (*MinePatternsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MinePatternsResponse)
	err := c.cc.Invoke(ctx, NexusService_MinePatterns_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusServiceClient) Feedback(ctx context.Context, in *FeedbackRequest, opts ...grpc.CallOption) (*FeedbackResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FeedbackResponse)
	err := c.cc.Invoke(ctx, NexusService_Feedback_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusServiceClient) HandleOps(ctx context.Context, in *HandleOpsRequest, opts ...grpc.CallOption) (*HandleOpsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HandleOpsResponse)
	err := c.cc.Invoke(ctx, NexusService_HandleOps_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusServiceClient) EmitEvent(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*EventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EventResponse)
	err := c.cc.Invoke(ctx, NexusService_EmitEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusServiceClient) SubscribeEvents(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[EventResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &NexusService_ServiceDesc.Streams[0], NexusService_SubscribeEvents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeRequest, EventResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NexusService_SubscribeEventsClient = grpc.ServerStreamingClient[EventResponse]

// NexusServiceServer is the server API for NexusService service.
// All implementations must embed UnimplementedNexusServiceServer
// for forward compatibility.
//
// NexusService: High-level composer, orchestrator, and pattern identifier
type NexusServiceServer interface {
	RegisterPattern(context.Context, *RegisterPatternRequest) (*RegisterPatternResponse, error)
	ListPatterns(context.Context, *ListPatternsRequest) (*ListPatternsResponse, error)
	Orchestrate(context.Context, *OrchestrateRequest) (*OrchestrateResponse, error)
	TracePattern(context.Context, *TracePatternRequest) (*TracePatternResponse, error)
	MinePatterns(context.Context, *MinePatternsRequest) (*MinePatternsResponse, error)
	Feedback(context.Context, *FeedbackRequest) (*FeedbackResponse, error)
	HandleOps(context.Context, *HandleOpsRequest) (*HandleOpsResponse, error)
	// --- Event Bus Methods ---
	EmitEvent(context.Context, *EventRequest) (*EventResponse, error)
	SubscribeEvents(*SubscribeRequest, grpc.ServerStreamingServer[EventResponse]) error
	mustEmbedUnimplementedNexusServiceServer()
}

// UnimplementedNexusServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNexusServiceServer struct{}

func (UnimplementedNexusServiceServer) RegisterPattern(context.Context, *RegisterPatternRequest) (*RegisterPatternResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterPattern not implemented")
}
func (UnimplementedNexusServiceServer) ListPatterns(context.Context, *ListPatternsRequest) (*ListPatternsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPatterns not implemented")
}
func (UnimplementedNexusServiceServer) Orchestrate(context.Context, *OrchestrateRequest) (*OrchestrateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Orchestrate not implemented")
}
func (UnimplementedNexusServiceServer) TracePattern(context.Context, *TracePatternRequest) (*TracePatternResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TracePattern not implemented")
}
func (UnimplementedNexusServiceServer) MinePatterns(context.Context, *MinePatternsRequest) (*MinePatternsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MinePatterns not implemented")
}
func (UnimplementedNexusServiceServer) Feedback(context.Context, *FeedbackRequest) (*FeedbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Feedback not implemented")
}
func (UnimplementedNexusServiceServer) HandleOps(context.Context, *HandleOpsRequest) (*HandleOpsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleOps not implemented")
}
func (UnimplementedNexusServiceServer) EmitEvent(context.Context, *EventRequest) (*EventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmitEvent not implemented")
}
func (UnimplementedNexusServiceServer) SubscribeEvents(*SubscribeRequest, grpc.ServerStreamingServer[EventResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeEvents not implemented")
}
func (UnimplementedNexusServiceServer) mustEmbedUnimplementedNexusServiceServer() {}
func (UnimplementedNexusServiceServer) testEmbeddedByValue()                      {}

// UnsafeNexusServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NexusServiceServer will
// result in compilation errors.
type UnsafeNexusServiceServer interface {
	mustEmbedUnimplementedNexusServiceServer()
}

func RegisterNexusServiceServer(s grpc.ServiceRegistrar, srv NexusServiceServer) {
	// If the following call pancis, it indicates UnimplementedNexusServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NexusService_ServiceDesc, srv)
}

func _NexusService_RegisterPattern_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterPatternRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusServiceServer).RegisterPattern(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NexusService_RegisterPattern_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusServiceServer).RegisterPattern(ctx, req.(*RegisterPatternRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NexusService_ListPatterns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPatternsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusServiceServer).ListPatterns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NexusService_ListPatterns_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusServiceServer).ListPatterns(ctx, req.(*ListPatternsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NexusService_Orchestrate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrchestrateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusServiceServer).Orchestrate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NexusService_Orchestrate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusServiceServer).Orchestrate(ctx, req.(*OrchestrateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NexusService_TracePattern_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TracePatternRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusServiceServer).TracePattern(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NexusService_TracePattern_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusServiceServer).TracePattern(ctx, req.(*TracePatternRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NexusService_MinePatterns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MinePatternsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusServiceServer).MinePatterns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NexusService_MinePatterns_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusServiceServer).MinePatterns(ctx, req.(*MinePatternsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NexusService_Feedback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeedbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusServiceServer).Feedback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NexusService_Feedback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusServiceServer).Feedback(ctx, req.(*FeedbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NexusService_HandleOps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleOpsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusServiceServer).HandleOps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NexusService_HandleOps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusServiceServer).HandleOps(ctx, req.(*HandleOpsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NexusService_EmitEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusServiceServer).EmitEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NexusService_EmitEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusServiceServer).EmitEvent(ctx, req.(*EventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NexusService_SubscribeEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NexusServiceServer).SubscribeEvents(m, &grpc.GenericServerStream[SubscribeRequest, EventResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NexusService_SubscribeEventsServer = grpc.ServerStreamingServer[EventResponse]

// NexusService_ServiceDesc is the grpc.ServiceDesc for NexusService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NexusService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nexus.v1.NexusService",
	HandlerType: (*NexusServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterPattern",
			Handler:    _NexusService_RegisterPattern_Handler,
		},
		{
			MethodName: "ListPatterns",
			Handler:    _NexusService_ListPatterns_Handler,
		},
		{
			MethodName: "Orchestrate",
			Handler:    _NexusService_Orchestrate_Handler,
		},
		{
			MethodName: "TracePattern",
			Handler:    _NexusService_TracePattern_Handler,
		},
		{
			MethodName: "MinePatterns",
			Handler:    _NexusService_MinePatterns_Handler,
		},
		{
			MethodName: "Feedback",
			Handler:    _NexusService_Feedback_Handler,
		},
		{
			MethodName: "HandleOps",
			Handler:    _NexusService_HandleOps_Handler,
		},
		{
			MethodName: "EmitEvent",
			Handler:    _NexusService_EmitEvent_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeEvents",
			Handler:       _NexusService_SubscribeEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "nexus/v1/nexus.proto",
}
