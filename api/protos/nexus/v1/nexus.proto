// NexusService proto
// See docs/services/nexus.md for full documentation and research inspirations.
syntax = "proto3";
package nexus.v1;

option go_package = "github.com/nmxmxh/master-ovasabi/api/protos/nexus";

import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";
import "common/v1/metadata.proto";
import "common/v1/payload.proto";

// NexusService: High-level composer, orchestrator, and pattern identifier
service NexusService {
  rpc RegisterPattern(RegisterPatternRequest) returns (RegisterPatternResponse);
  rpc ListPatterns(ListPatternsRequest) returns (ListPatternsResponse);
  rpc Orchestrate(OrchestrateRequest) returns (OrchestrateResponse);
  rpc TracePattern(TracePatternRequest) returns (TracePatternResponse);
  rpc MinePatterns(MinePatternsRequest) returns (MinePatternsResponse);
  rpc Feedback(FeedbackRequest) returns (FeedbackResponse);
  rpc HandleOps(HandleOpsRequest) returns (HandleOpsResponse);

  // --- Event Bus Methods ---
  rpc EmitEvent(EventRequest) returns (EventResponse);
  rpc SubscribeEvents(SubscribeRequest) returns (stream EventResponse);
}

message RegisterPatternRequest {
  string pattern_id = 1;
  string pattern_type = 2; // workflow, data, ai, etc.
  string version = 3;
  string origin = 4; // manual, mined, imported
  google.protobuf.Struct definition = 5; // pattern definition (YAML/JSON/DSL)
  common.Metadata metadata = 6;
  int64 campaign_id = 7; // campaign/tenant context
}

message RegisterPatternResponse {
  bool success = 1;
  string error = 2;
  common.Metadata metadata = 3;
}

message ListPatternsRequest {
  string pattern_type = 1;
  common.Metadata metadata = 2;
  int64 campaign_id = 3; // campaign/tenant context
}

message ListPatternsResponse {
  repeated Pattern patterns = 1;
  common.Metadata metadata = 2;
}

message Pattern {
  string pattern_id = 1;
  string pattern_type = 2;
  string version = 3;
  string origin = 4;
  google.protobuf.Struct definition = 5;
  int64 usage_count = 6;
  google.protobuf.Timestamp last_used = 7;
  common.Metadata metadata = 8;
  int64 campaign_id = 9; // campaign/tenant context
}

message OrchestrateRequest {
  string pattern_id = 1;
  google.protobuf.Struct input = 2;
  common.Metadata metadata = 3;
  int64 campaign_id = 4; // campaign/tenant context
}

message OrchestrateResponse {
  string orchestration_id = 1;
  google.protobuf.Struct output = 2;
  common.Metadata metadata = 3;
}

message TracePatternRequest {
  string orchestration_id = 1;
  common.Metadata metadata = 2;
}

message TracePatternResponse {
  string trace_id = 1;
  repeated TraceStep steps = 2;
  common.Metadata metadata = 3;
}

message TraceStep {
  string service = 1;
  string action = 2;
  google.protobuf.Timestamp timestamp = 3;
  google.protobuf.Struct details = 4;
}

message MinePatternsRequest {
  string source = 1; // events, logs, metadata, etc.
  common.Metadata metadata = 2;
  int64 campaign_id = 3; // campaign/tenant context
}

message MinePatternsResponse {
  repeated Pattern patterns = 1;
  common.Metadata metadata = 2;
}

message FeedbackRequest {
  string pattern_id = 1;
  float score = 2;
  string comments = 3;
  common.Metadata metadata = 4;
  int64 campaign_id = 5; // campaign/tenant context
}

message FeedbackResponse {
  bool success = 1;
  string error = 2;
  common.Metadata metadata = 3;
}

message HandleOpsRequest {
  string op = 1; // e.g., "reload", "diagnostics", "stats"
  map<string, string> params = 2; // operation-specific parameters
  common.Metadata metadata = 3;   // for context, auth, etc.
  int64 campaign_id = 4; // campaign/tenant context
}

message HandleOpsResponse {
  bool success = 1;
  string message = 2;
  google.protobuf.Struct data = 3; // optional, operation-specific result
  common.Metadata metadata = 4;
}

message EventRequest {
  string event_id = 1; // Unique event identifier (new)
  string event_type = 2;
  string entity_id = 3;
  common.Metadata metadata = 4;
  int64 campaign_id = 5; // campaign/tenant context
  common.Payload payload = 6; // Canonical business data (see common/v1/payload.proto)
}

message EventResponse {
  bool success = 1;
  string event_id = 2; // Unique event identifier (new)
  string event_type = 3; // Canonical event type (new)
  string message = 4;
  common.Metadata metadata = 5;
  common.Payload payload = 6; // Canonical business data (see common/v1/payload.proto)
}

message SubscribeRequest {
  repeated string event_types = 1;
  common.Metadata metadata = 2;
  int64 campaign_id = 3; // campaign/tenant context
}

message Nexus {
  // ... existing fields ...
  int64 campaign_id = 10; // campaign/tenant context
  // ...
} 