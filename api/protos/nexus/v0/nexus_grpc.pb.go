// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.29.2
// source: api/protos/nexus/v0/nexus.proto

package nexuspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	NexusService_ExecutePattern_FullMethodName  = "/nexus.NexusService/ExecutePattern"
	NexusService_RegisterPattern_FullMethodName = "/nexus.NexusService/RegisterPattern"
	NexusService_GetKnowledge_FullMethodName    = "/nexus.NexusService/GetKnowledge"
)

// NexusServiceClient is the client API for NexusService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NexusServiceClient interface {
	// ExecutePattern executes a registered pattern
	ExecutePattern(ctx context.Context, in *ExecutePatternRequest, opts ...grpc.CallOption) (*ExecutePatternResponse, error)
	// RegisterPattern registers a new pattern
	RegisterPattern(ctx context.Context, in *RegisterPatternRequest, opts ...grpc.CallOption) (*RegisterPatternResponse, error)
	// GetKnowledge retrieves knowledge from the graph
	GetKnowledge(ctx context.Context, in *GetKnowledgeRequest, opts ...grpc.CallOption) (*GetKnowledgeResponse, error)
}

type nexusServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNexusServiceClient(cc grpc.ClientConnInterface) NexusServiceClient {
	return &nexusServiceClient{cc}
}

func (c *nexusServiceClient) ExecutePattern(ctx context.Context, in *ExecutePatternRequest, opts ...grpc.CallOption) (*ExecutePatternResponse, error) {
	out := new(ExecutePatternResponse)
	err := c.cc.Invoke(ctx, NexusService_ExecutePattern_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusServiceClient) RegisterPattern(ctx context.Context, in *RegisterPatternRequest, opts ...grpc.CallOption) (*RegisterPatternResponse, error) {
	out := new(RegisterPatternResponse)
	err := c.cc.Invoke(ctx, NexusService_RegisterPattern_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexusServiceClient) GetKnowledge(ctx context.Context, in *GetKnowledgeRequest, opts ...grpc.CallOption) (*GetKnowledgeResponse, error) {
	out := new(GetKnowledgeResponse)
	err := c.cc.Invoke(ctx, NexusService_GetKnowledge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NexusServiceServer is the server API for NexusService service.
// All implementations must embed UnimplementedNexusServiceServer
// for forward compatibility
type NexusServiceServer interface {
	// ExecutePattern executes a registered pattern
	ExecutePattern(context.Context, *ExecutePatternRequest) (*ExecutePatternResponse, error)
	// RegisterPattern registers a new pattern
	RegisterPattern(context.Context, *RegisterPatternRequest) (*RegisterPatternResponse, error)
	// GetKnowledge retrieves knowledge from the graph
	GetKnowledge(context.Context, *GetKnowledgeRequest) (*GetKnowledgeResponse, error)
	mustEmbedUnimplementedNexusServiceServer()
}

// UnimplementedNexusServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNexusServiceServer struct {
}

func (UnimplementedNexusServiceServer) ExecutePattern(context.Context, *ExecutePatternRequest) (*ExecutePatternResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecutePattern not implemented")
}
func (UnimplementedNexusServiceServer) RegisterPattern(context.Context, *RegisterPatternRequest) (*RegisterPatternResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterPattern not implemented")
}
func (UnimplementedNexusServiceServer) GetKnowledge(context.Context, *GetKnowledgeRequest) (*GetKnowledgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKnowledge not implemented")
}
func (UnimplementedNexusServiceServer) mustEmbedUnimplementedNexusServiceServer() {}

// UnsafeNexusServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NexusServiceServer will
// result in compilation errors.
type UnsafeNexusServiceServer interface {
	mustEmbedUnimplementedNexusServiceServer()
}

func RegisterNexusServiceServer(s grpc.ServiceRegistrar, srv NexusServiceServer) {
	s.RegisterService(&NexusService_ServiceDesc, srv)
}

func _NexusService_ExecutePattern_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecutePatternRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusServiceServer).ExecutePattern(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NexusService_ExecutePattern_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusServiceServer).ExecutePattern(ctx, req.(*ExecutePatternRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NexusService_RegisterPattern_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterPatternRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusServiceServer).RegisterPattern(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NexusService_RegisterPattern_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusServiceServer).RegisterPattern(ctx, req.(*RegisterPatternRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NexusService_GetKnowledge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKnowledgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexusServiceServer).GetKnowledge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NexusService_GetKnowledge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexusServiceServer).GetKnowledge(ctx, req.(*GetKnowledgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NexusService_ServiceDesc is the grpc.ServiceDesc for NexusService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NexusService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nexus.NexusService",
	HandlerType: (*NexusServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecutePattern",
			Handler:    _NexusService_ExecutePattern_Handler,
		},
		{
			MethodName: "RegisterPattern",
			Handler:    _NexusService_RegisterPattern_Handler,
		},
		{
			MethodName: "GetKnowledge",
			Handler:    _NexusService_GetKnowledge_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/protos/nexus/v0/nexus.proto",
}
