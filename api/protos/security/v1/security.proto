// SecurityService proto
// See docs/services/security.md for full documentation and
// separation from User Service.
syntax = "proto3";

package security.v1;

import "common/v1/metadata.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/nmxmxh/master-ovasabi/api/protos/security";

service SecurityService {
  rpc Authenticate(AuthenticateRequest) returns (AuthenticateResponse);
  rpc Authorize(AuthorizeRequest) returns (AuthorizeResponse);
  rpc IssueSecret(IssueSecretRequest) returns (IssueSecretResponse);
  rpc ValidateCredential(ValidateCredentialRequest)
      returns (ValidateCredentialResponse);
  rpc QueryEvents(QueryEventsRequest) returns (QueryEventsResponse);
  rpc GetPolicy(GetPolicyRequest) returns (GetPolicyResponse);
  rpc SetPolicy(SetPolicyRequest) returns (SetPolicyResponse);
  // Enhanced monitoring and threat detection
  rpc DetectThreats(DetectThreatsRequest)
      returns (DetectThreatsResponse);
  rpc AuditEvent(AuditEventRequest) returns (AuditEventResponse);
}

message AuthenticateRequest {
  string principal_id = 1; // service, workload, device, etc.
  string credential = 2;   // token, cert, etc.
  common.Metadata metadata = 3;
}

message AuthenticateResponse {
  string session_token = 1;
  google.protobuf.Timestamp expires_at = 2;
  common.Metadata metadata = 3;
}

message AuthorizeRequest {
  string principal_id = 1;
  string action = 2;
  string resource = 3;
  common.Metadata metadata = 4;
}

message AuthorizeResponse {
  bool allowed = 1;
  string reason = 2;
  common.Metadata metadata = 3;
}

message IssueSecretRequest {
  string principal_id = 1;
  string secret_type = 2; // api_key, jwt, cert, svid, etc.
  common.Metadata metadata = 3;
}

message IssueSecretResponse {
  string secret = 1;
  google.protobuf.Timestamp expires_at = 2;
  common.Metadata metadata = 3;
}

message ValidateCredentialRequest {
  string credential = 1;
  string type = 2; // jwt, cert, svid, etc.
  common.Metadata metadata = 3;
}

message ValidateCredentialResponse {
  bool valid = 1;
  string principal_id = 2;
  google.protobuf.Timestamp expires_at = 3;
  common.Metadata metadata = 4;
}

message QueryEventsRequest {
  string principal_id = 1;
  string event_type = 2;
  google.protobuf.Timestamp from = 3;
  google.protobuf.Timestamp to = 4;
  common.Metadata metadata = 5;
}

message QueryEventsResponse {
  repeated SecurityEvent events = 1;
  common.Metadata metadata = 2;
}

message SecurityEvent {
  string id = 1;
  string principal_id = 2;
  string event_type = 3;
  string resource = 4;
  string action = 5;
  google.protobuf.Timestamp timestamp = 6;
  google.protobuf.Struct details = 7;
}

message GetPolicyRequest {
  string policy_id = 1;
  common.Metadata metadata = 2;
}

message GetPolicyResponse {
  string policy = 1; // policy as code (YAML, Rego, etc.)
  common.Metadata metadata = 2;
}

message SetPolicyRequest {
  string policy_id = 1;
  string policy = 2;
  common.Metadata metadata = 3;
}

message SetPolicyResponse {
  bool success = 1;
  string error = 2;
  common.Metadata metadata = 3;
}

// Threat detection and audit event messages
message DetectThreatsRequest {
  string principal_id = 1;
  string context_type = 2; // e.g., login, api_call, pattern_exec
  common.Metadata metadata = 3; // signals, device, location, etc.
}
message DetectThreatsResponse {
  repeated ThreatSignal threats = 1;
  common.Metadata metadata = 2;
}
message ThreatSignal {
  string type = 1; // e.g., anomaly, bad_actor, escalation
  string description = 2;
  double score = 3;
  common.Metadata metadata = 4;
}

message AuditEventRequest {
  string event_type = 1;
  string principal_id = 2;
  string resource = 3;
  string action = 4;
  common.Metadata metadata = 5; // full audit context
}
message AuditEventResponse {
  bool success = 1;
  string error = 2;
  common.Metadata metadata = 3;
}
