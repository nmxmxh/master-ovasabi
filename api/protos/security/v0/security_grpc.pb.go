// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: api/protos/security/v0/security.proto

package v0

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SecurityService_Authenticate_FullMethodName            = "/security.v0.SecurityService/Authenticate"
	SecurityService_Authorize_FullMethodName               = "/security.v0.SecurityService/Authorize"
	SecurityService_ValidateToken_FullMethodName           = "/security.v0.SecurityService/ValidateToken"
	SecurityService_DetectThreats_FullMethodName           = "/security.v0.SecurityService/DetectThreats"
	SecurityService_ReportIncident_FullMethodName          = "/security.v0.SecurityService/ReportIncident"
	SecurityService_RegisterSecurityPattern_FullMethodName = "/security.v0.SecurityService/RegisterSecurityPattern"
	SecurityService_ValidatePattern_FullMethodName         = "/security.v0.SecurityService/ValidatePattern"
	SecurityService_RecordAuditEvent_FullMethodName        = "/security.v0.SecurityService/RecordAuditEvent"
	SecurityService_GetAuditLog_FullMethodName             = "/security.v0.SecurityService/GetAuditLog"
	SecurityService_GetSecurityMetrics_FullMethodName      = "/security.v0.SecurityService/GetSecurityMetrics"
)

// SecurityServiceClient is the client API for SecurityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SecurityServiceClient interface {
	// Identity and Access Management
	Authenticate(ctx context.Context, in *AuthenticationRequest, opts ...grpc.CallOption) (*AuthenticationResponse, error)
	Authorize(ctx context.Context, in *AuthorizationRequest, opts ...grpc.CallOption) (*AuthorizationResponse, error)
	ValidateToken(ctx context.Context, in *TokenValidationRequest, opts ...grpc.CallOption) (*TokenValidationResponse, error)
	// Threat Detection
	DetectThreats(ctx context.Context, in *ThreatDetectionRequest, opts ...grpc.CallOption) (*ThreatDetectionResponse, error)
	ReportIncident(ctx context.Context, in *IncidentReport, opts ...grpc.CallOption) (*IncidentResponse, error)
	// Security Pattern Management
	RegisterSecurityPattern(ctx context.Context, in *SecurityPattern, opts ...grpc.CallOption) (*PatternRegistrationResponse, error)
	ValidatePattern(ctx context.Context, in *PatternValidationRequest, opts ...grpc.CallOption) (*PatternValidationResponse, error)
	// Audit and Compliance
	RecordAuditEvent(ctx context.Context, in *AuditEvent, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetAuditLog(ctx context.Context, in *AuditLogRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[AuditLogEntry], error)
	// Security Metrics
	GetSecurityMetrics(ctx context.Context, in *SecurityMetricsRequest, opts ...grpc.CallOption) (*SecurityMetricsResponse, error)
}

type securityServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSecurityServiceClient(cc grpc.ClientConnInterface) SecurityServiceClient {
	return &securityServiceClient{cc}
}

func (c *securityServiceClient) Authenticate(ctx context.Context, in *AuthenticationRequest, opts ...grpc.CallOption) (*AuthenticationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthenticationResponse)
	err := c.cc.Invoke(ctx, SecurityService_Authenticate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityServiceClient) Authorize(ctx context.Context, in *AuthorizationRequest, opts ...grpc.CallOption) (*AuthorizationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthorizationResponse)
	err := c.cc.Invoke(ctx, SecurityService_Authorize_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityServiceClient) ValidateToken(ctx context.Context, in *TokenValidationRequest, opts ...grpc.CallOption) (*TokenValidationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TokenValidationResponse)
	err := c.cc.Invoke(ctx, SecurityService_ValidateToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityServiceClient) DetectThreats(ctx context.Context, in *ThreatDetectionRequest, opts ...grpc.CallOption) (*ThreatDetectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ThreatDetectionResponse)
	err := c.cc.Invoke(ctx, SecurityService_DetectThreats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityServiceClient) ReportIncident(ctx context.Context, in *IncidentReport, opts ...grpc.CallOption) (*IncidentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IncidentResponse)
	err := c.cc.Invoke(ctx, SecurityService_ReportIncident_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityServiceClient) RegisterSecurityPattern(ctx context.Context, in *SecurityPattern, opts ...grpc.CallOption) (*PatternRegistrationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PatternRegistrationResponse)
	err := c.cc.Invoke(ctx, SecurityService_RegisterSecurityPattern_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityServiceClient) ValidatePattern(ctx context.Context, in *PatternValidationRequest, opts ...grpc.CallOption) (*PatternValidationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PatternValidationResponse)
	err := c.cc.Invoke(ctx, SecurityService_ValidatePattern_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityServiceClient) RecordAuditEvent(ctx context.Context, in *AuditEvent, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SecurityService_RecordAuditEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securityServiceClient) GetAuditLog(ctx context.Context, in *AuditLogRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[AuditLogEntry], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SecurityService_ServiceDesc.Streams[0], SecurityService_GetAuditLog_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[AuditLogRequest, AuditLogEntry]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SecurityService_GetAuditLogClient = grpc.ServerStreamingClient[AuditLogEntry]

func (c *securityServiceClient) GetSecurityMetrics(ctx context.Context, in *SecurityMetricsRequest, opts ...grpc.CallOption) (*SecurityMetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SecurityMetricsResponse)
	err := c.cc.Invoke(ctx, SecurityService_GetSecurityMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SecurityServiceServer is the server API for SecurityService service.
// All implementations must embed UnimplementedSecurityServiceServer
// for forward compatibility.
type SecurityServiceServer interface {
	// Identity and Access Management
	Authenticate(context.Context, *AuthenticationRequest) (*AuthenticationResponse, error)
	Authorize(context.Context, *AuthorizationRequest) (*AuthorizationResponse, error)
	ValidateToken(context.Context, *TokenValidationRequest) (*TokenValidationResponse, error)
	// Threat Detection
	DetectThreats(context.Context, *ThreatDetectionRequest) (*ThreatDetectionResponse, error)
	ReportIncident(context.Context, *IncidentReport) (*IncidentResponse, error)
	// Security Pattern Management
	RegisterSecurityPattern(context.Context, *SecurityPattern) (*PatternRegistrationResponse, error)
	ValidatePattern(context.Context, *PatternValidationRequest) (*PatternValidationResponse, error)
	// Audit and Compliance
	RecordAuditEvent(context.Context, *AuditEvent) (*emptypb.Empty, error)
	GetAuditLog(*AuditLogRequest, grpc.ServerStreamingServer[AuditLogEntry]) error
	// Security Metrics
	GetSecurityMetrics(context.Context, *SecurityMetricsRequest) (*SecurityMetricsResponse, error)
	mustEmbedUnimplementedSecurityServiceServer()
}

// UnimplementedSecurityServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSecurityServiceServer struct{}

func (UnimplementedSecurityServiceServer) Authenticate(context.Context, *AuthenticationRequest) (*AuthenticationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authenticate not implemented")
}
func (UnimplementedSecurityServiceServer) Authorize(context.Context, *AuthorizationRequest) (*AuthorizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authorize not implemented")
}
func (UnimplementedSecurityServiceServer) ValidateToken(context.Context, *TokenValidationRequest) (*TokenValidationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateToken not implemented")
}
func (UnimplementedSecurityServiceServer) DetectThreats(context.Context, *ThreatDetectionRequest) (*ThreatDetectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetectThreats not implemented")
}
func (UnimplementedSecurityServiceServer) ReportIncident(context.Context, *IncidentReport) (*IncidentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportIncident not implemented")
}
func (UnimplementedSecurityServiceServer) RegisterSecurityPattern(context.Context, *SecurityPattern) (*PatternRegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterSecurityPattern not implemented")
}
func (UnimplementedSecurityServiceServer) ValidatePattern(context.Context, *PatternValidationRequest) (*PatternValidationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatePattern not implemented")
}
func (UnimplementedSecurityServiceServer) RecordAuditEvent(context.Context, *AuditEvent) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordAuditEvent not implemented")
}
func (UnimplementedSecurityServiceServer) GetAuditLog(*AuditLogRequest, grpc.ServerStreamingServer[AuditLogEntry]) error {
	return status.Errorf(codes.Unimplemented, "method GetAuditLog not implemented")
}
func (UnimplementedSecurityServiceServer) GetSecurityMetrics(context.Context, *SecurityMetricsRequest) (*SecurityMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecurityMetrics not implemented")
}
func (UnimplementedSecurityServiceServer) mustEmbedUnimplementedSecurityServiceServer() {}
func (UnimplementedSecurityServiceServer) testEmbeddedByValue()                         {}

// UnsafeSecurityServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SecurityServiceServer will
// result in compilation errors.
type UnsafeSecurityServiceServer interface {
	mustEmbedUnimplementedSecurityServiceServer()
}

func RegisterSecurityServiceServer(s grpc.ServiceRegistrar, srv SecurityServiceServer) {
	// If the following call pancis, it indicates UnimplementedSecurityServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SecurityService_ServiceDesc, srv)
}

func _SecurityService_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityServiceServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityService_Authenticate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityServiceServer).Authenticate(ctx, req.(*AuthenticationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityService_Authorize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityServiceServer).Authorize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityService_Authorize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityServiceServer).Authorize(ctx, req.(*AuthorizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityService_ValidateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenValidationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityServiceServer).ValidateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityService_ValidateToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityServiceServer).ValidateToken(ctx, req.(*TokenValidationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityService_DetectThreats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThreatDetectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityServiceServer).DetectThreats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityService_DetectThreats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityServiceServer).DetectThreats(ctx, req.(*ThreatDetectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityService_ReportIncident_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncidentReport)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityServiceServer).ReportIncident(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityService_ReportIncident_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityServiceServer).ReportIncident(ctx, req.(*IncidentReport))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityService_RegisterSecurityPattern_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecurityPattern)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityServiceServer).RegisterSecurityPattern(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityService_RegisterSecurityPattern_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityServiceServer).RegisterSecurityPattern(ctx, req.(*SecurityPattern))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityService_ValidatePattern_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatternValidationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityServiceServer).ValidatePattern(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityService_ValidatePattern_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityServiceServer).ValidatePattern(ctx, req.(*PatternValidationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityService_RecordAuditEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuditEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityServiceServer).RecordAuditEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityService_RecordAuditEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityServiceServer).RecordAuditEvent(ctx, req.(*AuditEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecurityService_GetAuditLog_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AuditLogRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SecurityServiceServer).GetAuditLog(m, &grpc.GenericServerStream[AuditLogRequest, AuditLogEntry]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SecurityService_GetAuditLogServer = grpc.ServerStreamingServer[AuditLogEntry]

func _SecurityService_GetSecurityMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecurityMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecurityServiceServer).GetSecurityMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecurityService_GetSecurityMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecurityServiceServer).GetSecurityMetrics(ctx, req.(*SecurityMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SecurityService_ServiceDesc is the grpc.ServiceDesc for SecurityService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SecurityService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "security.v0.SecurityService",
	HandlerType: (*SecurityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authenticate",
			Handler:    _SecurityService_Authenticate_Handler,
		},
		{
			MethodName: "Authorize",
			Handler:    _SecurityService_Authorize_Handler,
		},
		{
			MethodName: "ValidateToken",
			Handler:    _SecurityService_ValidateToken_Handler,
		},
		{
			MethodName: "DetectThreats",
			Handler:    _SecurityService_DetectThreats_Handler,
		},
		{
			MethodName: "ReportIncident",
			Handler:    _SecurityService_ReportIncident_Handler,
		},
		{
			MethodName: "RegisterSecurityPattern",
			Handler:    _SecurityService_RegisterSecurityPattern_Handler,
		},
		{
			MethodName: "ValidatePattern",
			Handler:    _SecurityService_ValidatePattern_Handler,
		},
		{
			MethodName: "RecordAuditEvent",
			Handler:    _SecurityService_RecordAuditEvent_Handler,
		},
		{
			MethodName: "GetSecurityMetrics",
			Handler:    _SecurityService_GetSecurityMetrics_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAuditLog",
			Handler:       _SecurityService_GetAuditLog_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/protos/security/v0/security.proto",
}
