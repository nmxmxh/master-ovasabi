// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v5.29.3
// source: common/v1/patterns.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Struct } from "../../google/protobuf/struct";
import { Metadata } from "./metadata";
import { Payload } from "./payload";

export const protobufPackage = "common";

export interface IntegrationPattern {
  id: string;
  version: string;
  description: string;
  steps: PatternStep[];
  metadata?: Metadata | undefined;
  payload?: Payload | undefined;
}

/** PatternStep represents a single action within an IntegrationPattern. */
export interface PatternStep {
  type: string;
  action: string;
  parameters?: { [key: string]: any } | undefined;
  dependsOns: string[];
}

function createBaseIntegrationPattern(): IntegrationPattern {
  return { id: "", version: "", description: "", steps: [], metadata: undefined, payload: undefined };
}

export const IntegrationPattern: MessageFns<IntegrationPattern> = {
  encode(message: IntegrationPattern, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.version !== "") {
      writer.uint32(18).string(message.version);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    for (const v of message.steps) {
      PatternStep.encode(v!, writer.uint32(34).fork()).join();
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(42).fork()).join();
    }
    if (message.payload !== undefined) {
      Payload.encode(message.payload, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IntegrationPattern {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIntegrationPattern();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.version = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.steps.push(PatternStep.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.payload = Payload.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IntegrationPattern {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      version: isSet(object.version) ? globalThis.String(object.version) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      steps: globalThis.Array.isArray(object?.steps) ? object.steps.map((e: any) => PatternStep.fromJSON(e)) : [],
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
      payload: isSet(object.payload) ? Payload.fromJSON(object.payload) : undefined,
    };
  },

  toJSON(message: IntegrationPattern): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.version !== "") {
      obj.version = message.version;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.steps?.length) {
      obj.steps = message.steps.map((e) => PatternStep.toJSON(e));
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    if (message.payload !== undefined) {
      obj.payload = Payload.toJSON(message.payload);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<IntegrationPattern>, I>>(base?: I): IntegrationPattern {
    return IntegrationPattern.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IntegrationPattern>, I>>(object: I): IntegrationPattern {
    const message = createBaseIntegrationPattern();
    message.id = object.id ?? "";
    message.version = object.version ?? "";
    message.description = object.description ?? "";
    message.steps = object.steps?.map((e) => PatternStep.fromPartial(e)) || [];
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    message.payload = (object.payload !== undefined && object.payload !== null)
      ? Payload.fromPartial(object.payload)
      : undefined;
    return message;
  },
};

function createBasePatternStep(): PatternStep {
  return { type: "", action: "", parameters: undefined, dependsOns: [] };
}

export const PatternStep: MessageFns<PatternStep> = {
  encode(message: PatternStep, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== "") {
      writer.uint32(10).string(message.type);
    }
    if (message.action !== "") {
      writer.uint32(18).string(message.action);
    }
    if (message.parameters !== undefined) {
      Struct.encode(Struct.wrap(message.parameters), writer.uint32(26).fork()).join();
    }
    for (const v of message.dependsOns) {
      writer.uint32(34).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PatternStep {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePatternStep();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.action = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.parameters = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.dependsOns.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PatternStep {
    return {
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      action: isSet(object.action) ? globalThis.String(object.action) : "",
      parameters: isObject(object.parameters) ? object.parameters : undefined,
      dependsOns: globalThis.Array.isArray(object?.dependsOns)
        ? object.dependsOns.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: PatternStep): unknown {
    const obj: any = {};
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.action !== "") {
      obj.action = message.action;
    }
    if (message.parameters !== undefined) {
      obj.parameters = message.parameters;
    }
    if (message.dependsOns?.length) {
      obj.dependsOns = message.dependsOns;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PatternStep>, I>>(base?: I): PatternStep {
    return PatternStep.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PatternStep>, I>>(object: I): PatternStep {
    const message = createBasePatternStep();
    message.type = object.type ?? "";
    message.action = object.action ?? "";
    message.parameters = object.parameters ?? undefined;
    message.dependsOns = object.dependsOns?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
