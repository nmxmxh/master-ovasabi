// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v5.29.3
// source: common/v1/orchestration.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Any } from "../../google/protobuf/any";
import { Timestamp } from "../../google/protobuf/timestamp";
import { Metadata } from "./metadata";
import { Payload } from "./payload";

export const protobufPackage = "common";

/** The canonical envelope for all orchestration events. */
export interface OrchestrationEvent {
  /** "orchestration.error" or "orchestration.success" */
  type: string;
  orchestration?:
    | OrchestrationPayload
    | undefined;
  /** Envelope version for evolution */
  version: string;
  /** Canonical, extensible payload for event-specific data */
  payload?: Payload | undefined;
}

/** The payload for orchestration events. */
export interface OrchestrationPayload {
  /** e.g., "INTERNAL", "OK" */
  code: string;
  message: string;
  /** Canonical, versioned metadata */
  metadata?:
    | Metadata
    | undefined;
  /** "yin" (error) or "yang" (success) */
  yinYang: string;
  correlationId: string;
  service: string;
  entityId: string;
  timestamp?:
    | Date
    | undefined;
  /** e.g., "prod", "staging" */
  environment: string;
  /** User or system actor */
  actorId: string;
  /** For tracing */
  requestId: string;
  /** For analytics, routing, etc. */
  tags: string[];
  /** For future extensibility (e.g., custom payloads) */
  extra?: Any | undefined;
}

function createBaseOrchestrationEvent(): OrchestrationEvent {
  return { type: "", orchestration: undefined, version: "", payload: undefined };
}

export const OrchestrationEvent: MessageFns<OrchestrationEvent> = {
  encode(message: OrchestrationEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== "") {
      writer.uint32(10).string(message.type);
    }
    if (message.orchestration !== undefined) {
      OrchestrationPayload.encode(message.orchestration, writer.uint32(18).fork()).join();
    }
    if (message.version !== "") {
      writer.uint32(26).string(message.version);
    }
    if (message.payload !== undefined) {
      Payload.encode(message.payload, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OrchestrationEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOrchestrationEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.orchestration = OrchestrationPayload.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.version = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.payload = Payload.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OrchestrationEvent {
    return {
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      orchestration: isSet(object.orchestration) ? OrchestrationPayload.fromJSON(object.orchestration) : undefined,
      version: isSet(object.version) ? globalThis.String(object.version) : "",
      payload: isSet(object.payload) ? Payload.fromJSON(object.payload) : undefined,
    };
  },

  toJSON(message: OrchestrationEvent): unknown {
    const obj: any = {};
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.orchestration !== undefined) {
      obj.orchestration = OrchestrationPayload.toJSON(message.orchestration);
    }
    if (message.version !== "") {
      obj.version = message.version;
    }
    if (message.payload !== undefined) {
      obj.payload = Payload.toJSON(message.payload);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OrchestrationEvent>, I>>(base?: I): OrchestrationEvent {
    return OrchestrationEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OrchestrationEvent>, I>>(object: I): OrchestrationEvent {
    const message = createBaseOrchestrationEvent();
    message.type = object.type ?? "";
    message.orchestration = (object.orchestration !== undefined && object.orchestration !== null)
      ? OrchestrationPayload.fromPartial(object.orchestration)
      : undefined;
    message.version = object.version ?? "";
    message.payload = (object.payload !== undefined && object.payload !== null)
      ? Payload.fromPartial(object.payload)
      : undefined;
    return message;
  },
};

function createBaseOrchestrationPayload(): OrchestrationPayload {
  return {
    code: "",
    message: "",
    metadata: undefined,
    yinYang: "",
    correlationId: "",
    service: "",
    entityId: "",
    timestamp: undefined,
    environment: "",
    actorId: "",
    requestId: "",
    tags: [],
    extra: undefined,
  };
}

export const OrchestrationPayload: MessageFns<OrchestrationPayload> = {
  encode(message: OrchestrationPayload, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== "") {
      writer.uint32(10).string(message.code);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(26).fork()).join();
    }
    if (message.yinYang !== "") {
      writer.uint32(34).string(message.yinYang);
    }
    if (message.correlationId !== "") {
      writer.uint32(42).string(message.correlationId);
    }
    if (message.service !== "") {
      writer.uint32(50).string(message.service);
    }
    if (message.entityId !== "") {
      writer.uint32(58).string(message.entityId);
    }
    if (message.timestamp !== undefined) {
      Timestamp.encode(toTimestamp(message.timestamp), writer.uint32(66).fork()).join();
    }
    if (message.environment !== "") {
      writer.uint32(74).string(message.environment);
    }
    if (message.actorId !== "") {
      writer.uint32(82).string(message.actorId);
    }
    if (message.requestId !== "") {
      writer.uint32(90).string(message.requestId);
    }
    for (const v of message.tags) {
      writer.uint32(98).string(v!);
    }
    if (message.extra !== undefined) {
      Any.encode(message.extra, writer.uint32(106).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OrchestrationPayload {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOrchestrationPayload();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.code = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.yinYang = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.correlationId = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.service = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.entityId = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.timestamp = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.environment = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.actorId = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.requestId = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.tags.push(reader.string());
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.extra = Any.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OrchestrationPayload {
    return {
      code: isSet(object.code) ? globalThis.String(object.code) : "",
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
      yinYang: isSet(object.yinYang) ? globalThis.String(object.yinYang) : "",
      correlationId: isSet(object.correlationId) ? globalThis.String(object.correlationId) : "",
      service: isSet(object.service) ? globalThis.String(object.service) : "",
      entityId: isSet(object.entityId) ? globalThis.String(object.entityId) : "",
      timestamp: isSet(object.timestamp) ? fromJsonTimestamp(object.timestamp) : undefined,
      environment: isSet(object.environment) ? globalThis.String(object.environment) : "",
      actorId: isSet(object.actorId) ? globalThis.String(object.actorId) : "",
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
      tags: globalThis.Array.isArray(object?.tags) ? object.tags.map((e: any) => globalThis.String(e)) : [],
      extra: isSet(object.extra) ? Any.fromJSON(object.extra) : undefined,
    };
  },

  toJSON(message: OrchestrationPayload): unknown {
    const obj: any = {};
    if (message.code !== "") {
      obj.code = message.code;
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    if (message.yinYang !== "") {
      obj.yinYang = message.yinYang;
    }
    if (message.correlationId !== "") {
      obj.correlationId = message.correlationId;
    }
    if (message.service !== "") {
      obj.service = message.service;
    }
    if (message.entityId !== "") {
      obj.entityId = message.entityId;
    }
    if (message.timestamp !== undefined) {
      obj.timestamp = message.timestamp.toISOString();
    }
    if (message.environment !== "") {
      obj.environment = message.environment;
    }
    if (message.actorId !== "") {
      obj.actorId = message.actorId;
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.tags?.length) {
      obj.tags = message.tags;
    }
    if (message.extra !== undefined) {
      obj.extra = Any.toJSON(message.extra);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OrchestrationPayload>, I>>(base?: I): OrchestrationPayload {
    return OrchestrationPayload.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OrchestrationPayload>, I>>(object: I): OrchestrationPayload {
    const message = createBaseOrchestrationPayload();
    message.code = object.code ?? "";
    message.message = object.message ?? "";
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    message.yinYang = object.yinYang ?? "";
    message.correlationId = object.correlationId ?? "";
    message.service = object.service ?? "";
    message.entityId = object.entityId ?? "";
    message.timestamp = object.timestamp ?? undefined;
    message.environment = object.environment ?? "";
    message.actorId = object.actorId ?? "";
    message.requestId = object.requestId ?? "";
    message.tags = object.tags?.map((e) => e) || [];
    message.extra = (object.extra !== undefined && object.extra !== null) ? Any.fromPartial(object.extra) : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000).toString();
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (globalThis.Number(t.seconds) || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
