// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v5.29.3
// source: common/v1/entity.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Metadata } from "./metadata";

export const protobufPackage = "common";

/** EntityType categorizes real-world/conceptual objects */
export enum EntityType {
  ENTITY_TYPE_UNSPECIFIED = 0,
  /** ENTITY_TYPE_PERSON - Core semantic types */
  ENTITY_TYPE_PERSON = 1,
  ENTITY_TYPE_ORGANIZATION = 2,
  ENTITY_TYPE_LOCATION = 3,
  ENTITY_TYPE_EVENT = 4,
  /** ENTITY_TYPE_TECHNOLOGY - Domain-specific */
  ENTITY_TYPE_TECHNOLOGY = 5,
  /** ENTITY_TYPE_METHODOLOGY - e.g., "Federated Learning" */
  ENTITY_TYPE_METHODOLOGY = 6,
  /** ENTITY_TYPE_ARTIFACT - e.g., "PDF Document", "Video Stream" */
  ENTITY_TYPE_ARTIFACT = 7,
  /** ENTITY_TYPE_CONCEPT - Abstract concepts */
  ENTITY_TYPE_CONCEPT = 8,
  /** ENTITY_TYPE_MEASUREMENT - e.g., "Throughput", "Latency" */
  ENTITY_TYPE_MEASUREMENT = 9,
  UNRECOGNIZED = -1,
}

export function entityTypeFromJSON(object: any): EntityType {
  switch (object) {
    case 0:
    case "ENTITY_TYPE_UNSPECIFIED":
      return EntityType.ENTITY_TYPE_UNSPECIFIED;
    case 1:
    case "ENTITY_TYPE_PERSON":
      return EntityType.ENTITY_TYPE_PERSON;
    case 2:
    case "ENTITY_TYPE_ORGANIZATION":
      return EntityType.ENTITY_TYPE_ORGANIZATION;
    case 3:
    case "ENTITY_TYPE_LOCATION":
      return EntityType.ENTITY_TYPE_LOCATION;
    case 4:
    case "ENTITY_TYPE_EVENT":
      return EntityType.ENTITY_TYPE_EVENT;
    case 5:
    case "ENTITY_TYPE_TECHNOLOGY":
      return EntityType.ENTITY_TYPE_TECHNOLOGY;
    case 6:
    case "ENTITY_TYPE_METHODOLOGY":
      return EntityType.ENTITY_TYPE_METHODOLOGY;
    case 7:
    case "ENTITY_TYPE_ARTIFACT":
      return EntityType.ENTITY_TYPE_ARTIFACT;
    case 8:
    case "ENTITY_TYPE_CONCEPT":
      return EntityType.ENTITY_TYPE_CONCEPT;
    case 9:
    case "ENTITY_TYPE_MEASUREMENT":
      return EntityType.ENTITY_TYPE_MEASUREMENT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return EntityType.UNRECOGNIZED;
  }
}

export function entityTypeToJSON(object: EntityType): string {
  switch (object) {
    case EntityType.ENTITY_TYPE_UNSPECIFIED:
      return "ENTITY_TYPE_UNSPECIFIED";
    case EntityType.ENTITY_TYPE_PERSON:
      return "ENTITY_TYPE_PERSON";
    case EntityType.ENTITY_TYPE_ORGANIZATION:
      return "ENTITY_TYPE_ORGANIZATION";
    case EntityType.ENTITY_TYPE_LOCATION:
      return "ENTITY_TYPE_LOCATION";
    case EntityType.ENTITY_TYPE_EVENT:
      return "ENTITY_TYPE_EVENT";
    case EntityType.ENTITY_TYPE_TECHNOLOGY:
      return "ENTITY_TYPE_TECHNOLOGY";
    case EntityType.ENTITY_TYPE_METHODOLOGY:
      return "ENTITY_TYPE_METHODOLOGY";
    case EntityType.ENTITY_TYPE_ARTIFACT:
      return "ENTITY_TYPE_ARTIFACT";
    case EntityType.ENTITY_TYPE_CONCEPT:
      return "ENTITY_TYPE_CONCEPT";
    case EntityType.ENTITY_TYPE_MEASUREMENT:
      return "ENTITY_TYPE_MEASUREMENT";
    case EntityType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Core relationship definition for knowledge graph */
export interface Relation {
  /** "related", "child", "similar", etc. */
  type: string;
  /** URI reference to other entity */
  targetUri: string;
  /** Relationship confidence (0.0-1.0) */
  strength: number;
  /** Unix timestamp for GC */
  lastUpdated: string;
}

/** Entity represents a distinct real-world/conceptual object */
export interface Entity {
  /** Canonical name (e.g., "Robert Martin") */
  name: string;
  /** Entity classification */
  type: EntityType;
  /** Contextual variants (e.g., "Uncle Bob", "Robert C. Martin") */
  aliases: string[];
  /** Confidence score (0.0-1.0) */
  confidence: number;
  occurrences: Entity_Occurrence[];
  /** Knowledge graph relationships */
  relations: Relation[];
  /** Cross-references */
  wikipediaId: string;
  wikidataId: string;
  /** Canonical entity URI */
  uri: string;
}

/** Provenance within source */
export interface Entity_Occurrence {
  /** URI of source document */
  sourceUri: string;
  /** Character position */
  startOffset: number;
  endOffset: number;
  /** e.g., "summary", "chunk3" */
  sourceField: string;
}

/** Lightweight reference for graph storage */
export interface Reference {
  /** Unique resource identifier */
  uri: string;
  /** Standard metadata */
  metadata?:
    | Metadata
    | undefined;
  /** Knowledge graph connections */
  relations: Relation[];
}

function createBaseRelation(): Relation {
  return { type: "", targetUri: "", strength: 0, lastUpdated: "0" };
}

export const Relation: MessageFns<Relation> = {
  encode(message: Relation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== "") {
      writer.uint32(10).string(message.type);
    }
    if (message.targetUri !== "") {
      writer.uint32(18).string(message.targetUri);
    }
    if (message.strength !== 0) {
      writer.uint32(29).float(message.strength);
    }
    if (message.lastUpdated !== "0") {
      writer.uint32(32).int64(message.lastUpdated);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Relation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRelation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.targetUri = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 29) {
            break;
          }

          message.strength = reader.float();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.lastUpdated = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Relation {
    return {
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      targetUri: isSet(object.targetUri) ? globalThis.String(object.targetUri) : "",
      strength: isSet(object.strength) ? globalThis.Number(object.strength) : 0,
      lastUpdated: isSet(object.lastUpdated) ? globalThis.String(object.lastUpdated) : "0",
    };
  },

  toJSON(message: Relation): unknown {
    const obj: any = {};
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.targetUri !== "") {
      obj.targetUri = message.targetUri;
    }
    if (message.strength !== 0) {
      obj.strength = message.strength;
    }
    if (message.lastUpdated !== "0") {
      obj.lastUpdated = message.lastUpdated;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Relation>, I>>(base?: I): Relation {
    return Relation.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Relation>, I>>(object: I): Relation {
    const message = createBaseRelation();
    message.type = object.type ?? "";
    message.targetUri = object.targetUri ?? "";
    message.strength = object.strength ?? 0;
    message.lastUpdated = object.lastUpdated ?? "0";
    return message;
  },
};

function createBaseEntity(): Entity {
  return {
    name: "",
    type: 0,
    aliases: [],
    confidence: 0,
    occurrences: [],
    relations: [],
    wikipediaId: "",
    wikidataId: "",
    uri: "",
  };
}

export const Entity: MessageFns<Entity> = {
  encode(message: Entity, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.type !== 0) {
      writer.uint32(16).int32(message.type);
    }
    for (const v of message.aliases) {
      writer.uint32(26).string(v!);
    }
    if (message.confidence !== 0) {
      writer.uint32(37).float(message.confidence);
    }
    for (const v of message.occurrences) {
      Entity_Occurrence.encode(v!, writer.uint32(42).fork()).join();
    }
    for (const v of message.relations) {
      Relation.encode(v!, writer.uint32(50).fork()).join();
    }
    if (message.wikipediaId !== "") {
      writer.uint32(58).string(message.wikipediaId);
    }
    if (message.wikidataId !== "") {
      writer.uint32(66).string(message.wikidataId);
    }
    if (message.uri !== "") {
      writer.uint32(74).string(message.uri);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Entity {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEntity();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.aliases.push(reader.string());
          continue;
        }
        case 4: {
          if (tag !== 37) {
            break;
          }

          message.confidence = reader.float();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.occurrences.push(Entity_Occurrence.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.relations.push(Relation.decode(reader, reader.uint32()));
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.wikipediaId = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.wikidataId = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.uri = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Entity {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      type: isSet(object.type) ? entityTypeFromJSON(object.type) : 0,
      aliases: globalThis.Array.isArray(object?.aliases) ? object.aliases.map((e: any) => globalThis.String(e)) : [],
      confidence: isSet(object.confidence) ? globalThis.Number(object.confidence) : 0,
      occurrences: globalThis.Array.isArray(object?.occurrences)
        ? object.occurrences.map((e: any) => Entity_Occurrence.fromJSON(e))
        : [],
      relations: globalThis.Array.isArray(object?.relations)
        ? object.relations.map((e: any) => Relation.fromJSON(e))
        : [],
      wikipediaId: isSet(object.wikipediaId) ? globalThis.String(object.wikipediaId) : "",
      wikidataId: isSet(object.wikidataId) ? globalThis.String(object.wikidataId) : "",
      uri: isSet(object.uri) ? globalThis.String(object.uri) : "",
    };
  },

  toJSON(message: Entity): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.type !== 0) {
      obj.type = entityTypeToJSON(message.type);
    }
    if (message.aliases?.length) {
      obj.aliases = message.aliases;
    }
    if (message.confidence !== 0) {
      obj.confidence = message.confidence;
    }
    if (message.occurrences?.length) {
      obj.occurrences = message.occurrences.map((e) => Entity_Occurrence.toJSON(e));
    }
    if (message.relations?.length) {
      obj.relations = message.relations.map((e) => Relation.toJSON(e));
    }
    if (message.wikipediaId !== "") {
      obj.wikipediaId = message.wikipediaId;
    }
    if (message.wikidataId !== "") {
      obj.wikidataId = message.wikidataId;
    }
    if (message.uri !== "") {
      obj.uri = message.uri;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Entity>, I>>(base?: I): Entity {
    return Entity.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Entity>, I>>(object: I): Entity {
    const message = createBaseEntity();
    message.name = object.name ?? "";
    message.type = object.type ?? 0;
    message.aliases = object.aliases?.map((e) => e) || [];
    message.confidence = object.confidence ?? 0;
    message.occurrences = object.occurrences?.map((e) => Entity_Occurrence.fromPartial(e)) || [];
    message.relations = object.relations?.map((e) => Relation.fromPartial(e)) || [];
    message.wikipediaId = object.wikipediaId ?? "";
    message.wikidataId = object.wikidataId ?? "";
    message.uri = object.uri ?? "";
    return message;
  },
};

function createBaseEntity_Occurrence(): Entity_Occurrence {
  return { sourceUri: "", startOffset: 0, endOffset: 0, sourceField: "" };
}

export const Entity_Occurrence: MessageFns<Entity_Occurrence> = {
  encode(message: Entity_Occurrence, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sourceUri !== "") {
      writer.uint32(10).string(message.sourceUri);
    }
    if (message.startOffset !== 0) {
      writer.uint32(16).int32(message.startOffset);
    }
    if (message.endOffset !== 0) {
      writer.uint32(24).int32(message.endOffset);
    }
    if (message.sourceField !== "") {
      writer.uint32(34).string(message.sourceField);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Entity_Occurrence {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEntity_Occurrence();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sourceUri = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.startOffset = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.endOffset = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.sourceField = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Entity_Occurrence {
    return {
      sourceUri: isSet(object.sourceUri) ? globalThis.String(object.sourceUri) : "",
      startOffset: isSet(object.startOffset) ? globalThis.Number(object.startOffset) : 0,
      endOffset: isSet(object.endOffset) ? globalThis.Number(object.endOffset) : 0,
      sourceField: isSet(object.sourceField) ? globalThis.String(object.sourceField) : "",
    };
  },

  toJSON(message: Entity_Occurrence): unknown {
    const obj: any = {};
    if (message.sourceUri !== "") {
      obj.sourceUri = message.sourceUri;
    }
    if (message.startOffset !== 0) {
      obj.startOffset = Math.round(message.startOffset);
    }
    if (message.endOffset !== 0) {
      obj.endOffset = Math.round(message.endOffset);
    }
    if (message.sourceField !== "") {
      obj.sourceField = message.sourceField;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Entity_Occurrence>, I>>(base?: I): Entity_Occurrence {
    return Entity_Occurrence.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Entity_Occurrence>, I>>(object: I): Entity_Occurrence {
    const message = createBaseEntity_Occurrence();
    message.sourceUri = object.sourceUri ?? "";
    message.startOffset = object.startOffset ?? 0;
    message.endOffset = object.endOffset ?? 0;
    message.sourceField = object.sourceField ?? "";
    return message;
  },
};

function createBaseReference(): Reference {
  return { uri: "", metadata: undefined, relations: [] };
}

export const Reference: MessageFns<Reference> = {
  encode(message: Reference, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.uri !== "") {
      writer.uint32(10).string(message.uri);
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(18).fork()).join();
    }
    for (const v of message.relations) {
      Relation.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Reference {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReference();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.uri = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.relations.push(Relation.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Reference {
    return {
      uri: isSet(object.uri) ? globalThis.String(object.uri) : "",
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
      relations: globalThis.Array.isArray(object?.relations)
        ? object.relations.map((e: any) => Relation.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Reference): unknown {
    const obj: any = {};
    if (message.uri !== "") {
      obj.uri = message.uri;
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    if (message.relations?.length) {
      obj.relations = message.relations.map((e) => Relation.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Reference>, I>>(base?: I): Reference {
    return Reference.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Reference>, I>>(object: I): Reference {
    const message = createBaseReference();
    message.uri = object.uri ?? "";
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    message.relations = object.relations?.map((e) => Relation.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
