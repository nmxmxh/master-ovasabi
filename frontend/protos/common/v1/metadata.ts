// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v5.29.3
// source: common/v1/metadata.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Struct } from "../../google/protobuf/struct";
import { Timestamp } from "../../google/protobuf/timestamp";

export const protobufPackage = "common";

export interface TieredTax {
  minProjects: number;
  maxProjects: number;
  percentage: number;
}

export interface TaxationConnector {
  type: string;
  recipient: string;
  recipientWallet: string;
  percentage: number;
  tiereds: TieredTax[];
  appliedOn: string;
  domain: string;
  default: boolean;
  enforced: boolean;
  justification: string;
}

export interface Taxation {
  connectors: TaxationConnector[];
  projectCount: number;
  totalTax: number;
}

export interface OwnerMetadata {
  id: string;
  wallet: string;
  /** Added URI reference */
  uri: string;
}

export interface ReferralMetadata {
  id: string;
  wallet: string;
  /** Added URI reference */
  uri: string;
}

/** KnowledgeGraph message for graph-based metadata */
export interface KnowledgeGraph {
  id: string;
  name: string;
  nodes: string[];
  edges: string[];
  description: string;
}

/** Central metadata with scheduler enhancements */
export interface Metadata {
  /** --- Core Fields --- */
  scheduling?: { [key: string]: any } | undefined;
  features: string[];
  customRules?: { [key: string]: any } | undefined;
  audit?: { [key: string]: any } | undefined;
  tags: string[];
  serviceSpecific?: { [key: string]: any } | undefined;
  knowledgeGraph?: KnowledgeGraph | undefined;
  taxation?: TieredTax | undefined;
  owner?: OwnerMetadata | undefined;
  referral?: ReferralMetadata | undefined;
  versioning?:
    | { [key: string]: any }
    | undefined;
  /** --- Intelligence System Fields --- */
  aiConfidence: number;
  embeddingId: string;
  categories: string[];
  lastAccessed?: Date | undefined;
  nexusChannel: string;
  sourceUri: string;
  scheduler?: Metadata_SchedulerConfig | undefined;
}

/** --- Scheduler Optimizations --- */
export interface Metadata_SchedulerConfig {
  /** Marks data for automatic deletion */
  isEphemeral: boolean;
  /** Scheduled deletion time */
  expiry?:
    | Date
    | undefined;
  /** Scheduler job IDs that use this */
  jobDependencies: string[];
  /** e.g., "post-process", "temp-only" */
  retentionPolicy: string;
}

function createBaseTieredTax(): TieredTax {
  return { minProjects: 0, maxProjects: 0, percentage: 0 };
}

export const TieredTax: MessageFns<TieredTax> = {
  encode(message: TieredTax, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.minProjects !== 0) {
      writer.uint32(8).int32(message.minProjects);
    }
    if (message.maxProjects !== 0) {
      writer.uint32(16).int32(message.maxProjects);
    }
    if (message.percentage !== 0) {
      writer.uint32(25).double(message.percentage);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TieredTax {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTieredTax();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.minProjects = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.maxProjects = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 25) {
            break;
          }

          message.percentage = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TieredTax {
    return {
      minProjects: isSet(object.minProjects) ? globalThis.Number(object.minProjects) : 0,
      maxProjects: isSet(object.maxProjects) ? globalThis.Number(object.maxProjects) : 0,
      percentage: isSet(object.percentage) ? globalThis.Number(object.percentage) : 0,
    };
  },

  toJSON(message: TieredTax): unknown {
    const obj: any = {};
    if (message.minProjects !== 0) {
      obj.minProjects = Math.round(message.minProjects);
    }
    if (message.maxProjects !== 0) {
      obj.maxProjects = Math.round(message.maxProjects);
    }
    if (message.percentage !== 0) {
      obj.percentage = message.percentage;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TieredTax>, I>>(base?: I): TieredTax {
    return TieredTax.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TieredTax>, I>>(object: I): TieredTax {
    const message = createBaseTieredTax();
    message.minProjects = object.minProjects ?? 0;
    message.maxProjects = object.maxProjects ?? 0;
    message.percentage = object.percentage ?? 0;
    return message;
  },
};

function createBaseTaxationConnector(): TaxationConnector {
  return {
    type: "",
    recipient: "",
    recipientWallet: "",
    percentage: 0,
    tiereds: [],
    appliedOn: "",
    domain: "",
    default: false,
    enforced: false,
    justification: "",
  };
}

export const TaxationConnector: MessageFns<TaxationConnector> = {
  encode(message: TaxationConnector, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== "") {
      writer.uint32(10).string(message.type);
    }
    if (message.recipient !== "") {
      writer.uint32(18).string(message.recipient);
    }
    if (message.recipientWallet !== "") {
      writer.uint32(26).string(message.recipientWallet);
    }
    if (message.percentage !== 0) {
      writer.uint32(33).double(message.percentage);
    }
    for (const v of message.tiereds) {
      TieredTax.encode(v!, writer.uint32(42).fork()).join();
    }
    if (message.appliedOn !== "") {
      writer.uint32(50).string(message.appliedOn);
    }
    if (message.domain !== "") {
      writer.uint32(58).string(message.domain);
    }
    if (message.default !== false) {
      writer.uint32(64).bool(message.default);
    }
    if (message.enforced !== false) {
      writer.uint32(72).bool(message.enforced);
    }
    if (message.justification !== "") {
      writer.uint32(82).string(message.justification);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TaxationConnector {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTaxationConnector();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.recipient = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.recipientWallet = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 33) {
            break;
          }

          message.percentage = reader.double();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.tiereds.push(TieredTax.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.appliedOn = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.domain = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.default = reader.bool();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.enforced = reader.bool();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.justification = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TaxationConnector {
    return {
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      recipient: isSet(object.recipient) ? globalThis.String(object.recipient) : "",
      recipientWallet: isSet(object.recipientWallet) ? globalThis.String(object.recipientWallet) : "",
      percentage: isSet(object.percentage) ? globalThis.Number(object.percentage) : 0,
      tiereds: globalThis.Array.isArray(object?.tiereds) ? object.tiereds.map((e: any) => TieredTax.fromJSON(e)) : [],
      appliedOn: isSet(object.appliedOn) ? globalThis.String(object.appliedOn) : "",
      domain: isSet(object.domain) ? globalThis.String(object.domain) : "",
      default: isSet(object.default) ? globalThis.Boolean(object.default) : false,
      enforced: isSet(object.enforced) ? globalThis.Boolean(object.enforced) : false,
      justification: isSet(object.justification) ? globalThis.String(object.justification) : "",
    };
  },

  toJSON(message: TaxationConnector): unknown {
    const obj: any = {};
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.recipient !== "") {
      obj.recipient = message.recipient;
    }
    if (message.recipientWallet !== "") {
      obj.recipientWallet = message.recipientWallet;
    }
    if (message.percentage !== 0) {
      obj.percentage = message.percentage;
    }
    if (message.tiereds?.length) {
      obj.tiereds = message.tiereds.map((e) => TieredTax.toJSON(e));
    }
    if (message.appliedOn !== "") {
      obj.appliedOn = message.appliedOn;
    }
    if (message.domain !== "") {
      obj.domain = message.domain;
    }
    if (message.default !== false) {
      obj.default = message.default;
    }
    if (message.enforced !== false) {
      obj.enforced = message.enforced;
    }
    if (message.justification !== "") {
      obj.justification = message.justification;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TaxationConnector>, I>>(base?: I): TaxationConnector {
    return TaxationConnector.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TaxationConnector>, I>>(object: I): TaxationConnector {
    const message = createBaseTaxationConnector();
    message.type = object.type ?? "";
    message.recipient = object.recipient ?? "";
    message.recipientWallet = object.recipientWallet ?? "";
    message.percentage = object.percentage ?? 0;
    message.tiereds = object.tiereds?.map((e) => TieredTax.fromPartial(e)) || [];
    message.appliedOn = object.appliedOn ?? "";
    message.domain = object.domain ?? "";
    message.default = object.default ?? false;
    message.enforced = object.enforced ?? false;
    message.justification = object.justification ?? "";
    return message;
  },
};

function createBaseTaxation(): Taxation {
  return { connectors: [], projectCount: 0, totalTax: 0 };
}

export const Taxation: MessageFns<Taxation> = {
  encode(message: Taxation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.connectors) {
      TaxationConnector.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.projectCount !== 0) {
      writer.uint32(16).int32(message.projectCount);
    }
    if (message.totalTax !== 0) {
      writer.uint32(25).double(message.totalTax);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Taxation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTaxation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.connectors.push(TaxationConnector.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.projectCount = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 25) {
            break;
          }

          message.totalTax = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Taxation {
    return {
      connectors: globalThis.Array.isArray(object?.connectors)
        ? object.connectors.map((e: any) => TaxationConnector.fromJSON(e))
        : [],
      projectCount: isSet(object.projectCount) ? globalThis.Number(object.projectCount) : 0,
      totalTax: isSet(object.totalTax) ? globalThis.Number(object.totalTax) : 0,
    };
  },

  toJSON(message: Taxation): unknown {
    const obj: any = {};
    if (message.connectors?.length) {
      obj.connectors = message.connectors.map((e) => TaxationConnector.toJSON(e));
    }
    if (message.projectCount !== 0) {
      obj.projectCount = Math.round(message.projectCount);
    }
    if (message.totalTax !== 0) {
      obj.totalTax = message.totalTax;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Taxation>, I>>(base?: I): Taxation {
    return Taxation.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Taxation>, I>>(object: I): Taxation {
    const message = createBaseTaxation();
    message.connectors = object.connectors?.map((e) => TaxationConnector.fromPartial(e)) || [];
    message.projectCount = object.projectCount ?? 0;
    message.totalTax = object.totalTax ?? 0;
    return message;
  },
};

function createBaseOwnerMetadata(): OwnerMetadata {
  return { id: "", wallet: "", uri: "" };
}

export const OwnerMetadata: MessageFns<OwnerMetadata> = {
  encode(message: OwnerMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.wallet !== "") {
      writer.uint32(18).string(message.wallet);
    }
    if (message.uri !== "") {
      writer.uint32(26).string(message.uri);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OwnerMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOwnerMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.wallet = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.uri = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OwnerMetadata {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      wallet: isSet(object.wallet) ? globalThis.String(object.wallet) : "",
      uri: isSet(object.uri) ? globalThis.String(object.uri) : "",
    };
  },

  toJSON(message: OwnerMetadata): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.wallet !== "") {
      obj.wallet = message.wallet;
    }
    if (message.uri !== "") {
      obj.uri = message.uri;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OwnerMetadata>, I>>(base?: I): OwnerMetadata {
    return OwnerMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OwnerMetadata>, I>>(object: I): OwnerMetadata {
    const message = createBaseOwnerMetadata();
    message.id = object.id ?? "";
    message.wallet = object.wallet ?? "";
    message.uri = object.uri ?? "";
    return message;
  },
};

function createBaseReferralMetadata(): ReferralMetadata {
  return { id: "", wallet: "", uri: "" };
}

export const ReferralMetadata: MessageFns<ReferralMetadata> = {
  encode(message: ReferralMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.wallet !== "") {
      writer.uint32(18).string(message.wallet);
    }
    if (message.uri !== "") {
      writer.uint32(26).string(message.uri);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReferralMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReferralMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.wallet = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.uri = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReferralMetadata {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      wallet: isSet(object.wallet) ? globalThis.String(object.wallet) : "",
      uri: isSet(object.uri) ? globalThis.String(object.uri) : "",
    };
  },

  toJSON(message: ReferralMetadata): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.wallet !== "") {
      obj.wallet = message.wallet;
    }
    if (message.uri !== "") {
      obj.uri = message.uri;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReferralMetadata>, I>>(base?: I): ReferralMetadata {
    return ReferralMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReferralMetadata>, I>>(object: I): ReferralMetadata {
    const message = createBaseReferralMetadata();
    message.id = object.id ?? "";
    message.wallet = object.wallet ?? "";
    message.uri = object.uri ?? "";
    return message;
  },
};

function createBaseKnowledgeGraph(): KnowledgeGraph {
  return { id: "", name: "", nodes: [], edges: [], description: "" };
}

export const KnowledgeGraph: MessageFns<KnowledgeGraph> = {
  encode(message: KnowledgeGraph, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    for (const v of message.nodes) {
      writer.uint32(26).string(v!);
    }
    for (const v of message.edges) {
      writer.uint32(34).string(v!);
    }
    if (message.description !== "") {
      writer.uint32(42).string(message.description);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): KnowledgeGraph {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseKnowledgeGraph();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.nodes.push(reader.string());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.edges.push(reader.string());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.description = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): KnowledgeGraph {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      nodes: globalThis.Array.isArray(object?.nodes) ? object.nodes.map((e: any) => globalThis.String(e)) : [],
      edges: globalThis.Array.isArray(object?.edges) ? object.edges.map((e: any) => globalThis.String(e)) : [],
      description: isSet(object.description) ? globalThis.String(object.description) : "",
    };
  },

  toJSON(message: KnowledgeGraph): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.nodes?.length) {
      obj.nodes = message.nodes;
    }
    if (message.edges?.length) {
      obj.edges = message.edges;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<KnowledgeGraph>, I>>(base?: I): KnowledgeGraph {
    return KnowledgeGraph.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<KnowledgeGraph>, I>>(object: I): KnowledgeGraph {
    const message = createBaseKnowledgeGraph();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.nodes = object.nodes?.map((e) => e) || [];
    message.edges = object.edges?.map((e) => e) || [];
    message.description = object.description ?? "";
    return message;
  },
};

function createBaseMetadata(): Metadata {
  return {
    scheduling: undefined,
    features: [],
    customRules: undefined,
    audit: undefined,
    tags: [],
    serviceSpecific: undefined,
    knowledgeGraph: undefined,
    taxation: undefined,
    owner: undefined,
    referral: undefined,
    versioning: undefined,
    aiConfidence: 0,
    embeddingId: "",
    categories: [],
    lastAccessed: undefined,
    nexusChannel: "",
    sourceUri: "",
    scheduler: undefined,
  };
}

export const Metadata: MessageFns<Metadata> = {
  encode(message: Metadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.scheduling !== undefined) {
      Struct.encode(Struct.wrap(message.scheduling), writer.uint32(10).fork()).join();
    }
    for (const v of message.features) {
      writer.uint32(18).string(v!);
    }
    if (message.customRules !== undefined) {
      Struct.encode(Struct.wrap(message.customRules), writer.uint32(26).fork()).join();
    }
    if (message.audit !== undefined) {
      Struct.encode(Struct.wrap(message.audit), writer.uint32(34).fork()).join();
    }
    for (const v of message.tags) {
      writer.uint32(42).string(v!);
    }
    if (message.serviceSpecific !== undefined) {
      Struct.encode(Struct.wrap(message.serviceSpecific), writer.uint32(50).fork()).join();
    }
    if (message.knowledgeGraph !== undefined) {
      KnowledgeGraph.encode(message.knowledgeGraph, writer.uint32(58).fork()).join();
    }
    if (message.taxation !== undefined) {
      TieredTax.encode(message.taxation, writer.uint32(66).fork()).join();
    }
    if (message.owner !== undefined) {
      OwnerMetadata.encode(message.owner, writer.uint32(74).fork()).join();
    }
    if (message.referral !== undefined) {
      ReferralMetadata.encode(message.referral, writer.uint32(82).fork()).join();
    }
    if (message.versioning !== undefined) {
      Struct.encode(Struct.wrap(message.versioning), writer.uint32(90).fork()).join();
    }
    if (message.aiConfidence !== 0) {
      writer.uint32(117).float(message.aiConfidence);
    }
    if (message.embeddingId !== "") {
      writer.uint32(122).string(message.embeddingId);
    }
    for (const v of message.categories) {
      writer.uint32(130).string(v!);
    }
    if (message.lastAccessed !== undefined) {
      Timestamp.encode(toTimestamp(message.lastAccessed), writer.uint32(138).fork()).join();
    }
    if (message.nexusChannel !== "") {
      writer.uint32(146).string(message.nexusChannel);
    }
    if (message.sourceUri !== "") {
      writer.uint32(154).string(message.sourceUri);
    }
    if (message.scheduler !== undefined) {
      Metadata_SchedulerConfig.encode(message.scheduler, writer.uint32(162).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Metadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.scheduling = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.features.push(reader.string());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.customRules = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.audit = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.tags.push(reader.string());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.serviceSpecific = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.knowledgeGraph = KnowledgeGraph.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.taxation = TieredTax.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.owner = OwnerMetadata.decode(reader, reader.uint32());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.referral = ReferralMetadata.decode(reader, reader.uint32());
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.versioning = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        }
        case 14: {
          if (tag !== 117) {
            break;
          }

          message.aiConfidence = reader.float();
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.embeddingId = reader.string();
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.categories.push(reader.string());
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.lastAccessed = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 18: {
          if (tag !== 146) {
            break;
          }

          message.nexusChannel = reader.string();
          continue;
        }
        case 19: {
          if (tag !== 154) {
            break;
          }

          message.sourceUri = reader.string();
          continue;
        }
        case 20: {
          if (tag !== 162) {
            break;
          }

          message.scheduler = Metadata_SchedulerConfig.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Metadata {
    return {
      scheduling: isObject(object.scheduling) ? object.scheduling : undefined,
      features: globalThis.Array.isArray(object?.features) ? object.features.map((e: any) => globalThis.String(e)) : [],
      customRules: isObject(object.customRules) ? object.customRules : undefined,
      audit: isObject(object.audit) ? object.audit : undefined,
      tags: globalThis.Array.isArray(object?.tags) ? object.tags.map((e: any) => globalThis.String(e)) : [],
      serviceSpecific: isObject(object.serviceSpecific) ? object.serviceSpecific : undefined,
      knowledgeGraph: isSet(object.knowledgeGraph) ? KnowledgeGraph.fromJSON(object.knowledgeGraph) : undefined,
      taxation: isSet(object.taxation) ? TieredTax.fromJSON(object.taxation) : undefined,
      owner: isSet(object.owner) ? OwnerMetadata.fromJSON(object.owner) : undefined,
      referral: isSet(object.referral) ? ReferralMetadata.fromJSON(object.referral) : undefined,
      versioning: isObject(object.versioning) ? object.versioning : undefined,
      aiConfidence: isSet(object.aiConfidence) ? globalThis.Number(object.aiConfidence) : 0,
      embeddingId: isSet(object.embeddingId) ? globalThis.String(object.embeddingId) : "",
      categories: globalThis.Array.isArray(object?.categories)
        ? object.categories.map((e: any) => globalThis.String(e))
        : [],
      lastAccessed: isSet(object.lastAccessed) ? fromJsonTimestamp(object.lastAccessed) : undefined,
      nexusChannel: isSet(object.nexusChannel) ? globalThis.String(object.nexusChannel) : "",
      sourceUri: isSet(object.sourceUri) ? globalThis.String(object.sourceUri) : "",
      scheduler: isSet(object.scheduler) ? Metadata_SchedulerConfig.fromJSON(object.scheduler) : undefined,
    };
  },

  toJSON(message: Metadata): unknown {
    const obj: any = {};
    if (message.scheduling !== undefined) {
      obj.scheduling = message.scheduling;
    }
    if (message.features?.length) {
      obj.features = message.features;
    }
    if (message.customRules !== undefined) {
      obj.customRules = message.customRules;
    }
    if (message.audit !== undefined) {
      obj.audit = message.audit;
    }
    if (message.tags?.length) {
      obj.tags = message.tags;
    }
    if (message.serviceSpecific !== undefined) {
      obj.serviceSpecific = message.serviceSpecific;
    }
    if (message.knowledgeGraph !== undefined) {
      obj.knowledgeGraph = KnowledgeGraph.toJSON(message.knowledgeGraph);
    }
    if (message.taxation !== undefined) {
      obj.taxation = TieredTax.toJSON(message.taxation);
    }
    if (message.owner !== undefined) {
      obj.owner = OwnerMetadata.toJSON(message.owner);
    }
    if (message.referral !== undefined) {
      obj.referral = ReferralMetadata.toJSON(message.referral);
    }
    if (message.versioning !== undefined) {
      obj.versioning = message.versioning;
    }
    if (message.aiConfidence !== 0) {
      obj.aiConfidence = message.aiConfidence;
    }
    if (message.embeddingId !== "") {
      obj.embeddingId = message.embeddingId;
    }
    if (message.categories?.length) {
      obj.categories = message.categories;
    }
    if (message.lastAccessed !== undefined) {
      obj.lastAccessed = message.lastAccessed.toISOString();
    }
    if (message.nexusChannel !== "") {
      obj.nexusChannel = message.nexusChannel;
    }
    if (message.sourceUri !== "") {
      obj.sourceUri = message.sourceUri;
    }
    if (message.scheduler !== undefined) {
      obj.scheduler = Metadata_SchedulerConfig.toJSON(message.scheduler);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Metadata>, I>>(base?: I): Metadata {
    return Metadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Metadata>, I>>(object: I): Metadata {
    const message = createBaseMetadata();
    message.scheduling = object.scheduling ?? undefined;
    message.features = object.features?.map((e) => e) || [];
    message.customRules = object.customRules ?? undefined;
    message.audit = object.audit ?? undefined;
    message.tags = object.tags?.map((e) => e) || [];
    message.serviceSpecific = object.serviceSpecific ?? undefined;
    message.knowledgeGraph = (object.knowledgeGraph !== undefined && object.knowledgeGraph !== null)
      ? KnowledgeGraph.fromPartial(object.knowledgeGraph)
      : undefined;
    message.taxation = (object.taxation !== undefined && object.taxation !== null)
      ? TieredTax.fromPartial(object.taxation)
      : undefined;
    message.owner = (object.owner !== undefined && object.owner !== null)
      ? OwnerMetadata.fromPartial(object.owner)
      : undefined;
    message.referral = (object.referral !== undefined && object.referral !== null)
      ? ReferralMetadata.fromPartial(object.referral)
      : undefined;
    message.versioning = object.versioning ?? undefined;
    message.aiConfidence = object.aiConfidence ?? 0;
    message.embeddingId = object.embeddingId ?? "";
    message.categories = object.categories?.map((e) => e) || [];
    message.lastAccessed = object.lastAccessed ?? undefined;
    message.nexusChannel = object.nexusChannel ?? "";
    message.sourceUri = object.sourceUri ?? "";
    message.scheduler = (object.scheduler !== undefined && object.scheduler !== null)
      ? Metadata_SchedulerConfig.fromPartial(object.scheduler)
      : undefined;
    return message;
  },
};

function createBaseMetadata_SchedulerConfig(): Metadata_SchedulerConfig {
  return { isEphemeral: false, expiry: undefined, jobDependencies: [], retentionPolicy: "" };
}

export const Metadata_SchedulerConfig: MessageFns<Metadata_SchedulerConfig> = {
  encode(message: Metadata_SchedulerConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.isEphemeral !== false) {
      writer.uint32(8).bool(message.isEphemeral);
    }
    if (message.expiry !== undefined) {
      Timestamp.encode(toTimestamp(message.expiry), writer.uint32(18).fork()).join();
    }
    for (const v of message.jobDependencies) {
      writer.uint32(26).string(v!);
    }
    if (message.retentionPolicy !== "") {
      writer.uint32(34).string(message.retentionPolicy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Metadata_SchedulerConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMetadata_SchedulerConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.isEphemeral = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.expiry = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.jobDependencies.push(reader.string());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.retentionPolicy = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Metadata_SchedulerConfig {
    return {
      isEphemeral: isSet(object.isEphemeral) ? globalThis.Boolean(object.isEphemeral) : false,
      expiry: isSet(object.expiry) ? fromJsonTimestamp(object.expiry) : undefined,
      jobDependencies: globalThis.Array.isArray(object?.jobDependencies)
        ? object.jobDependencies.map((e: any) => globalThis.String(e))
        : [],
      retentionPolicy: isSet(object.retentionPolicy) ? globalThis.String(object.retentionPolicy) : "",
    };
  },

  toJSON(message: Metadata_SchedulerConfig): unknown {
    const obj: any = {};
    if (message.isEphemeral !== false) {
      obj.isEphemeral = message.isEphemeral;
    }
    if (message.expiry !== undefined) {
      obj.expiry = message.expiry.toISOString();
    }
    if (message.jobDependencies?.length) {
      obj.jobDependencies = message.jobDependencies;
    }
    if (message.retentionPolicy !== "") {
      obj.retentionPolicy = message.retentionPolicy;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Metadata_SchedulerConfig>, I>>(base?: I): Metadata_SchedulerConfig {
    return Metadata_SchedulerConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Metadata_SchedulerConfig>, I>>(object: I): Metadata_SchedulerConfig {
    const message = createBaseMetadata_SchedulerConfig();
    message.isEphemeral = object.isEphemeral ?? false;
    message.expiry = object.expiry ?? undefined;
    message.jobDependencies = object.jobDependencies?.map((e) => e) || [];
    message.retentionPolicy = object.retentionPolicy ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000).toString();
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (globalThis.Number(t.seconds) || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
