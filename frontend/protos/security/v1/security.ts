// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v5.29.3
// source: security/v1/security.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Metadata } from "../../common/v1/metadata";
import { Struct } from "../../google/protobuf/struct";
import { Timestamp } from "../../google/protobuf/timestamp";

export const protobufPackage = "security.v1";

/**
 * SecurityService proto
 * See docs/services/security.md for full documentation and
 * separation from User Service.
 */

export interface AuthenticateRequest {
  /** service, workload, device, etc. */
  principalId: string;
  /** token, cert, etc. */
  credential: string;
  metadata?: Metadata | undefined;
}

export interface AuthenticateResponse {
  sessionToken: string;
  expiresAt?: Date | undefined;
  metadata?: Metadata | undefined;
}

export interface AuthorizeRequest {
  principalId: string;
  action: string;
  resource: string;
  metadata?: Metadata | undefined;
}

export interface AuthorizeResponse {
  allowed: boolean;
  reason: string;
  metadata?: Metadata | undefined;
}

export interface IssueSecretRequest {
  principalId: string;
  /** api_key, jwt, cert, svid, etc. */
  secretType: string;
  metadata?: Metadata | undefined;
}

export interface IssueSecretResponse {
  secret: string;
  expiresAt?: Date | undefined;
  metadata?: Metadata | undefined;
}

export interface ValidateCredentialRequest {
  credential: string;
  /** jwt, cert, svid, etc. */
  type: string;
  metadata?: Metadata | undefined;
}

export interface ValidateCredentialResponse {
  valid: boolean;
  principalId: string;
  expiresAt?: Date | undefined;
  metadata?: Metadata | undefined;
}

export interface QueryEventsRequest {
  principalId: string;
  eventType: string;
  from?: Date | undefined;
  to?: Date | undefined;
  metadata?: Metadata | undefined;
}

export interface QueryEventsResponse {
  events: SecurityEvent[];
  metadata?: Metadata | undefined;
}

export interface SecurityEvent {
  id: string;
  principalId: string;
  eventType: string;
  resource: string;
  action: string;
  timestamp?: Date | undefined;
  details?: { [key: string]: any } | undefined;
}

export interface GetPolicyRequest {
  policyId: string;
  metadata?: Metadata | undefined;
}

export interface GetPolicyResponse {
  /** policy as code (YAML, Rego, etc.) */
  policy: string;
  metadata?: Metadata | undefined;
}

export interface SetPolicyRequest {
  policyId: string;
  policy: string;
  metadata?: Metadata | undefined;
}

export interface SetPolicyResponse {
  success: boolean;
  error: string;
  metadata?: Metadata | undefined;
}

/** Threat detection and audit event messages */
export interface DetectThreatsRequest {
  principalId: string;
  /** e.g., login, api_call, pattern_exec */
  contextType: string;
  /** signals, device, location, etc. */
  metadata?: Metadata | undefined;
}

export interface DetectThreatsResponse {
  threats: ThreatSignal[];
  metadata?: Metadata | undefined;
}

export interface ThreatSignal {
  /** e.g., anomaly, bad_actor, escalation */
  type: string;
  description: string;
  score: number;
  metadata?: Metadata | undefined;
}

export interface AuditEventRequest {
  eventType: string;
  principalId: string;
  resource: string;
  action: string;
  /** full audit context */
  metadata?: Metadata | undefined;
}

export interface AuditEventResponse {
  success: boolean;
  error: string;
  metadata?: Metadata | undefined;
}

function createBaseAuthenticateRequest(): AuthenticateRequest {
  return { principalId: "", credential: "", metadata: undefined };
}

export const AuthenticateRequest: MessageFns<AuthenticateRequest> = {
  encode(message: AuthenticateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.principalId !== "") {
      writer.uint32(10).string(message.principalId);
    }
    if (message.credential !== "") {
      writer.uint32(18).string(message.credential);
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AuthenticateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAuthenticateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.principalId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.credential = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AuthenticateRequest {
    return {
      principalId: isSet(object.principalId) ? globalThis.String(object.principalId) : "",
      credential: isSet(object.credential) ? globalThis.String(object.credential) : "",
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
    };
  },

  toJSON(message: AuthenticateRequest): unknown {
    const obj: any = {};
    if (message.principalId !== "") {
      obj.principalId = message.principalId;
    }
    if (message.credential !== "") {
      obj.credential = message.credential;
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AuthenticateRequest>, I>>(base?: I): AuthenticateRequest {
    return AuthenticateRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AuthenticateRequest>, I>>(object: I): AuthenticateRequest {
    const message = createBaseAuthenticateRequest();
    message.principalId = object.principalId ?? "";
    message.credential = object.credential ?? "";
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    return message;
  },
};

function createBaseAuthenticateResponse(): AuthenticateResponse {
  return { sessionToken: "", expiresAt: undefined, metadata: undefined };
}

export const AuthenticateResponse: MessageFns<AuthenticateResponse> = {
  encode(message: AuthenticateResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sessionToken !== "") {
      writer.uint32(10).string(message.sessionToken);
    }
    if (message.expiresAt !== undefined) {
      Timestamp.encode(toTimestamp(message.expiresAt), writer.uint32(18).fork()).join();
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AuthenticateResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAuthenticateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sessionToken = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.expiresAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AuthenticateResponse {
    return {
      sessionToken: isSet(object.sessionToken) ? globalThis.String(object.sessionToken) : "",
      expiresAt: isSet(object.expiresAt) ? fromJsonTimestamp(object.expiresAt) : undefined,
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
    };
  },

  toJSON(message: AuthenticateResponse): unknown {
    const obj: any = {};
    if (message.sessionToken !== "") {
      obj.sessionToken = message.sessionToken;
    }
    if (message.expiresAt !== undefined) {
      obj.expiresAt = message.expiresAt.toISOString();
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AuthenticateResponse>, I>>(base?: I): AuthenticateResponse {
    return AuthenticateResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AuthenticateResponse>, I>>(object: I): AuthenticateResponse {
    const message = createBaseAuthenticateResponse();
    message.sessionToken = object.sessionToken ?? "";
    message.expiresAt = object.expiresAt ?? undefined;
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    return message;
  },
};

function createBaseAuthorizeRequest(): AuthorizeRequest {
  return { principalId: "", action: "", resource: "", metadata: undefined };
}

export const AuthorizeRequest: MessageFns<AuthorizeRequest> = {
  encode(message: AuthorizeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.principalId !== "") {
      writer.uint32(10).string(message.principalId);
    }
    if (message.action !== "") {
      writer.uint32(18).string(message.action);
    }
    if (message.resource !== "") {
      writer.uint32(26).string(message.resource);
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AuthorizeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAuthorizeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.principalId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.action = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.resource = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AuthorizeRequest {
    return {
      principalId: isSet(object.principalId) ? globalThis.String(object.principalId) : "",
      action: isSet(object.action) ? globalThis.String(object.action) : "",
      resource: isSet(object.resource) ? globalThis.String(object.resource) : "",
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
    };
  },

  toJSON(message: AuthorizeRequest): unknown {
    const obj: any = {};
    if (message.principalId !== "") {
      obj.principalId = message.principalId;
    }
    if (message.action !== "") {
      obj.action = message.action;
    }
    if (message.resource !== "") {
      obj.resource = message.resource;
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AuthorizeRequest>, I>>(base?: I): AuthorizeRequest {
    return AuthorizeRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AuthorizeRequest>, I>>(object: I): AuthorizeRequest {
    const message = createBaseAuthorizeRequest();
    message.principalId = object.principalId ?? "";
    message.action = object.action ?? "";
    message.resource = object.resource ?? "";
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    return message;
  },
};

function createBaseAuthorizeResponse(): AuthorizeResponse {
  return { allowed: false, reason: "", metadata: undefined };
}

export const AuthorizeResponse: MessageFns<AuthorizeResponse> = {
  encode(message: AuthorizeResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.allowed !== false) {
      writer.uint32(8).bool(message.allowed);
    }
    if (message.reason !== "") {
      writer.uint32(18).string(message.reason);
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AuthorizeResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAuthorizeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.allowed = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.reason = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AuthorizeResponse {
    return {
      allowed: isSet(object.allowed) ? globalThis.Boolean(object.allowed) : false,
      reason: isSet(object.reason) ? globalThis.String(object.reason) : "",
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
    };
  },

  toJSON(message: AuthorizeResponse): unknown {
    const obj: any = {};
    if (message.allowed !== false) {
      obj.allowed = message.allowed;
    }
    if (message.reason !== "") {
      obj.reason = message.reason;
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AuthorizeResponse>, I>>(base?: I): AuthorizeResponse {
    return AuthorizeResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AuthorizeResponse>, I>>(object: I): AuthorizeResponse {
    const message = createBaseAuthorizeResponse();
    message.allowed = object.allowed ?? false;
    message.reason = object.reason ?? "";
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    return message;
  },
};

function createBaseIssueSecretRequest(): IssueSecretRequest {
  return { principalId: "", secretType: "", metadata: undefined };
}

export const IssueSecretRequest: MessageFns<IssueSecretRequest> = {
  encode(message: IssueSecretRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.principalId !== "") {
      writer.uint32(10).string(message.principalId);
    }
    if (message.secretType !== "") {
      writer.uint32(18).string(message.secretType);
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IssueSecretRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIssueSecretRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.principalId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.secretType = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IssueSecretRequest {
    return {
      principalId: isSet(object.principalId) ? globalThis.String(object.principalId) : "",
      secretType: isSet(object.secretType) ? globalThis.String(object.secretType) : "",
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
    };
  },

  toJSON(message: IssueSecretRequest): unknown {
    const obj: any = {};
    if (message.principalId !== "") {
      obj.principalId = message.principalId;
    }
    if (message.secretType !== "") {
      obj.secretType = message.secretType;
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<IssueSecretRequest>, I>>(base?: I): IssueSecretRequest {
    return IssueSecretRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IssueSecretRequest>, I>>(object: I): IssueSecretRequest {
    const message = createBaseIssueSecretRequest();
    message.principalId = object.principalId ?? "";
    message.secretType = object.secretType ?? "";
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    return message;
  },
};

function createBaseIssueSecretResponse(): IssueSecretResponse {
  return { secret: "", expiresAt: undefined, metadata: undefined };
}

export const IssueSecretResponse: MessageFns<IssueSecretResponse> = {
  encode(message: IssueSecretResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.secret !== "") {
      writer.uint32(10).string(message.secret);
    }
    if (message.expiresAt !== undefined) {
      Timestamp.encode(toTimestamp(message.expiresAt), writer.uint32(18).fork()).join();
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IssueSecretResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIssueSecretResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.secret = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.expiresAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IssueSecretResponse {
    return {
      secret: isSet(object.secret) ? globalThis.String(object.secret) : "",
      expiresAt: isSet(object.expiresAt) ? fromJsonTimestamp(object.expiresAt) : undefined,
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
    };
  },

  toJSON(message: IssueSecretResponse): unknown {
    const obj: any = {};
    if (message.secret !== "") {
      obj.secret = message.secret;
    }
    if (message.expiresAt !== undefined) {
      obj.expiresAt = message.expiresAt.toISOString();
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<IssueSecretResponse>, I>>(base?: I): IssueSecretResponse {
    return IssueSecretResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IssueSecretResponse>, I>>(object: I): IssueSecretResponse {
    const message = createBaseIssueSecretResponse();
    message.secret = object.secret ?? "";
    message.expiresAt = object.expiresAt ?? undefined;
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    return message;
  },
};

function createBaseValidateCredentialRequest(): ValidateCredentialRequest {
  return { credential: "", type: "", metadata: undefined };
}

export const ValidateCredentialRequest: MessageFns<ValidateCredentialRequest> = {
  encode(message: ValidateCredentialRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.credential !== "") {
      writer.uint32(10).string(message.credential);
    }
    if (message.type !== "") {
      writer.uint32(18).string(message.type);
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ValidateCredentialRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseValidateCredentialRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.credential = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ValidateCredentialRequest {
    return {
      credential: isSet(object.credential) ? globalThis.String(object.credential) : "",
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
    };
  },

  toJSON(message: ValidateCredentialRequest): unknown {
    const obj: any = {};
    if (message.credential !== "") {
      obj.credential = message.credential;
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ValidateCredentialRequest>, I>>(base?: I): ValidateCredentialRequest {
    return ValidateCredentialRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ValidateCredentialRequest>, I>>(object: I): ValidateCredentialRequest {
    const message = createBaseValidateCredentialRequest();
    message.credential = object.credential ?? "";
    message.type = object.type ?? "";
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    return message;
  },
};

function createBaseValidateCredentialResponse(): ValidateCredentialResponse {
  return { valid: false, principalId: "", expiresAt: undefined, metadata: undefined };
}

export const ValidateCredentialResponse: MessageFns<ValidateCredentialResponse> = {
  encode(message: ValidateCredentialResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.valid !== false) {
      writer.uint32(8).bool(message.valid);
    }
    if (message.principalId !== "") {
      writer.uint32(18).string(message.principalId);
    }
    if (message.expiresAt !== undefined) {
      Timestamp.encode(toTimestamp(message.expiresAt), writer.uint32(26).fork()).join();
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ValidateCredentialResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseValidateCredentialResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.valid = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.principalId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.expiresAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ValidateCredentialResponse {
    return {
      valid: isSet(object.valid) ? globalThis.Boolean(object.valid) : false,
      principalId: isSet(object.principalId) ? globalThis.String(object.principalId) : "",
      expiresAt: isSet(object.expiresAt) ? fromJsonTimestamp(object.expiresAt) : undefined,
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
    };
  },

  toJSON(message: ValidateCredentialResponse): unknown {
    const obj: any = {};
    if (message.valid !== false) {
      obj.valid = message.valid;
    }
    if (message.principalId !== "") {
      obj.principalId = message.principalId;
    }
    if (message.expiresAt !== undefined) {
      obj.expiresAt = message.expiresAt.toISOString();
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ValidateCredentialResponse>, I>>(base?: I): ValidateCredentialResponse {
    return ValidateCredentialResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ValidateCredentialResponse>, I>>(object: I): ValidateCredentialResponse {
    const message = createBaseValidateCredentialResponse();
    message.valid = object.valid ?? false;
    message.principalId = object.principalId ?? "";
    message.expiresAt = object.expiresAt ?? undefined;
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    return message;
  },
};

function createBaseQueryEventsRequest(): QueryEventsRequest {
  return { principalId: "", eventType: "", from: undefined, to: undefined, metadata: undefined };
}

export const QueryEventsRequest: MessageFns<QueryEventsRequest> = {
  encode(message: QueryEventsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.principalId !== "") {
      writer.uint32(10).string(message.principalId);
    }
    if (message.eventType !== "") {
      writer.uint32(18).string(message.eventType);
    }
    if (message.from !== undefined) {
      Timestamp.encode(toTimestamp(message.from), writer.uint32(26).fork()).join();
    }
    if (message.to !== undefined) {
      Timestamp.encode(toTimestamp(message.to), writer.uint32(34).fork()).join();
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryEventsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryEventsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.principalId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.eventType = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.from = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.to = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryEventsRequest {
    return {
      principalId: isSet(object.principalId) ? globalThis.String(object.principalId) : "",
      eventType: isSet(object.eventType) ? globalThis.String(object.eventType) : "",
      from: isSet(object.from) ? fromJsonTimestamp(object.from) : undefined,
      to: isSet(object.to) ? fromJsonTimestamp(object.to) : undefined,
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
    };
  },

  toJSON(message: QueryEventsRequest): unknown {
    const obj: any = {};
    if (message.principalId !== "") {
      obj.principalId = message.principalId;
    }
    if (message.eventType !== "") {
      obj.eventType = message.eventType;
    }
    if (message.from !== undefined) {
      obj.from = message.from.toISOString();
    }
    if (message.to !== undefined) {
      obj.to = message.to.toISOString();
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryEventsRequest>, I>>(base?: I): QueryEventsRequest {
    return QueryEventsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryEventsRequest>, I>>(object: I): QueryEventsRequest {
    const message = createBaseQueryEventsRequest();
    message.principalId = object.principalId ?? "";
    message.eventType = object.eventType ?? "";
    message.from = object.from ?? undefined;
    message.to = object.to ?? undefined;
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    return message;
  },
};

function createBaseQueryEventsResponse(): QueryEventsResponse {
  return { events: [], metadata: undefined };
}

export const QueryEventsResponse: MessageFns<QueryEventsResponse> = {
  encode(message: QueryEventsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.events) {
      SecurityEvent.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryEventsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryEventsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.events.push(SecurityEvent.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryEventsResponse {
    return {
      events: globalThis.Array.isArray(object?.events) ? object.events.map((e: any) => SecurityEvent.fromJSON(e)) : [],
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
    };
  },

  toJSON(message: QueryEventsResponse): unknown {
    const obj: any = {};
    if (message.events?.length) {
      obj.events = message.events.map((e) => SecurityEvent.toJSON(e));
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryEventsResponse>, I>>(base?: I): QueryEventsResponse {
    return QueryEventsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryEventsResponse>, I>>(object: I): QueryEventsResponse {
    const message = createBaseQueryEventsResponse();
    message.events = object.events?.map((e) => SecurityEvent.fromPartial(e)) || [];
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    return message;
  },
};

function createBaseSecurityEvent(): SecurityEvent {
  return { id: "", principalId: "", eventType: "", resource: "", action: "", timestamp: undefined, details: undefined };
}

export const SecurityEvent: MessageFns<SecurityEvent> = {
  encode(message: SecurityEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.principalId !== "") {
      writer.uint32(18).string(message.principalId);
    }
    if (message.eventType !== "") {
      writer.uint32(26).string(message.eventType);
    }
    if (message.resource !== "") {
      writer.uint32(34).string(message.resource);
    }
    if (message.action !== "") {
      writer.uint32(42).string(message.action);
    }
    if (message.timestamp !== undefined) {
      Timestamp.encode(toTimestamp(message.timestamp), writer.uint32(50).fork()).join();
    }
    if (message.details !== undefined) {
      Struct.encode(Struct.wrap(message.details), writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SecurityEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSecurityEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.principalId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.eventType = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.resource = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.action = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.timestamp = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.details = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SecurityEvent {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      principalId: isSet(object.principalId) ? globalThis.String(object.principalId) : "",
      eventType: isSet(object.eventType) ? globalThis.String(object.eventType) : "",
      resource: isSet(object.resource) ? globalThis.String(object.resource) : "",
      action: isSet(object.action) ? globalThis.String(object.action) : "",
      timestamp: isSet(object.timestamp) ? fromJsonTimestamp(object.timestamp) : undefined,
      details: isObject(object.details) ? object.details : undefined,
    };
  },

  toJSON(message: SecurityEvent): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.principalId !== "") {
      obj.principalId = message.principalId;
    }
    if (message.eventType !== "") {
      obj.eventType = message.eventType;
    }
    if (message.resource !== "") {
      obj.resource = message.resource;
    }
    if (message.action !== "") {
      obj.action = message.action;
    }
    if (message.timestamp !== undefined) {
      obj.timestamp = message.timestamp.toISOString();
    }
    if (message.details !== undefined) {
      obj.details = message.details;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SecurityEvent>, I>>(base?: I): SecurityEvent {
    return SecurityEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SecurityEvent>, I>>(object: I): SecurityEvent {
    const message = createBaseSecurityEvent();
    message.id = object.id ?? "";
    message.principalId = object.principalId ?? "";
    message.eventType = object.eventType ?? "";
    message.resource = object.resource ?? "";
    message.action = object.action ?? "";
    message.timestamp = object.timestamp ?? undefined;
    message.details = object.details ?? undefined;
    return message;
  },
};

function createBaseGetPolicyRequest(): GetPolicyRequest {
  return { policyId: "", metadata: undefined };
}

export const GetPolicyRequest: MessageFns<GetPolicyRequest> = {
  encode(message: GetPolicyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.policyId !== "") {
      writer.uint32(10).string(message.policyId);
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetPolicyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.policyId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetPolicyRequest {
    return {
      policyId: isSet(object.policyId) ? globalThis.String(object.policyId) : "",
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
    };
  },

  toJSON(message: GetPolicyRequest): unknown {
    const obj: any = {};
    if (message.policyId !== "") {
      obj.policyId = message.policyId;
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetPolicyRequest>, I>>(base?: I): GetPolicyRequest {
    return GetPolicyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetPolicyRequest>, I>>(object: I): GetPolicyRequest {
    const message = createBaseGetPolicyRequest();
    message.policyId = object.policyId ?? "";
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    return message;
  },
};

function createBaseGetPolicyResponse(): GetPolicyResponse {
  return { policy: "", metadata: undefined };
}

export const GetPolicyResponse: MessageFns<GetPolicyResponse> = {
  encode(message: GetPolicyResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.policy !== "") {
      writer.uint32(10).string(message.policy);
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetPolicyResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.policy = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetPolicyResponse {
    return {
      policy: isSet(object.policy) ? globalThis.String(object.policy) : "",
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
    };
  },

  toJSON(message: GetPolicyResponse): unknown {
    const obj: any = {};
    if (message.policy !== "") {
      obj.policy = message.policy;
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetPolicyResponse>, I>>(base?: I): GetPolicyResponse {
    return GetPolicyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetPolicyResponse>, I>>(object: I): GetPolicyResponse {
    const message = createBaseGetPolicyResponse();
    message.policy = object.policy ?? "";
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    return message;
  },
};

function createBaseSetPolicyRequest(): SetPolicyRequest {
  return { policyId: "", policy: "", metadata: undefined };
}

export const SetPolicyRequest: MessageFns<SetPolicyRequest> = {
  encode(message: SetPolicyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.policyId !== "") {
      writer.uint32(10).string(message.policyId);
    }
    if (message.policy !== "") {
      writer.uint32(18).string(message.policy);
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetPolicyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetPolicyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.policyId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.policy = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetPolicyRequest {
    return {
      policyId: isSet(object.policyId) ? globalThis.String(object.policyId) : "",
      policy: isSet(object.policy) ? globalThis.String(object.policy) : "",
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
    };
  },

  toJSON(message: SetPolicyRequest): unknown {
    const obj: any = {};
    if (message.policyId !== "") {
      obj.policyId = message.policyId;
    }
    if (message.policy !== "") {
      obj.policy = message.policy;
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetPolicyRequest>, I>>(base?: I): SetPolicyRequest {
    return SetPolicyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetPolicyRequest>, I>>(object: I): SetPolicyRequest {
    const message = createBaseSetPolicyRequest();
    message.policyId = object.policyId ?? "";
    message.policy = object.policy ?? "";
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    return message;
  },
};

function createBaseSetPolicyResponse(): SetPolicyResponse {
  return { success: false, error: "", metadata: undefined };
}

export const SetPolicyResponse: MessageFns<SetPolicyResponse> = {
  encode(message: SetPolicyResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.error !== "") {
      writer.uint32(18).string(message.error);
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetPolicyResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetPolicyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.error = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetPolicyResponse {
    return {
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
      error: isSet(object.error) ? globalThis.String(object.error) : "",
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
    };
  },

  toJSON(message: SetPolicyResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.error !== "") {
      obj.error = message.error;
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetPolicyResponse>, I>>(base?: I): SetPolicyResponse {
    return SetPolicyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetPolicyResponse>, I>>(object: I): SetPolicyResponse {
    const message = createBaseSetPolicyResponse();
    message.success = object.success ?? false;
    message.error = object.error ?? "";
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    return message;
  },
};

function createBaseDetectThreatsRequest(): DetectThreatsRequest {
  return { principalId: "", contextType: "", metadata: undefined };
}

export const DetectThreatsRequest: MessageFns<DetectThreatsRequest> = {
  encode(message: DetectThreatsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.principalId !== "") {
      writer.uint32(10).string(message.principalId);
    }
    if (message.contextType !== "") {
      writer.uint32(18).string(message.contextType);
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DetectThreatsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDetectThreatsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.principalId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.contextType = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DetectThreatsRequest {
    return {
      principalId: isSet(object.principalId) ? globalThis.String(object.principalId) : "",
      contextType: isSet(object.contextType) ? globalThis.String(object.contextType) : "",
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
    };
  },

  toJSON(message: DetectThreatsRequest): unknown {
    const obj: any = {};
    if (message.principalId !== "") {
      obj.principalId = message.principalId;
    }
    if (message.contextType !== "") {
      obj.contextType = message.contextType;
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DetectThreatsRequest>, I>>(base?: I): DetectThreatsRequest {
    return DetectThreatsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DetectThreatsRequest>, I>>(object: I): DetectThreatsRequest {
    const message = createBaseDetectThreatsRequest();
    message.principalId = object.principalId ?? "";
    message.contextType = object.contextType ?? "";
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    return message;
  },
};

function createBaseDetectThreatsResponse(): DetectThreatsResponse {
  return { threats: [], metadata: undefined };
}

export const DetectThreatsResponse: MessageFns<DetectThreatsResponse> = {
  encode(message: DetectThreatsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.threats) {
      ThreatSignal.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DetectThreatsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDetectThreatsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.threats.push(ThreatSignal.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DetectThreatsResponse {
    return {
      threats: globalThis.Array.isArray(object?.threats)
        ? object.threats.map((e: any) => ThreatSignal.fromJSON(e))
        : [],
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
    };
  },

  toJSON(message: DetectThreatsResponse): unknown {
    const obj: any = {};
    if (message.threats?.length) {
      obj.threats = message.threats.map((e) => ThreatSignal.toJSON(e));
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DetectThreatsResponse>, I>>(base?: I): DetectThreatsResponse {
    return DetectThreatsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DetectThreatsResponse>, I>>(object: I): DetectThreatsResponse {
    const message = createBaseDetectThreatsResponse();
    message.threats = object.threats?.map((e) => ThreatSignal.fromPartial(e)) || [];
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    return message;
  },
};

function createBaseThreatSignal(): ThreatSignal {
  return { type: "", description: "", score: 0, metadata: undefined };
}

export const ThreatSignal: MessageFns<ThreatSignal> = {
  encode(message: ThreatSignal, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== "") {
      writer.uint32(10).string(message.type);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.score !== 0) {
      writer.uint32(25).double(message.score);
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ThreatSignal {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseThreatSignal();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 25) {
            break;
          }

          message.score = reader.double();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ThreatSignal {
    return {
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      score: isSet(object.score) ? globalThis.Number(object.score) : 0,
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
    };
  },

  toJSON(message: ThreatSignal): unknown {
    const obj: any = {};
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.score !== 0) {
      obj.score = message.score;
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ThreatSignal>, I>>(base?: I): ThreatSignal {
    return ThreatSignal.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ThreatSignal>, I>>(object: I): ThreatSignal {
    const message = createBaseThreatSignal();
    message.type = object.type ?? "";
    message.description = object.description ?? "";
    message.score = object.score ?? 0;
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    return message;
  },
};

function createBaseAuditEventRequest(): AuditEventRequest {
  return { eventType: "", principalId: "", resource: "", action: "", metadata: undefined };
}

export const AuditEventRequest: MessageFns<AuditEventRequest> = {
  encode(message: AuditEventRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.eventType !== "") {
      writer.uint32(10).string(message.eventType);
    }
    if (message.principalId !== "") {
      writer.uint32(18).string(message.principalId);
    }
    if (message.resource !== "") {
      writer.uint32(26).string(message.resource);
    }
    if (message.action !== "") {
      writer.uint32(34).string(message.action);
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AuditEventRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAuditEventRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.eventType = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.principalId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.resource = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.action = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AuditEventRequest {
    return {
      eventType: isSet(object.eventType) ? globalThis.String(object.eventType) : "",
      principalId: isSet(object.principalId) ? globalThis.String(object.principalId) : "",
      resource: isSet(object.resource) ? globalThis.String(object.resource) : "",
      action: isSet(object.action) ? globalThis.String(object.action) : "",
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
    };
  },

  toJSON(message: AuditEventRequest): unknown {
    const obj: any = {};
    if (message.eventType !== "") {
      obj.eventType = message.eventType;
    }
    if (message.principalId !== "") {
      obj.principalId = message.principalId;
    }
    if (message.resource !== "") {
      obj.resource = message.resource;
    }
    if (message.action !== "") {
      obj.action = message.action;
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AuditEventRequest>, I>>(base?: I): AuditEventRequest {
    return AuditEventRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AuditEventRequest>, I>>(object: I): AuditEventRequest {
    const message = createBaseAuditEventRequest();
    message.eventType = object.eventType ?? "";
    message.principalId = object.principalId ?? "";
    message.resource = object.resource ?? "";
    message.action = object.action ?? "";
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    return message;
  },
};

function createBaseAuditEventResponse(): AuditEventResponse {
  return { success: false, error: "", metadata: undefined };
}

export const AuditEventResponse: MessageFns<AuditEventResponse> = {
  encode(message: AuditEventResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.error !== "") {
      writer.uint32(18).string(message.error);
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AuditEventResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAuditEventResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.error = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AuditEventResponse {
    return {
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
      error: isSet(object.error) ? globalThis.String(object.error) : "",
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
    };
  },

  toJSON(message: AuditEventResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.error !== "") {
      obj.error = message.error;
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AuditEventResponse>, I>>(base?: I): AuditEventResponse {
    return AuditEventResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AuditEventResponse>, I>>(object: I): AuditEventResponse {
    const message = createBaseAuditEventResponse();
    message.success = object.success ?? false;
    message.error = object.error ?? "";
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    return message;
  },
};

export interface SecurityService {
  Authenticate(request: AuthenticateRequest): Promise<AuthenticateResponse>;
  Authorize(request: AuthorizeRequest): Promise<AuthorizeResponse>;
  IssueSecret(request: IssueSecretRequest): Promise<IssueSecretResponse>;
  ValidateCredential(request: ValidateCredentialRequest): Promise<ValidateCredentialResponse>;
  QueryEvents(request: QueryEventsRequest): Promise<QueryEventsResponse>;
  GetPolicy(request: GetPolicyRequest): Promise<GetPolicyResponse>;
  SetPolicy(request: SetPolicyRequest): Promise<SetPolicyResponse>;
  /** Enhanced monitoring and threat detection */
  DetectThreats(request: DetectThreatsRequest): Promise<DetectThreatsResponse>;
  AuditEvent(request: AuditEventRequest): Promise<AuditEventResponse>;
}

export const SecurityServiceServiceName = "security.v1.SecurityService";
export class SecurityServiceClientImpl implements SecurityService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || SecurityServiceServiceName;
    this.rpc = rpc;
    this.Authenticate = this.Authenticate.bind(this);
    this.Authorize = this.Authorize.bind(this);
    this.IssueSecret = this.IssueSecret.bind(this);
    this.ValidateCredential = this.ValidateCredential.bind(this);
    this.QueryEvents = this.QueryEvents.bind(this);
    this.GetPolicy = this.GetPolicy.bind(this);
    this.SetPolicy = this.SetPolicy.bind(this);
    this.DetectThreats = this.DetectThreats.bind(this);
    this.AuditEvent = this.AuditEvent.bind(this);
  }
  Authenticate(request: AuthenticateRequest): Promise<AuthenticateResponse> {
    const data = AuthenticateRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Authenticate", data);
    return promise.then((data) => AuthenticateResponse.decode(new BinaryReader(data)));
  }

  Authorize(request: AuthorizeRequest): Promise<AuthorizeResponse> {
    const data = AuthorizeRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Authorize", data);
    return promise.then((data) => AuthorizeResponse.decode(new BinaryReader(data)));
  }

  IssueSecret(request: IssueSecretRequest): Promise<IssueSecretResponse> {
    const data = IssueSecretRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "IssueSecret", data);
    return promise.then((data) => IssueSecretResponse.decode(new BinaryReader(data)));
  }

  ValidateCredential(request: ValidateCredentialRequest): Promise<ValidateCredentialResponse> {
    const data = ValidateCredentialRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ValidateCredential", data);
    return promise.then((data) => ValidateCredentialResponse.decode(new BinaryReader(data)));
  }

  QueryEvents(request: QueryEventsRequest): Promise<QueryEventsResponse> {
    const data = QueryEventsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "QueryEvents", data);
    return promise.then((data) => QueryEventsResponse.decode(new BinaryReader(data)));
  }

  GetPolicy(request: GetPolicyRequest): Promise<GetPolicyResponse> {
    const data = GetPolicyRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetPolicy", data);
    return promise.then((data) => GetPolicyResponse.decode(new BinaryReader(data)));
  }

  SetPolicy(request: SetPolicyRequest): Promise<SetPolicyResponse> {
    const data = SetPolicyRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "SetPolicy", data);
    return promise.then((data) => SetPolicyResponse.decode(new BinaryReader(data)));
  }

  DetectThreats(request: DetectThreatsRequest): Promise<DetectThreatsResponse> {
    const data = DetectThreatsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "DetectThreats", data);
    return promise.then((data) => DetectThreatsResponse.decode(new BinaryReader(data)));
  }

  AuditEvent(request: AuditEventRequest): Promise<AuditEventResponse> {
    const data = AuditEventRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "AuditEvent", data);
    return promise.then((data) => AuditEventResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000).toString();
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (globalThis.Number(t.seconds) || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
