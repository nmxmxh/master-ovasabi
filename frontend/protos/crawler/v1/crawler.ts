// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v5.29.3
// source: crawler/v1/crawler.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Observable } from "rxjs";
import { map } from "rxjs/operators";
import { Metadata } from "../../common/v1/metadata";
import { Timestamp } from "../../google/protobuf/timestamp";

export const protobufPackage = "crawler.v1";

/** TaskType defines the kind of resource the crawler should process. */
export enum TaskType {
  TASK_TYPE_UNSPECIFIED = 0,
  TASK_TYPE_HTML = 1,
  TASK_TYPE_TORRENT = 2,
  TASK_TYPE_API = 3,
  TASK_TYPE_FILE = 4,
  TASK_TYPE_SOCKET = 5,
  /** TASK_TYPE_BROWSER - For browser emulation */
  TASK_TYPE_BROWSER = 6,
  /** TASK_TYPE_ARCHIVE - For archive files (.zip, .tar.gz, etc.) */
  TASK_TYPE_ARCHIVE = 7,
  /** TASK_TYPE_VIDEO - For video files */
  TASK_TYPE_VIDEO = 8,
  /** TASK_TYPE_SHELL - For executing shell commands */
  TASK_TYPE_SHELL = 9,
  UNRECOGNIZED = -1,
}

export function taskTypeFromJSON(object: any): TaskType {
  switch (object) {
    case 0:
    case "TASK_TYPE_UNSPECIFIED":
      return TaskType.TASK_TYPE_UNSPECIFIED;
    case 1:
    case "TASK_TYPE_HTML":
      return TaskType.TASK_TYPE_HTML;
    case 2:
    case "TASK_TYPE_TORRENT":
      return TaskType.TASK_TYPE_TORRENT;
    case 3:
    case "TASK_TYPE_API":
      return TaskType.TASK_TYPE_API;
    case 4:
    case "TASK_TYPE_FILE":
      return TaskType.TASK_TYPE_FILE;
    case 5:
    case "TASK_TYPE_SOCKET":
      return TaskType.TASK_TYPE_SOCKET;
    case 6:
    case "TASK_TYPE_BROWSER":
      return TaskType.TASK_TYPE_BROWSER;
    case 7:
    case "TASK_TYPE_ARCHIVE":
      return TaskType.TASK_TYPE_ARCHIVE;
    case 8:
    case "TASK_TYPE_VIDEO":
      return TaskType.TASK_TYPE_VIDEO;
    case 9:
    case "TASK_TYPE_SHELL":
      return TaskType.TASK_TYPE_SHELL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return TaskType.UNRECOGNIZED;
  }
}

export function taskTypeToJSON(object: TaskType): string {
  switch (object) {
    case TaskType.TASK_TYPE_UNSPECIFIED:
      return "TASK_TYPE_UNSPECIFIED";
    case TaskType.TASK_TYPE_HTML:
      return "TASK_TYPE_HTML";
    case TaskType.TASK_TYPE_TORRENT:
      return "TASK_TYPE_TORRENT";
    case TaskType.TASK_TYPE_API:
      return "TASK_TYPE_API";
    case TaskType.TASK_TYPE_FILE:
      return "TASK_TYPE_FILE";
    case TaskType.TASK_TYPE_SOCKET:
      return "TASK_TYPE_SOCKET";
    case TaskType.TASK_TYPE_BROWSER:
      return "TASK_TYPE_BROWSER";
    case TaskType.TASK_TYPE_ARCHIVE:
      return "TASK_TYPE_ARCHIVE";
    case TaskType.TASK_TYPE_VIDEO:
      return "TASK_TYPE_VIDEO";
    case TaskType.TASK_TYPE_SHELL:
      return "TASK_TYPE_SHELL";
    case TaskType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** TaskStatus represents the lifecycle of a crawl task. */
export enum TaskStatus {
  TASK_STATUS_UNSPECIFIED = 0,
  TASK_STATUS_PENDING = 1,
  TASK_STATUS_PROCESSING = 2,
  TASK_STATUS_COMPLETED = 3,
  TASK_STATUS_FAILED = 4,
  /** TASK_STATUS_QUARANTINED - For tasks that fail security/cleaning */
  TASK_STATUS_QUARANTINED = 5,
  UNRECOGNIZED = -1,
}

export function taskStatusFromJSON(object: any): TaskStatus {
  switch (object) {
    case 0:
    case "TASK_STATUS_UNSPECIFIED":
      return TaskStatus.TASK_STATUS_UNSPECIFIED;
    case 1:
    case "TASK_STATUS_PENDING":
      return TaskStatus.TASK_STATUS_PENDING;
    case 2:
    case "TASK_STATUS_PROCESSING":
      return TaskStatus.TASK_STATUS_PROCESSING;
    case 3:
    case "TASK_STATUS_COMPLETED":
      return TaskStatus.TASK_STATUS_COMPLETED;
    case 4:
    case "TASK_STATUS_FAILED":
      return TaskStatus.TASK_STATUS_FAILED;
    case 5:
    case "TASK_STATUS_QUARANTINED":
      return TaskStatus.TASK_STATUS_QUARANTINED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return TaskStatus.UNRECOGNIZED;
  }
}

export function taskStatusToJSON(object: TaskStatus): string {
  switch (object) {
    case TaskStatus.TASK_STATUS_UNSPECIFIED:
      return "TASK_STATUS_UNSPECIFIED";
    case TaskStatus.TASK_STATUS_PENDING:
      return "TASK_STATUS_PENDING";
    case TaskStatus.TASK_STATUS_PROCESSING:
      return "TASK_STATUS_PROCESSING";
    case TaskStatus.TASK_STATUS_COMPLETED:
      return "TASK_STATUS_COMPLETED";
    case TaskStatus.TASK_STATUS_FAILED:
      return "TASK_STATUS_FAILED";
    case TaskStatus.TASK_STATUS_QUARANTINED:
      return "TASK_STATUS_QUARANTINED";
    case TaskStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** ContentType describes the nature of the extracted content. */
export enum ContentType {
  CONTENT_TYPE_UNSPECIFIED = 0,
  CONTENT_TYPE_TEXT = 1,
  CONTENT_TYPE_IMAGE = 2,
  CONTENT_TYPE_AUDIO = 3,
  CONTENT_TYPE_VIDEO = 4,
  CONTENT_TYPE_BINARY = 5,
  CONTENT_TYPE_HTML = 6,
  CONTENT_TYPE_PDF = 7,
  UNRECOGNIZED = -1,
}

export function contentTypeFromJSON(object: any): ContentType {
  switch (object) {
    case 0:
    case "CONTENT_TYPE_UNSPECIFIED":
      return ContentType.CONTENT_TYPE_UNSPECIFIED;
    case 1:
    case "CONTENT_TYPE_TEXT":
      return ContentType.CONTENT_TYPE_TEXT;
    case 2:
    case "CONTENT_TYPE_IMAGE":
      return ContentType.CONTENT_TYPE_IMAGE;
    case 3:
    case "CONTENT_TYPE_AUDIO":
      return ContentType.CONTENT_TYPE_AUDIO;
    case 4:
    case "CONTENT_TYPE_VIDEO":
      return ContentType.CONTENT_TYPE_VIDEO;
    case 5:
    case "CONTENT_TYPE_BINARY":
      return ContentType.CONTENT_TYPE_BINARY;
    case 6:
    case "CONTENT_TYPE_HTML":
      return ContentType.CONTENT_TYPE_HTML;
    case 7:
    case "CONTENT_TYPE_PDF":
      return ContentType.CONTENT_TYPE_PDF;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ContentType.UNRECOGNIZED;
  }
}

export function contentTypeToJSON(object: ContentType): string {
  switch (object) {
    case ContentType.CONTENT_TYPE_UNSPECIFIED:
      return "CONTENT_TYPE_UNSPECIFIED";
    case ContentType.CONTENT_TYPE_TEXT:
      return "CONTENT_TYPE_TEXT";
    case ContentType.CONTENT_TYPE_IMAGE:
      return "CONTENT_TYPE_IMAGE";
    case ContentType.CONTENT_TYPE_AUDIO:
      return "CONTENT_TYPE_AUDIO";
    case ContentType.CONTENT_TYPE_VIDEO:
      return "CONTENT_TYPE_VIDEO";
    case ContentType.CONTENT_TYPE_BINARY:
      return "CONTENT_TYPE_BINARY";
    case ContentType.CONTENT_TYPE_HTML:
      return "CONTENT_TYPE_HTML";
    case ContentType.CONTENT_TYPE_PDF:
      return "CONTENT_TYPE_PDF";
    case ContentType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * CrawlTask represents a job for a worker to execute.
 * It is designed to be traceable, secure, and extensible.
 */
export interface CrawlTask {
  id: string;
  uuid: string;
  masterId: string;
  masterUuid: string;
  /** The type of worker to use for this task. */
  type: TaskType;
  /** The resource to crawl (URL, file path, magnet link, etc.). */
  target: string;
  /** Recursion depth control. 0 means no recursion. */
  depth: number;
  /** e.g., ["no-executable", "text-only", "max-size:10MB"] */
  filters: string[];
  /** Current status of the task. */
  status: TaskStatus;
  createdAt?: Date | undefined;
  updatedAt?:
    | Date
    | undefined;
  /** Canonical metadata for orchestration, context, and extensibility. */
  metadata?: Metadata | undefined;
}

/** CrawlResult is the output from a worker after processing a task. */
export interface CrawlResult {
  id: string;
  uuid: string;
  masterId: string;
  masterUuid: string;
  /** Corresponds to the CrawlTask UUID. */
  taskUuid: string;
  /** Final status of the task. */
  status: TaskStatus;
  /** Raw or cleaned content. */
  extractedContent: Uint8Array;
  /** Links discovered during crawl. */
  extractedLinks: string[];
  /** Details on failure. */
  errorMessage: string;
  /** Enriched metadata from the crawl process. */
  metadata?: Metadata | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
}

export interface SubmitTaskRequest {
  task?: CrawlTask | undefined;
}

export interface SubmitTaskResponse {
  uuid: string;
  status: TaskStatus;
  /** e.g., "Task submitted successfully" */
  message: string;
}

export interface GetTaskStatusRequest {
  uuid: string;
}

export interface StreamResultsRequest {
  taskUuid: string;
}

function createBaseCrawlTask(): CrawlTask {
  return {
    id: "0",
    uuid: "",
    masterId: "0",
    masterUuid: "",
    type: 0,
    target: "",
    depth: 0,
    filters: [],
    status: 0,
    createdAt: undefined,
    updatedAt: undefined,
    metadata: undefined,
  };
}

export const CrawlTask: MessageFns<CrawlTask> = {
  encode(message: CrawlTask, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "0") {
      writer.uint32(8).int64(message.id);
    }
    if (message.uuid !== "") {
      writer.uint32(18).string(message.uuid);
    }
    if (message.masterId !== "0") {
      writer.uint32(24).int64(message.masterId);
    }
    if (message.masterUuid !== "") {
      writer.uint32(34).string(message.masterUuid);
    }
    if (message.type !== 0) {
      writer.uint32(40).int32(message.type);
    }
    if (message.target !== "") {
      writer.uint32(50).string(message.target);
    }
    if (message.depth !== 0) {
      writer.uint32(56).int32(message.depth);
    }
    for (const v of message.filters) {
      writer.uint32(66).string(v!);
    }
    if (message.status !== 0) {
      writer.uint32(72).int32(message.status);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(82).fork()).join();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.updatedAt), writer.uint32(90).fork()).join();
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(98).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CrawlTask {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCrawlTask();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.uuid = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.masterId = reader.int64().toString();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.masterUuid = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.target = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.depth = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.filters.push(reader.string());
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.updatedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CrawlTask {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "0",
      uuid: isSet(object.uuid) ? globalThis.String(object.uuid) : "",
      masterId: isSet(object.masterId) ? globalThis.String(object.masterId) : "0",
      masterUuid: isSet(object.masterUuid) ? globalThis.String(object.masterUuid) : "",
      type: isSet(object.type) ? taskTypeFromJSON(object.type) : 0,
      target: isSet(object.target) ? globalThis.String(object.target) : "",
      depth: isSet(object.depth) ? globalThis.Number(object.depth) : 0,
      filters: globalThis.Array.isArray(object?.filters) ? object.filters.map((e: any) => globalThis.String(e)) : [],
      status: isSet(object.status) ? taskStatusFromJSON(object.status) : 0,
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
    };
  },

  toJSON(message: CrawlTask): unknown {
    const obj: any = {};
    if (message.id !== "0") {
      obj.id = message.id;
    }
    if (message.uuid !== "") {
      obj.uuid = message.uuid;
    }
    if (message.masterId !== "0") {
      obj.masterId = message.masterId;
    }
    if (message.masterUuid !== "") {
      obj.masterUuid = message.masterUuid;
    }
    if (message.type !== 0) {
      obj.type = taskTypeToJSON(message.type);
    }
    if (message.target !== "") {
      obj.target = message.target;
    }
    if (message.depth !== 0) {
      obj.depth = Math.round(message.depth);
    }
    if (message.filters?.length) {
      obj.filters = message.filters;
    }
    if (message.status !== 0) {
      obj.status = taskStatusToJSON(message.status);
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = message.updatedAt.toISOString();
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CrawlTask>, I>>(base?: I): CrawlTask {
    return CrawlTask.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CrawlTask>, I>>(object: I): CrawlTask {
    const message = createBaseCrawlTask();
    message.id = object.id ?? "0";
    message.uuid = object.uuid ?? "";
    message.masterId = object.masterId ?? "0";
    message.masterUuid = object.masterUuid ?? "";
    message.type = object.type ?? 0;
    message.target = object.target ?? "";
    message.depth = object.depth ?? 0;
    message.filters = object.filters?.map((e) => e) || [];
    message.status = object.status ?? 0;
    message.createdAt = object.createdAt ?? undefined;
    message.updatedAt = object.updatedAt ?? undefined;
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    return message;
  },
};

function createBaseCrawlResult(): CrawlResult {
  return {
    id: "0",
    uuid: "",
    masterId: "0",
    masterUuid: "",
    taskUuid: "",
    status: 0,
    extractedContent: new Uint8Array(0),
    extractedLinks: [],
    errorMessage: "",
    metadata: undefined,
    createdAt: undefined,
    updatedAt: undefined,
  };
}

export const CrawlResult: MessageFns<CrawlResult> = {
  encode(message: CrawlResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "0") {
      writer.uint32(8).int64(message.id);
    }
    if (message.uuid !== "") {
      writer.uint32(18).string(message.uuid);
    }
    if (message.masterId !== "0") {
      writer.uint32(24).int64(message.masterId);
    }
    if (message.masterUuid !== "") {
      writer.uint32(34).string(message.masterUuid);
    }
    if (message.taskUuid !== "") {
      writer.uint32(42).string(message.taskUuid);
    }
    if (message.status !== 0) {
      writer.uint32(48).int32(message.status);
    }
    if (message.extractedContent.length !== 0) {
      writer.uint32(58).bytes(message.extractedContent);
    }
    for (const v of message.extractedLinks) {
      writer.uint32(66).string(v!);
    }
    if (message.errorMessage !== "") {
      writer.uint32(74).string(message.errorMessage);
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(82).fork()).join();
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(90).fork()).join();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.updatedAt), writer.uint32(98).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CrawlResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCrawlResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.uuid = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.masterId = reader.int64().toString();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.masterUuid = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.taskUuid = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.extractedContent = reader.bytes();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.extractedLinks.push(reader.string());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.updatedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CrawlResult {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "0",
      uuid: isSet(object.uuid) ? globalThis.String(object.uuid) : "",
      masterId: isSet(object.masterId) ? globalThis.String(object.masterId) : "0",
      masterUuid: isSet(object.masterUuid) ? globalThis.String(object.masterUuid) : "",
      taskUuid: isSet(object.taskUuid) ? globalThis.String(object.taskUuid) : "",
      status: isSet(object.status) ? taskStatusFromJSON(object.status) : 0,
      extractedContent: isSet(object.extractedContent) ? bytesFromBase64(object.extractedContent) : new Uint8Array(0),
      extractedLinks: globalThis.Array.isArray(object?.extractedLinks)
        ? object.extractedLinks.map((e: any) => globalThis.String(e))
        : [],
      errorMessage: isSet(object.errorMessage) ? globalThis.String(object.errorMessage) : "",
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
    };
  },

  toJSON(message: CrawlResult): unknown {
    const obj: any = {};
    if (message.id !== "0") {
      obj.id = message.id;
    }
    if (message.uuid !== "") {
      obj.uuid = message.uuid;
    }
    if (message.masterId !== "0") {
      obj.masterId = message.masterId;
    }
    if (message.masterUuid !== "") {
      obj.masterUuid = message.masterUuid;
    }
    if (message.taskUuid !== "") {
      obj.taskUuid = message.taskUuid;
    }
    if (message.status !== 0) {
      obj.status = taskStatusToJSON(message.status);
    }
    if (message.extractedContent.length !== 0) {
      obj.extractedContent = base64FromBytes(message.extractedContent);
    }
    if (message.extractedLinks?.length) {
      obj.extractedLinks = message.extractedLinks;
    }
    if (message.errorMessage !== "") {
      obj.errorMessage = message.errorMessage;
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = message.updatedAt.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CrawlResult>, I>>(base?: I): CrawlResult {
    return CrawlResult.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CrawlResult>, I>>(object: I): CrawlResult {
    const message = createBaseCrawlResult();
    message.id = object.id ?? "0";
    message.uuid = object.uuid ?? "";
    message.masterId = object.masterId ?? "0";
    message.masterUuid = object.masterUuid ?? "";
    message.taskUuid = object.taskUuid ?? "";
    message.status = object.status ?? 0;
    message.extractedContent = object.extractedContent ?? new Uint8Array(0);
    message.extractedLinks = object.extractedLinks?.map((e) => e) || [];
    message.errorMessage = object.errorMessage ?? "";
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    message.createdAt = object.createdAt ?? undefined;
    message.updatedAt = object.updatedAt ?? undefined;
    return message;
  },
};

function createBaseSubmitTaskRequest(): SubmitTaskRequest {
  return { task: undefined };
}

export const SubmitTaskRequest: MessageFns<SubmitTaskRequest> = {
  encode(message: SubmitTaskRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.task !== undefined) {
      CrawlTask.encode(message.task, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SubmitTaskRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubmitTaskRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.task = CrawlTask.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SubmitTaskRequest {
    return { task: isSet(object.task) ? CrawlTask.fromJSON(object.task) : undefined };
  },

  toJSON(message: SubmitTaskRequest): unknown {
    const obj: any = {};
    if (message.task !== undefined) {
      obj.task = CrawlTask.toJSON(message.task);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SubmitTaskRequest>, I>>(base?: I): SubmitTaskRequest {
    return SubmitTaskRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SubmitTaskRequest>, I>>(object: I): SubmitTaskRequest {
    const message = createBaseSubmitTaskRequest();
    message.task = (object.task !== undefined && object.task !== null) ? CrawlTask.fromPartial(object.task) : undefined;
    return message;
  },
};

function createBaseSubmitTaskResponse(): SubmitTaskResponse {
  return { uuid: "", status: 0, message: "" };
}

export const SubmitTaskResponse: MessageFns<SubmitTaskResponse> = {
  encode(message: SubmitTaskResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.uuid !== "") {
      writer.uint32(10).string(message.uuid);
    }
    if (message.status !== 0) {
      writer.uint32(16).int32(message.status);
    }
    if (message.message !== "") {
      writer.uint32(26).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SubmitTaskResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubmitTaskResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.uuid = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SubmitTaskResponse {
    return {
      uuid: isSet(object.uuid) ? globalThis.String(object.uuid) : "",
      status: isSet(object.status) ? taskStatusFromJSON(object.status) : 0,
      message: isSet(object.message) ? globalThis.String(object.message) : "",
    };
  },

  toJSON(message: SubmitTaskResponse): unknown {
    const obj: any = {};
    if (message.uuid !== "") {
      obj.uuid = message.uuid;
    }
    if (message.status !== 0) {
      obj.status = taskStatusToJSON(message.status);
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SubmitTaskResponse>, I>>(base?: I): SubmitTaskResponse {
    return SubmitTaskResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SubmitTaskResponse>, I>>(object: I): SubmitTaskResponse {
    const message = createBaseSubmitTaskResponse();
    message.uuid = object.uuid ?? "";
    message.status = object.status ?? 0;
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseGetTaskStatusRequest(): GetTaskStatusRequest {
  return { uuid: "" };
}

export const GetTaskStatusRequest: MessageFns<GetTaskStatusRequest> = {
  encode(message: GetTaskStatusRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.uuid !== "") {
      writer.uint32(10).string(message.uuid);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetTaskStatusRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTaskStatusRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.uuid = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetTaskStatusRequest {
    return { uuid: isSet(object.uuid) ? globalThis.String(object.uuid) : "" };
  },

  toJSON(message: GetTaskStatusRequest): unknown {
    const obj: any = {};
    if (message.uuid !== "") {
      obj.uuid = message.uuid;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetTaskStatusRequest>, I>>(base?: I): GetTaskStatusRequest {
    return GetTaskStatusRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetTaskStatusRequest>, I>>(object: I): GetTaskStatusRequest {
    const message = createBaseGetTaskStatusRequest();
    message.uuid = object.uuid ?? "";
    return message;
  },
};

function createBaseStreamResultsRequest(): StreamResultsRequest {
  return { taskUuid: "" };
}

export const StreamResultsRequest: MessageFns<StreamResultsRequest> = {
  encode(message: StreamResultsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.taskUuid !== "") {
      writer.uint32(10).string(message.taskUuid);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StreamResultsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamResultsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.taskUuid = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamResultsRequest {
    return { taskUuid: isSet(object.taskUuid) ? globalThis.String(object.taskUuid) : "" };
  },

  toJSON(message: StreamResultsRequest): unknown {
    const obj: any = {};
    if (message.taskUuid !== "") {
      obj.taskUuid = message.taskUuid;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StreamResultsRequest>, I>>(base?: I): StreamResultsRequest {
    return StreamResultsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StreamResultsRequest>, I>>(object: I): StreamResultsRequest {
    const message = createBaseStreamResultsRequest();
    message.taskUuid = object.taskUuid ?? "";
    return message;
  },
};

/** CrawlerService defines the gRPC interface for the Devourer Crawler System. */
export interface CrawlerService {
  /**
   * SubmitTask sends a new crawl task to the orchestrator.
   * Returns a response with the task UUID and initial status.
   */
  SubmitTask(request: SubmitTaskRequest): Promise<SubmitTaskResponse>;
  /** GetTaskStatus retrieves the current status of a crawl task. */
  GetTaskStatus(request: GetTaskStatusRequest): Promise<CrawlTask>;
  /**
   * StreamResults provides a real-time stream of results for a given task.
   * This is ideal for long-running crawls or monitoring.
   */
  StreamResults(request: StreamResultsRequest): Observable<CrawlResult>;
}

export const CrawlerServiceServiceName = "crawler.v1.CrawlerService";
export class CrawlerServiceClientImpl implements CrawlerService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || CrawlerServiceServiceName;
    this.rpc = rpc;
    this.SubmitTask = this.SubmitTask.bind(this);
    this.GetTaskStatus = this.GetTaskStatus.bind(this);
    this.StreamResults = this.StreamResults.bind(this);
  }
  SubmitTask(request: SubmitTaskRequest): Promise<SubmitTaskResponse> {
    const data = SubmitTaskRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "SubmitTask", data);
    return promise.then((data) => SubmitTaskResponse.decode(new BinaryReader(data)));
  }

  GetTaskStatus(request: GetTaskStatusRequest): Promise<CrawlTask> {
    const data = GetTaskStatusRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetTaskStatus", data);
    return promise.then((data) => CrawlTask.decode(new BinaryReader(data)));
  }

  StreamResults(request: StreamResultsRequest): Observable<CrawlResult> {
    const data = StreamResultsRequest.encode(request).finish();
    const result = this.rpc.serverStreamingRequest(this.service, "StreamResults", data);
    return result.pipe(map((data) => CrawlResult.decode(new BinaryReader(data))));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
  clientStreamingRequest(service: string, method: string, data: Observable<Uint8Array>): Promise<Uint8Array>;
  serverStreamingRequest(service: string, method: string, data: Uint8Array): Observable<Uint8Array>;
  bidirectionalStreamingRequest(service: string, method: string, data: Observable<Uint8Array>): Observable<Uint8Array>;
}

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000).toString();
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (globalThis.Number(t.seconds) || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
