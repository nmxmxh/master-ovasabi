// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v5.29.3
// source: search/v1/search.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Metadata } from "../../common/v1/metadata";
import { Empty } from "../../google/protobuf/empty";
import { Struct } from "../../google/protobuf/struct";

export const protobufPackage = "search.v1";

/** Request for a search query. */
export interface SearchRequest {
  /** The search query string */
  query: string;
  types: string[];
  /** "user", "campaign") */
  pageSize: number;
  /** Page number (1-based) */
  pageNumber: number;
  /** Extensible filters, context, etc. */
  metadata?:
    | Metadata
    | undefined;
  /** campaign/tenant context */
  campaignId: string;
}

/** A single search result. */
export interface SearchResult {
  /** Entity ID */
  id: string;
  /** Entity type (e.g., content, campaign, user, talent) */
  entityType: string;
  /** Relevance score */
  score: number;
  /** Key fields (title, snippet, etc.) */
  fields?:
    | { [key: string]: any }
    | undefined;
  /** Enriched metadata */
  metadata?: Metadata | undefined;
}

/** Response for a search query. */
export interface SearchResponse {
  results: SearchResult[];
  /** Total results */
  total: number;
  pageNumber: number;
  pageSize: number;
  /** Aggregations, facets, etc. */
  metadata?: Metadata | undefined;
}

/** Request for suggestions/autocomplete. */
export interface SuggestRequest {
  /** Partial query for autocomplete */
  prefix: string;
  types: string[];
  limit: number;
  metadata?:
    | Metadata
    | undefined;
  /** campaign/tenant context */
  campaignId: string;
}

/** Response for suggestions/autocomplete. */
export interface SuggestResponse {
  suggestions: string[];
  metadata?: Metadata | undefined;
}

/** Searchable field registry endpoint */
export interface SearchableField {
  name: string;
  type: string;
}

export interface SearchableFields {
  fields: SearchableField[];
}

export interface ListSearchableFieldsResponse {
  entities: { [key: string]: SearchableFields };
}

export interface ListSearchableFieldsResponse_EntitiesEntry {
  key: string;
  value?: SearchableFields | undefined;
}

function createBaseSearchRequest(): SearchRequest {
  return { query: "", types: [], pageSize: 0, pageNumber: 0, metadata: undefined, campaignId: "0" };
}

export const SearchRequest: MessageFns<SearchRequest> = {
  encode(message: SearchRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.query !== "") {
      writer.uint32(10).string(message.query);
    }
    for (const v of message.types) {
      writer.uint32(18).string(v!);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.pageNumber !== 0) {
      writer.uint32(32).int32(message.pageNumber);
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(42).fork()).join();
    }
    if (message.campaignId !== "0") {
      writer.uint32(48).int64(message.campaignId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.query = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.types.push(reader.string());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.pageNumber = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.campaignId = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchRequest {
    return {
      query: isSet(object.query) ? globalThis.String(object.query) : "",
      types: globalThis.Array.isArray(object?.types) ? object.types.map((e: any) => globalThis.String(e)) : [],
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageNumber: isSet(object.pageNumber) ? globalThis.Number(object.pageNumber) : 0,
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
      campaignId: isSet(object.campaignId) ? globalThis.String(object.campaignId) : "0",
    };
  },

  toJSON(message: SearchRequest): unknown {
    const obj: any = {};
    if (message.query !== "") {
      obj.query = message.query;
    }
    if (message.types?.length) {
      obj.types = message.types;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageNumber !== 0) {
      obj.pageNumber = Math.round(message.pageNumber);
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    if (message.campaignId !== "0") {
      obj.campaignId = message.campaignId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SearchRequest>, I>>(base?: I): SearchRequest {
    return SearchRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SearchRequest>, I>>(object: I): SearchRequest {
    const message = createBaseSearchRequest();
    message.query = object.query ?? "";
    message.types = object.types?.map((e) => e) || [];
    message.pageSize = object.pageSize ?? 0;
    message.pageNumber = object.pageNumber ?? 0;
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    message.campaignId = object.campaignId ?? "0";
    return message;
  },
};

function createBaseSearchResult(): SearchResult {
  return { id: "", entityType: "", score: 0, fields: undefined, metadata: undefined };
}

export const SearchResult: MessageFns<SearchResult> = {
  encode(message: SearchResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.entityType !== "") {
      writer.uint32(18).string(message.entityType);
    }
    if (message.score !== 0) {
      writer.uint32(29).float(message.score);
    }
    if (message.fields !== undefined) {
      Struct.encode(Struct.wrap(message.fields), writer.uint32(34).fork()).join();
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.entityType = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 29) {
            break;
          }

          message.score = reader.float();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.fields = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchResult {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      entityType: isSet(object.entityType) ? globalThis.String(object.entityType) : "",
      score: isSet(object.score) ? globalThis.Number(object.score) : 0,
      fields: isObject(object.fields) ? object.fields : undefined,
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
    };
  },

  toJSON(message: SearchResult): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.entityType !== "") {
      obj.entityType = message.entityType;
    }
    if (message.score !== 0) {
      obj.score = message.score;
    }
    if (message.fields !== undefined) {
      obj.fields = message.fields;
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SearchResult>, I>>(base?: I): SearchResult {
    return SearchResult.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SearchResult>, I>>(object: I): SearchResult {
    const message = createBaseSearchResult();
    message.id = object.id ?? "";
    message.entityType = object.entityType ?? "";
    message.score = object.score ?? 0;
    message.fields = object.fields ?? undefined;
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    return message;
  },
};

function createBaseSearchResponse(): SearchResponse {
  return { results: [], total: 0, pageNumber: 0, pageSize: 0, metadata: undefined };
}

export const SearchResponse: MessageFns<SearchResponse> = {
  encode(message: SearchResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.results) {
      SearchResult.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.total !== 0) {
      writer.uint32(16).int32(message.total);
    }
    if (message.pageNumber !== 0) {
      writer.uint32(24).int32(message.pageNumber);
    }
    if (message.pageSize !== 0) {
      writer.uint32(32).int32(message.pageSize);
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.results.push(SearchResult.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.total = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.pageNumber = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchResponse {
    return {
      results: globalThis.Array.isArray(object?.results)
        ? object.results.map((e: any) => SearchResult.fromJSON(e))
        : [],
      total: isSet(object.total) ? globalThis.Number(object.total) : 0,
      pageNumber: isSet(object.pageNumber) ? globalThis.Number(object.pageNumber) : 0,
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
    };
  },

  toJSON(message: SearchResponse): unknown {
    const obj: any = {};
    if (message.results?.length) {
      obj.results = message.results.map((e) => SearchResult.toJSON(e));
    }
    if (message.total !== 0) {
      obj.total = Math.round(message.total);
    }
    if (message.pageNumber !== 0) {
      obj.pageNumber = Math.round(message.pageNumber);
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SearchResponse>, I>>(base?: I): SearchResponse {
    return SearchResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SearchResponse>, I>>(object: I): SearchResponse {
    const message = createBaseSearchResponse();
    message.results = object.results?.map((e) => SearchResult.fromPartial(e)) || [];
    message.total = object.total ?? 0;
    message.pageNumber = object.pageNumber ?? 0;
    message.pageSize = object.pageSize ?? 0;
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    return message;
  },
};

function createBaseSuggestRequest(): SuggestRequest {
  return { prefix: "", types: [], limit: 0, metadata: undefined, campaignId: "0" };
}

export const SuggestRequest: MessageFns<SuggestRequest> = {
  encode(message: SuggestRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.prefix !== "") {
      writer.uint32(10).string(message.prefix);
    }
    for (const v of message.types) {
      writer.uint32(18).string(v!);
    }
    if (message.limit !== 0) {
      writer.uint32(24).int32(message.limit);
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(34).fork()).join();
    }
    if (message.campaignId !== "0") {
      writer.uint32(40).int64(message.campaignId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SuggestRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSuggestRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.prefix = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.types.push(reader.string());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.limit = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.campaignId = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SuggestRequest {
    return {
      prefix: isSet(object.prefix) ? globalThis.String(object.prefix) : "",
      types: globalThis.Array.isArray(object?.types) ? object.types.map((e: any) => globalThis.String(e)) : [],
      limit: isSet(object.limit) ? globalThis.Number(object.limit) : 0,
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
      campaignId: isSet(object.campaignId) ? globalThis.String(object.campaignId) : "0",
    };
  },

  toJSON(message: SuggestRequest): unknown {
    const obj: any = {};
    if (message.prefix !== "") {
      obj.prefix = message.prefix;
    }
    if (message.types?.length) {
      obj.types = message.types;
    }
    if (message.limit !== 0) {
      obj.limit = Math.round(message.limit);
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    if (message.campaignId !== "0") {
      obj.campaignId = message.campaignId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SuggestRequest>, I>>(base?: I): SuggestRequest {
    return SuggestRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SuggestRequest>, I>>(object: I): SuggestRequest {
    const message = createBaseSuggestRequest();
    message.prefix = object.prefix ?? "";
    message.types = object.types?.map((e) => e) || [];
    message.limit = object.limit ?? 0;
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    message.campaignId = object.campaignId ?? "0";
    return message;
  },
};

function createBaseSuggestResponse(): SuggestResponse {
  return { suggestions: [], metadata: undefined };
}

export const SuggestResponse: MessageFns<SuggestResponse> = {
  encode(message: SuggestResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.suggestions) {
      writer.uint32(10).string(v!);
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SuggestResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSuggestResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.suggestions.push(reader.string());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SuggestResponse {
    return {
      suggestions: globalThis.Array.isArray(object?.suggestions)
        ? object.suggestions.map((e: any) => globalThis.String(e))
        : [],
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
    };
  },

  toJSON(message: SuggestResponse): unknown {
    const obj: any = {};
    if (message.suggestions?.length) {
      obj.suggestions = message.suggestions;
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SuggestResponse>, I>>(base?: I): SuggestResponse {
    return SuggestResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SuggestResponse>, I>>(object: I): SuggestResponse {
    const message = createBaseSuggestResponse();
    message.suggestions = object.suggestions?.map((e) => e) || [];
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    return message;
  },
};

function createBaseSearchableField(): SearchableField {
  return { name: "", type: "" };
}

export const SearchableField: MessageFns<SearchableField> = {
  encode(message: SearchableField, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.type !== "") {
      writer.uint32(18).string(message.type);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchableField {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchableField();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.type = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchableField {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      type: isSet(object.type) ? globalThis.String(object.type) : "",
    };
  },

  toJSON(message: SearchableField): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SearchableField>, I>>(base?: I): SearchableField {
    return SearchableField.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SearchableField>, I>>(object: I): SearchableField {
    const message = createBaseSearchableField();
    message.name = object.name ?? "";
    message.type = object.type ?? "";
    return message;
  },
};

function createBaseSearchableFields(): SearchableFields {
  return { fields: [] };
}

export const SearchableFields: MessageFns<SearchableFields> = {
  encode(message: SearchableFields, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.fields) {
      SearchableField.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchableFields {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchableFields();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.fields.push(SearchableField.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchableFields {
    return {
      fields: globalThis.Array.isArray(object?.fields)
        ? object.fields.map((e: any) => SearchableField.fromJSON(e))
        : [],
    };
  },

  toJSON(message: SearchableFields): unknown {
    const obj: any = {};
    if (message.fields?.length) {
      obj.fields = message.fields.map((e) => SearchableField.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SearchableFields>, I>>(base?: I): SearchableFields {
    return SearchableFields.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SearchableFields>, I>>(object: I): SearchableFields {
    const message = createBaseSearchableFields();
    message.fields = object.fields?.map((e) => SearchableField.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListSearchableFieldsResponse(): ListSearchableFieldsResponse {
  return { entities: {} };
}

export const ListSearchableFieldsResponse: MessageFns<ListSearchableFieldsResponse> = {
  encode(message: ListSearchableFieldsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    Object.entries(message.entities).forEach(([key, value]) => {
      ListSearchableFieldsResponse_EntitiesEntry.encode({ key: key as any, value }, writer.uint32(10).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListSearchableFieldsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSearchableFieldsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          const entry1 = ListSearchableFieldsResponse_EntitiesEntry.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            message.entities[entry1.key] = entry1.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSearchableFieldsResponse {
    return {
      entities: isObject(object.entities)
        ? Object.entries(object.entities).reduce<{ [key: string]: SearchableFields }>((acc, [key, value]) => {
          acc[key] = SearchableFields.fromJSON(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: ListSearchableFieldsResponse): unknown {
    const obj: any = {};
    if (message.entities) {
      const entries = Object.entries(message.entities);
      if (entries.length > 0) {
        obj.entities = {};
        entries.forEach(([k, v]) => {
          obj.entities[k] = SearchableFields.toJSON(v);
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListSearchableFieldsResponse>, I>>(base?: I): ListSearchableFieldsResponse {
    return ListSearchableFieldsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListSearchableFieldsResponse>, I>>(object: I): ListSearchableFieldsResponse {
    const message = createBaseListSearchableFieldsResponse();
    message.entities = Object.entries(object.entities ?? {}).reduce<{ [key: string]: SearchableFields }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = SearchableFields.fromPartial(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseListSearchableFieldsResponse_EntitiesEntry(): ListSearchableFieldsResponse_EntitiesEntry {
  return { key: "", value: undefined };
}

export const ListSearchableFieldsResponse_EntitiesEntry: MessageFns<ListSearchableFieldsResponse_EntitiesEntry> = {
  encode(message: ListSearchableFieldsResponse_EntitiesEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      SearchableFields.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListSearchableFieldsResponse_EntitiesEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSearchableFieldsResponse_EntitiesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = SearchableFields.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSearchableFieldsResponse_EntitiesEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? SearchableFields.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: ListSearchableFieldsResponse_EntitiesEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = SearchableFields.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListSearchableFieldsResponse_EntitiesEntry>, I>>(
    base?: I,
  ): ListSearchableFieldsResponse_EntitiesEntry {
    return ListSearchableFieldsResponse_EntitiesEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListSearchableFieldsResponse_EntitiesEntry>, I>>(
    object: I,
  ): ListSearchableFieldsResponse_EntitiesEntry {
    const message = createBaseListSearchableFieldsResponse_EntitiesEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? SearchableFields.fromPartial(object.value)
      : undefined;
    return message;
  },
};

export interface SearchService {
  /** General search endpoint (full-text, fuzzy, entity) */
  Search(request: SearchRequest): Promise<SearchResponse>;
  /** Suggest/autocomplete endpoint */
  Suggest(request: SuggestRequest): Promise<SuggestResponse>;
  /** List all searchable fields for all entities */
  ListSearchableFields(request: Empty): Promise<ListSearchableFieldsResponse>;
}

export const SearchServiceServiceName = "search.v1.SearchService";
export class SearchServiceClientImpl implements SearchService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || SearchServiceServiceName;
    this.rpc = rpc;
    this.Search = this.Search.bind(this);
    this.Suggest = this.Suggest.bind(this);
    this.ListSearchableFields = this.ListSearchableFields.bind(this);
  }
  Search(request: SearchRequest): Promise<SearchResponse> {
    const data = SearchRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Search", data);
    return promise.then((data) => SearchResponse.decode(new BinaryReader(data)));
  }

  Suggest(request: SuggestRequest): Promise<SuggestResponse> {
    const data = SuggestRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Suggest", data);
    return promise.then((data) => SuggestResponse.decode(new BinaryReader(data)));
  }

  ListSearchableFields(request: Empty): Promise<ListSearchableFieldsResponse> {
    const data = Empty.encode(request).finish();
    const promise = this.rpc.request(this.service, "ListSearchableFields", data);
    return promise.then((data) => ListSearchableFieldsResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
