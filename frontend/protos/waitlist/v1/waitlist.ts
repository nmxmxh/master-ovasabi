// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v5.29.3
// source: waitlist/v1/waitlist.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Metadata } from "../../common/v1/metadata";
import { Struct } from "../../google/protobuf/struct";
import { Timestamp } from "../../google/protobuf/timestamp";

export const protobufPackage = "waitlist.v1";

/** WaitlistEntry represents a waitlist entry */
export interface WaitlistEntry {
  id: string;
  uuid: string;
  masterId: string;
  masterUuid: string;
  email: string;
  firstName: string;
  lastName: string;
  tier: string;
  reservedUsername?: string | undefined;
  intention: string;
  questionnaireAnswers?: { [key: string]: any } | undefined;
  interests: string[];
  referralUsername?: string | undefined;
  referralCode?: string | undefined;
  feedback?: string | undefined;
  additionalComments?: string | undefined;
  status: string;
  priorityScore: number;
  contactPreferences?: { [key: string]: any } | undefined;
  metadata?: Metadata | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  invitedAt?: Date | undefined;
  waitlistPosition?:
    | number
    | undefined;
  /** Campaign-specific fields for OVASABI website */
  campaignName: string;
  referralCount: number;
  referralPoints: number;
  locationCountry?: string | undefined;
  locationRegion?: string | undefined;
  locationCity?: string | undefined;
  locationLat?: number | undefined;
  locationLng?: number | undefined;
  ipAddress?: string | undefined;
  userAgent?: string | undefined;
  referrerUrl?: string | undefined;
  utmSource?: string | undefined;
  utmMedium?: string | undefined;
  utmCampaign?: string | undefined;
  utmTerm?: string | undefined;
  utmContent?: string | undefined;
}

/** LeaderboardEntry represents a leaderboard entry */
export interface LeaderboardEntry {
  id: string;
  uuid: string;
  reservedUsername?: string | undefined;
  firstName: string;
  lastName: string;
  tier: string;
  referralCount: number;
  referralPoints: number;
  priorityScore: number;
  locationCountry?: string | undefined;
  locationRegion?: string | undefined;
  locationCity?: string | undefined;
  createdAt?: Date | undefined;
  position: number;
}

/** ReferralRecord represents a referral relationship */
export interface ReferralRecord {
  id: string;
  uuid: string;
  referrerId: string;
  referrerUuid: string;
  referrerUsername: string;
  referredId: string;
  referredUuid: string;
  referredEmail: string;
  referralType: string;
  referralSource?: string | undefined;
  pointsAwarded: number;
  createdAt?: Date | undefined;
}

/** LocationStat represents location-based statistics */
export interface LocationStat {
  country: string;
  region?: string | undefined;
  city?: string | undefined;
  userCount: string;
  talentCount: string;
  pioneerCount: string;
  hustlerCount: string;
  businessCount: string;
  avgReferrals: number;
  maxReferrals: string;
}

/** ReferralStats represents referral statistics */
export interface ReferralStats {
  totalReferrals: string;
  totalReferralPoints: string;
  avgReferralsPerUser: number;
  topReferrers: LeaderboardEntry[];
}

/** WaitlistStats represents waitlist statistics */
export interface WaitlistStats {
  totalEntries: string;
  pendingEntries: string;
  invitedEntries: string;
  tierBreakdown: { [key: string]: string };
  statusBreakdown: { [key: string]: string };
  campaignStats: { [key: string]: string };
  locationStats: LocationStat[];
  referralStats?: ReferralStats | undefined;
}

export interface WaitlistStats_TierBreakdownEntry {
  key: string;
  value: string;
}

export interface WaitlistStats_StatusBreakdownEntry {
  key: string;
  value: string;
}

export interface WaitlistStats_CampaignStatsEntry {
  key: string;
  value: string;
}

/** Request/Response messages */
export interface CreateWaitlistEntryRequest {
  email: string;
  firstName: string;
  lastName: string;
  tier: string;
  reservedUsername?: string | undefined;
  intention: string;
  questionnaireAnswers?: { [key: string]: any } | undefined;
  interests: string[];
  referralUsername?: string | undefined;
  referralCode?: string | undefined;
  feedback?: string | undefined;
  additionalComments?: string | undefined;
  contactPreferences?: { [key: string]: any } | undefined;
  metadata?:
    | Metadata
    | undefined;
  /** Campaign tracking fields */
  campaignName: string;
  locationCountry?: string | undefined;
  locationRegion?: string | undefined;
  locationCity?: string | undefined;
  locationLat?: number | undefined;
  locationLng?: number | undefined;
  ipAddress?: string | undefined;
  userAgent?: string | undefined;
  referrerUrl?: string | undefined;
  utmSource?: string | undefined;
  utmMedium?: string | undefined;
  utmCampaign?: string | undefined;
  utmTerm?: string | undefined;
  utmContent?: string | undefined;
}

export interface CreateWaitlistEntryResponse {
  entry?: WaitlistEntry | undefined;
}

export interface GetWaitlistEntryRequest {
  id?: string | undefined;
  uuid?: string | undefined;
  email?: string | undefined;
}

export interface GetWaitlistEntryResponse {
  entry?: WaitlistEntry | undefined;
}

export interface UpdateWaitlistEntryRequest {
  id: string;
  email?: string | undefined;
  firstName?: string | undefined;
  lastName?: string | undefined;
  tier?: string | undefined;
  reservedUsername?: string | undefined;
  intention?: string | undefined;
  questionnaireAnswers?: { [key: string]: any } | undefined;
  interests: string[];
  referralUsername?: string | undefined;
  referralCode?: string | undefined;
  feedback?: string | undefined;
  additionalComments?: string | undefined;
  status?: string | undefined;
  priorityScore?: number | undefined;
  contactPreferences?: { [key: string]: any } | undefined;
  metadata?: Metadata | undefined;
}

export interface UpdateWaitlistEntryResponse {
  entry?: WaitlistEntry | undefined;
}

export interface ListWaitlistEntriesRequest {
  limit: number;
  offset: number;
  tierFilter?: string | undefined;
  statusFilter?: string | undefined;
  campaignFilter?: string | undefined;
}

export interface ListWaitlistEntriesResponse {
  entries: WaitlistEntry[];
  totalCount: string;
}

export interface InviteUserRequest {
  id: string;
}

export interface InviteUserResponse {
  success: boolean;
  message: string;
}

export interface CheckUsernameAvailabilityRequest {
  username: string;
}

export interface CheckUsernameAvailabilityResponse {
  available: boolean;
}

export interface ValidateReferralUsernameRequest {
  username: string;
}

export interface ValidateReferralUsernameResponse {
  valid: boolean;
}

export interface GetLeaderboardRequest {
  limit: number;
  campaign?: string | undefined;
}

export interface GetLeaderboardResponse {
  entries: LeaderboardEntry[];
}

export interface GetReferralsByUserRequest {
  userId: string;
}

export interface GetReferralsByUserResponse {
  referrals: ReferralRecord[];
}

export interface GetLocationStatsRequest {
  campaign?: string | undefined;
}

export interface GetLocationStatsResponse {
  stats: LocationStat[];
}

export interface GetWaitlistStatsRequest {
  campaign?: string | undefined;
}

export interface GetWaitlistStatsResponse {
  stats?: WaitlistStats | undefined;
}

export interface GetWaitlistPositionRequest {
  id: string;
}

export interface GetWaitlistPositionResponse {
  position: number;
}

function createBaseWaitlistEntry(): WaitlistEntry {
  return {
    id: "0",
    uuid: "",
    masterId: "0",
    masterUuid: "",
    email: "",
    firstName: "",
    lastName: "",
    tier: "",
    reservedUsername: undefined,
    intention: "",
    questionnaireAnswers: undefined,
    interests: [],
    referralUsername: undefined,
    referralCode: undefined,
    feedback: undefined,
    additionalComments: undefined,
    status: "",
    priorityScore: 0,
    contactPreferences: undefined,
    metadata: undefined,
    createdAt: undefined,
    updatedAt: undefined,
    invitedAt: undefined,
    waitlistPosition: undefined,
    campaignName: "",
    referralCount: 0,
    referralPoints: 0,
    locationCountry: undefined,
    locationRegion: undefined,
    locationCity: undefined,
    locationLat: undefined,
    locationLng: undefined,
    ipAddress: undefined,
    userAgent: undefined,
    referrerUrl: undefined,
    utmSource: undefined,
    utmMedium: undefined,
    utmCampaign: undefined,
    utmTerm: undefined,
    utmContent: undefined,
  };
}

export const WaitlistEntry: MessageFns<WaitlistEntry> = {
  encode(message: WaitlistEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "0") {
      writer.uint32(8).int64(message.id);
    }
    if (message.uuid !== "") {
      writer.uint32(18).string(message.uuid);
    }
    if (message.masterId !== "0") {
      writer.uint32(24).int64(message.masterId);
    }
    if (message.masterUuid !== "") {
      writer.uint32(34).string(message.masterUuid);
    }
    if (message.email !== "") {
      writer.uint32(42).string(message.email);
    }
    if (message.firstName !== "") {
      writer.uint32(50).string(message.firstName);
    }
    if (message.lastName !== "") {
      writer.uint32(58).string(message.lastName);
    }
    if (message.tier !== "") {
      writer.uint32(66).string(message.tier);
    }
    if (message.reservedUsername !== undefined) {
      writer.uint32(74).string(message.reservedUsername);
    }
    if (message.intention !== "") {
      writer.uint32(82).string(message.intention);
    }
    if (message.questionnaireAnswers !== undefined) {
      Struct.encode(Struct.wrap(message.questionnaireAnswers), writer.uint32(90).fork()).join();
    }
    for (const v of message.interests) {
      writer.uint32(98).string(v!);
    }
    if (message.referralUsername !== undefined) {
      writer.uint32(106).string(message.referralUsername);
    }
    if (message.referralCode !== undefined) {
      writer.uint32(114).string(message.referralCode);
    }
    if (message.feedback !== undefined) {
      writer.uint32(122).string(message.feedback);
    }
    if (message.additionalComments !== undefined) {
      writer.uint32(130).string(message.additionalComments);
    }
    if (message.status !== "") {
      writer.uint32(138).string(message.status);
    }
    if (message.priorityScore !== 0) {
      writer.uint32(144).int32(message.priorityScore);
    }
    if (message.contactPreferences !== undefined) {
      Struct.encode(Struct.wrap(message.contactPreferences), writer.uint32(154).fork()).join();
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(162).fork()).join();
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(170).fork()).join();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.updatedAt), writer.uint32(178).fork()).join();
    }
    if (message.invitedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.invitedAt), writer.uint32(186).fork()).join();
    }
    if (message.waitlistPosition !== undefined) {
      writer.uint32(192).int32(message.waitlistPosition);
    }
    if (message.campaignName !== "") {
      writer.uint32(202).string(message.campaignName);
    }
    if (message.referralCount !== 0) {
      writer.uint32(208).int32(message.referralCount);
    }
    if (message.referralPoints !== 0) {
      writer.uint32(216).int32(message.referralPoints);
    }
    if (message.locationCountry !== undefined) {
      writer.uint32(226).string(message.locationCountry);
    }
    if (message.locationRegion !== undefined) {
      writer.uint32(234).string(message.locationRegion);
    }
    if (message.locationCity !== undefined) {
      writer.uint32(242).string(message.locationCity);
    }
    if (message.locationLat !== undefined) {
      writer.uint32(249).double(message.locationLat);
    }
    if (message.locationLng !== undefined) {
      writer.uint32(257).double(message.locationLng);
    }
    if (message.ipAddress !== undefined) {
      writer.uint32(266).string(message.ipAddress);
    }
    if (message.userAgent !== undefined) {
      writer.uint32(274).string(message.userAgent);
    }
    if (message.referrerUrl !== undefined) {
      writer.uint32(282).string(message.referrerUrl);
    }
    if (message.utmSource !== undefined) {
      writer.uint32(290).string(message.utmSource);
    }
    if (message.utmMedium !== undefined) {
      writer.uint32(298).string(message.utmMedium);
    }
    if (message.utmCampaign !== undefined) {
      writer.uint32(306).string(message.utmCampaign);
    }
    if (message.utmTerm !== undefined) {
      writer.uint32(314).string(message.utmTerm);
    }
    if (message.utmContent !== undefined) {
      writer.uint32(322).string(message.utmContent);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WaitlistEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWaitlistEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.uuid = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.masterId = reader.int64().toString();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.masterUuid = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.firstName = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.lastName = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.tier = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.reservedUsername = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.intention = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.questionnaireAnswers = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.interests.push(reader.string());
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.referralUsername = reader.string();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.referralCode = reader.string();
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.feedback = reader.string();
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.additionalComments = reader.string();
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 18: {
          if (tag !== 144) {
            break;
          }

          message.priorityScore = reader.int32();
          continue;
        }
        case 19: {
          if (tag !== 154) {
            break;
          }

          message.contactPreferences = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        }
        case 20: {
          if (tag !== 162) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
        case 21: {
          if (tag !== 170) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 22: {
          if (tag !== 178) {
            break;
          }

          message.updatedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 23: {
          if (tag !== 186) {
            break;
          }

          message.invitedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 24: {
          if (tag !== 192) {
            break;
          }

          message.waitlistPosition = reader.int32();
          continue;
        }
        case 25: {
          if (tag !== 202) {
            break;
          }

          message.campaignName = reader.string();
          continue;
        }
        case 26: {
          if (tag !== 208) {
            break;
          }

          message.referralCount = reader.int32();
          continue;
        }
        case 27: {
          if (tag !== 216) {
            break;
          }

          message.referralPoints = reader.int32();
          continue;
        }
        case 28: {
          if (tag !== 226) {
            break;
          }

          message.locationCountry = reader.string();
          continue;
        }
        case 29: {
          if (tag !== 234) {
            break;
          }

          message.locationRegion = reader.string();
          continue;
        }
        case 30: {
          if (tag !== 242) {
            break;
          }

          message.locationCity = reader.string();
          continue;
        }
        case 31: {
          if (tag !== 249) {
            break;
          }

          message.locationLat = reader.double();
          continue;
        }
        case 32: {
          if (tag !== 257) {
            break;
          }

          message.locationLng = reader.double();
          continue;
        }
        case 33: {
          if (tag !== 266) {
            break;
          }

          message.ipAddress = reader.string();
          continue;
        }
        case 34: {
          if (tag !== 274) {
            break;
          }

          message.userAgent = reader.string();
          continue;
        }
        case 35: {
          if (tag !== 282) {
            break;
          }

          message.referrerUrl = reader.string();
          continue;
        }
        case 36: {
          if (tag !== 290) {
            break;
          }

          message.utmSource = reader.string();
          continue;
        }
        case 37: {
          if (tag !== 298) {
            break;
          }

          message.utmMedium = reader.string();
          continue;
        }
        case 38: {
          if (tag !== 306) {
            break;
          }

          message.utmCampaign = reader.string();
          continue;
        }
        case 39: {
          if (tag !== 314) {
            break;
          }

          message.utmTerm = reader.string();
          continue;
        }
        case 40: {
          if (tag !== 322) {
            break;
          }

          message.utmContent = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WaitlistEntry {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "0",
      uuid: isSet(object.uuid) ? globalThis.String(object.uuid) : "",
      masterId: isSet(object.masterId) ? globalThis.String(object.masterId) : "0",
      masterUuid: isSet(object.masterUuid) ? globalThis.String(object.masterUuid) : "",
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      firstName: isSet(object.firstName) ? globalThis.String(object.firstName) : "",
      lastName: isSet(object.lastName) ? globalThis.String(object.lastName) : "",
      tier: isSet(object.tier) ? globalThis.String(object.tier) : "",
      reservedUsername: isSet(object.reservedUsername) ? globalThis.String(object.reservedUsername) : undefined,
      intention: isSet(object.intention) ? globalThis.String(object.intention) : "",
      questionnaireAnswers: isObject(object.questionnaireAnswers) ? object.questionnaireAnswers : undefined,
      interests: globalThis.Array.isArray(object?.interests)
        ? object.interests.map((e: any) => globalThis.String(e))
        : [],
      referralUsername: isSet(object.referralUsername) ? globalThis.String(object.referralUsername) : undefined,
      referralCode: isSet(object.referralCode) ? globalThis.String(object.referralCode) : undefined,
      feedback: isSet(object.feedback) ? globalThis.String(object.feedback) : undefined,
      additionalComments: isSet(object.additionalComments) ? globalThis.String(object.additionalComments) : undefined,
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      priorityScore: isSet(object.priorityScore) ? globalThis.Number(object.priorityScore) : 0,
      contactPreferences: isObject(object.contactPreferences) ? object.contactPreferences : undefined,
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
      invitedAt: isSet(object.invitedAt) ? fromJsonTimestamp(object.invitedAt) : undefined,
      waitlistPosition: isSet(object.waitlistPosition) ? globalThis.Number(object.waitlistPosition) : undefined,
      campaignName: isSet(object.campaignName) ? globalThis.String(object.campaignName) : "",
      referralCount: isSet(object.referralCount) ? globalThis.Number(object.referralCount) : 0,
      referralPoints: isSet(object.referralPoints) ? globalThis.Number(object.referralPoints) : 0,
      locationCountry: isSet(object.locationCountry) ? globalThis.String(object.locationCountry) : undefined,
      locationRegion: isSet(object.locationRegion) ? globalThis.String(object.locationRegion) : undefined,
      locationCity: isSet(object.locationCity) ? globalThis.String(object.locationCity) : undefined,
      locationLat: isSet(object.locationLat) ? globalThis.Number(object.locationLat) : undefined,
      locationLng: isSet(object.locationLng) ? globalThis.Number(object.locationLng) : undefined,
      ipAddress: isSet(object.ipAddress) ? globalThis.String(object.ipAddress) : undefined,
      userAgent: isSet(object.userAgent) ? globalThis.String(object.userAgent) : undefined,
      referrerUrl: isSet(object.referrerUrl) ? globalThis.String(object.referrerUrl) : undefined,
      utmSource: isSet(object.utmSource) ? globalThis.String(object.utmSource) : undefined,
      utmMedium: isSet(object.utmMedium) ? globalThis.String(object.utmMedium) : undefined,
      utmCampaign: isSet(object.utmCampaign) ? globalThis.String(object.utmCampaign) : undefined,
      utmTerm: isSet(object.utmTerm) ? globalThis.String(object.utmTerm) : undefined,
      utmContent: isSet(object.utmContent) ? globalThis.String(object.utmContent) : undefined,
    };
  },

  toJSON(message: WaitlistEntry): unknown {
    const obj: any = {};
    if (message.id !== "0") {
      obj.id = message.id;
    }
    if (message.uuid !== "") {
      obj.uuid = message.uuid;
    }
    if (message.masterId !== "0") {
      obj.masterId = message.masterId;
    }
    if (message.masterUuid !== "") {
      obj.masterUuid = message.masterUuid;
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.firstName !== "") {
      obj.firstName = message.firstName;
    }
    if (message.lastName !== "") {
      obj.lastName = message.lastName;
    }
    if (message.tier !== "") {
      obj.tier = message.tier;
    }
    if (message.reservedUsername !== undefined) {
      obj.reservedUsername = message.reservedUsername;
    }
    if (message.intention !== "") {
      obj.intention = message.intention;
    }
    if (message.questionnaireAnswers !== undefined) {
      obj.questionnaireAnswers = message.questionnaireAnswers;
    }
    if (message.interests?.length) {
      obj.interests = message.interests;
    }
    if (message.referralUsername !== undefined) {
      obj.referralUsername = message.referralUsername;
    }
    if (message.referralCode !== undefined) {
      obj.referralCode = message.referralCode;
    }
    if (message.feedback !== undefined) {
      obj.feedback = message.feedback;
    }
    if (message.additionalComments !== undefined) {
      obj.additionalComments = message.additionalComments;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.priorityScore !== 0) {
      obj.priorityScore = Math.round(message.priorityScore);
    }
    if (message.contactPreferences !== undefined) {
      obj.contactPreferences = message.contactPreferences;
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = message.updatedAt.toISOString();
    }
    if (message.invitedAt !== undefined) {
      obj.invitedAt = message.invitedAt.toISOString();
    }
    if (message.waitlistPosition !== undefined) {
      obj.waitlistPosition = Math.round(message.waitlistPosition);
    }
    if (message.campaignName !== "") {
      obj.campaignName = message.campaignName;
    }
    if (message.referralCount !== 0) {
      obj.referralCount = Math.round(message.referralCount);
    }
    if (message.referralPoints !== 0) {
      obj.referralPoints = Math.round(message.referralPoints);
    }
    if (message.locationCountry !== undefined) {
      obj.locationCountry = message.locationCountry;
    }
    if (message.locationRegion !== undefined) {
      obj.locationRegion = message.locationRegion;
    }
    if (message.locationCity !== undefined) {
      obj.locationCity = message.locationCity;
    }
    if (message.locationLat !== undefined) {
      obj.locationLat = message.locationLat;
    }
    if (message.locationLng !== undefined) {
      obj.locationLng = message.locationLng;
    }
    if (message.ipAddress !== undefined) {
      obj.ipAddress = message.ipAddress;
    }
    if (message.userAgent !== undefined) {
      obj.userAgent = message.userAgent;
    }
    if (message.referrerUrl !== undefined) {
      obj.referrerUrl = message.referrerUrl;
    }
    if (message.utmSource !== undefined) {
      obj.utmSource = message.utmSource;
    }
    if (message.utmMedium !== undefined) {
      obj.utmMedium = message.utmMedium;
    }
    if (message.utmCampaign !== undefined) {
      obj.utmCampaign = message.utmCampaign;
    }
    if (message.utmTerm !== undefined) {
      obj.utmTerm = message.utmTerm;
    }
    if (message.utmContent !== undefined) {
      obj.utmContent = message.utmContent;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WaitlistEntry>, I>>(base?: I): WaitlistEntry {
    return WaitlistEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WaitlistEntry>, I>>(object: I): WaitlistEntry {
    const message = createBaseWaitlistEntry();
    message.id = object.id ?? "0";
    message.uuid = object.uuid ?? "";
    message.masterId = object.masterId ?? "0";
    message.masterUuid = object.masterUuid ?? "";
    message.email = object.email ?? "";
    message.firstName = object.firstName ?? "";
    message.lastName = object.lastName ?? "";
    message.tier = object.tier ?? "";
    message.reservedUsername = object.reservedUsername ?? undefined;
    message.intention = object.intention ?? "";
    message.questionnaireAnswers = object.questionnaireAnswers ?? undefined;
    message.interests = object.interests?.map((e) => e) || [];
    message.referralUsername = object.referralUsername ?? undefined;
    message.referralCode = object.referralCode ?? undefined;
    message.feedback = object.feedback ?? undefined;
    message.additionalComments = object.additionalComments ?? undefined;
    message.status = object.status ?? "";
    message.priorityScore = object.priorityScore ?? 0;
    message.contactPreferences = object.contactPreferences ?? undefined;
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    message.createdAt = object.createdAt ?? undefined;
    message.updatedAt = object.updatedAt ?? undefined;
    message.invitedAt = object.invitedAt ?? undefined;
    message.waitlistPosition = object.waitlistPosition ?? undefined;
    message.campaignName = object.campaignName ?? "";
    message.referralCount = object.referralCount ?? 0;
    message.referralPoints = object.referralPoints ?? 0;
    message.locationCountry = object.locationCountry ?? undefined;
    message.locationRegion = object.locationRegion ?? undefined;
    message.locationCity = object.locationCity ?? undefined;
    message.locationLat = object.locationLat ?? undefined;
    message.locationLng = object.locationLng ?? undefined;
    message.ipAddress = object.ipAddress ?? undefined;
    message.userAgent = object.userAgent ?? undefined;
    message.referrerUrl = object.referrerUrl ?? undefined;
    message.utmSource = object.utmSource ?? undefined;
    message.utmMedium = object.utmMedium ?? undefined;
    message.utmCampaign = object.utmCampaign ?? undefined;
    message.utmTerm = object.utmTerm ?? undefined;
    message.utmContent = object.utmContent ?? undefined;
    return message;
  },
};

function createBaseLeaderboardEntry(): LeaderboardEntry {
  return {
    id: "0",
    uuid: "",
    reservedUsername: undefined,
    firstName: "",
    lastName: "",
    tier: "",
    referralCount: 0,
    referralPoints: 0,
    priorityScore: 0,
    locationCountry: undefined,
    locationRegion: undefined,
    locationCity: undefined,
    createdAt: undefined,
    position: 0,
  };
}

export const LeaderboardEntry: MessageFns<LeaderboardEntry> = {
  encode(message: LeaderboardEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "0") {
      writer.uint32(8).int64(message.id);
    }
    if (message.uuid !== "") {
      writer.uint32(18).string(message.uuid);
    }
    if (message.reservedUsername !== undefined) {
      writer.uint32(26).string(message.reservedUsername);
    }
    if (message.firstName !== "") {
      writer.uint32(34).string(message.firstName);
    }
    if (message.lastName !== "") {
      writer.uint32(42).string(message.lastName);
    }
    if (message.tier !== "") {
      writer.uint32(50).string(message.tier);
    }
    if (message.referralCount !== 0) {
      writer.uint32(56).int32(message.referralCount);
    }
    if (message.referralPoints !== 0) {
      writer.uint32(64).int32(message.referralPoints);
    }
    if (message.priorityScore !== 0) {
      writer.uint32(72).int32(message.priorityScore);
    }
    if (message.locationCountry !== undefined) {
      writer.uint32(82).string(message.locationCountry);
    }
    if (message.locationRegion !== undefined) {
      writer.uint32(90).string(message.locationRegion);
    }
    if (message.locationCity !== undefined) {
      writer.uint32(98).string(message.locationCity);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(106).fork()).join();
    }
    if (message.position !== 0) {
      writer.uint32(112).int32(message.position);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LeaderboardEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLeaderboardEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.uuid = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.reservedUsername = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.firstName = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.lastName = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.tier = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.referralCount = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.referralPoints = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.priorityScore = reader.int32();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.locationCountry = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.locationRegion = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.locationCity = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.position = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LeaderboardEntry {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "0",
      uuid: isSet(object.uuid) ? globalThis.String(object.uuid) : "",
      reservedUsername: isSet(object.reservedUsername) ? globalThis.String(object.reservedUsername) : undefined,
      firstName: isSet(object.firstName) ? globalThis.String(object.firstName) : "",
      lastName: isSet(object.lastName) ? globalThis.String(object.lastName) : "",
      tier: isSet(object.tier) ? globalThis.String(object.tier) : "",
      referralCount: isSet(object.referralCount) ? globalThis.Number(object.referralCount) : 0,
      referralPoints: isSet(object.referralPoints) ? globalThis.Number(object.referralPoints) : 0,
      priorityScore: isSet(object.priorityScore) ? globalThis.Number(object.priorityScore) : 0,
      locationCountry: isSet(object.locationCountry) ? globalThis.String(object.locationCountry) : undefined,
      locationRegion: isSet(object.locationRegion) ? globalThis.String(object.locationRegion) : undefined,
      locationCity: isSet(object.locationCity) ? globalThis.String(object.locationCity) : undefined,
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      position: isSet(object.position) ? globalThis.Number(object.position) : 0,
    };
  },

  toJSON(message: LeaderboardEntry): unknown {
    const obj: any = {};
    if (message.id !== "0") {
      obj.id = message.id;
    }
    if (message.uuid !== "") {
      obj.uuid = message.uuid;
    }
    if (message.reservedUsername !== undefined) {
      obj.reservedUsername = message.reservedUsername;
    }
    if (message.firstName !== "") {
      obj.firstName = message.firstName;
    }
    if (message.lastName !== "") {
      obj.lastName = message.lastName;
    }
    if (message.tier !== "") {
      obj.tier = message.tier;
    }
    if (message.referralCount !== 0) {
      obj.referralCount = Math.round(message.referralCount);
    }
    if (message.referralPoints !== 0) {
      obj.referralPoints = Math.round(message.referralPoints);
    }
    if (message.priorityScore !== 0) {
      obj.priorityScore = Math.round(message.priorityScore);
    }
    if (message.locationCountry !== undefined) {
      obj.locationCountry = message.locationCountry;
    }
    if (message.locationRegion !== undefined) {
      obj.locationRegion = message.locationRegion;
    }
    if (message.locationCity !== undefined) {
      obj.locationCity = message.locationCity;
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.position !== 0) {
      obj.position = Math.round(message.position);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LeaderboardEntry>, I>>(base?: I): LeaderboardEntry {
    return LeaderboardEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LeaderboardEntry>, I>>(object: I): LeaderboardEntry {
    const message = createBaseLeaderboardEntry();
    message.id = object.id ?? "0";
    message.uuid = object.uuid ?? "";
    message.reservedUsername = object.reservedUsername ?? undefined;
    message.firstName = object.firstName ?? "";
    message.lastName = object.lastName ?? "";
    message.tier = object.tier ?? "";
    message.referralCount = object.referralCount ?? 0;
    message.referralPoints = object.referralPoints ?? 0;
    message.priorityScore = object.priorityScore ?? 0;
    message.locationCountry = object.locationCountry ?? undefined;
    message.locationRegion = object.locationRegion ?? undefined;
    message.locationCity = object.locationCity ?? undefined;
    message.createdAt = object.createdAt ?? undefined;
    message.position = object.position ?? 0;
    return message;
  },
};

function createBaseReferralRecord(): ReferralRecord {
  return {
    id: "0",
    uuid: "",
    referrerId: "0",
    referrerUuid: "",
    referrerUsername: "",
    referredId: "0",
    referredUuid: "",
    referredEmail: "",
    referralType: "",
    referralSource: undefined,
    pointsAwarded: 0,
    createdAt: undefined,
  };
}

export const ReferralRecord: MessageFns<ReferralRecord> = {
  encode(message: ReferralRecord, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "0") {
      writer.uint32(8).int64(message.id);
    }
    if (message.uuid !== "") {
      writer.uint32(18).string(message.uuid);
    }
    if (message.referrerId !== "0") {
      writer.uint32(24).int64(message.referrerId);
    }
    if (message.referrerUuid !== "") {
      writer.uint32(34).string(message.referrerUuid);
    }
    if (message.referrerUsername !== "") {
      writer.uint32(42).string(message.referrerUsername);
    }
    if (message.referredId !== "0") {
      writer.uint32(48).int64(message.referredId);
    }
    if (message.referredUuid !== "") {
      writer.uint32(58).string(message.referredUuid);
    }
    if (message.referredEmail !== "") {
      writer.uint32(66).string(message.referredEmail);
    }
    if (message.referralType !== "") {
      writer.uint32(74).string(message.referralType);
    }
    if (message.referralSource !== undefined) {
      writer.uint32(82).string(message.referralSource);
    }
    if (message.pointsAwarded !== 0) {
      writer.uint32(88).int32(message.pointsAwarded);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(98).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReferralRecord {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReferralRecord();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.uuid = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.referrerId = reader.int64().toString();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.referrerUuid = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.referrerUsername = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.referredId = reader.int64().toString();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.referredUuid = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.referredEmail = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.referralType = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.referralSource = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.pointsAwarded = reader.int32();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReferralRecord {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "0",
      uuid: isSet(object.uuid) ? globalThis.String(object.uuid) : "",
      referrerId: isSet(object.referrerId) ? globalThis.String(object.referrerId) : "0",
      referrerUuid: isSet(object.referrerUuid) ? globalThis.String(object.referrerUuid) : "",
      referrerUsername: isSet(object.referrerUsername) ? globalThis.String(object.referrerUsername) : "",
      referredId: isSet(object.referredId) ? globalThis.String(object.referredId) : "0",
      referredUuid: isSet(object.referredUuid) ? globalThis.String(object.referredUuid) : "",
      referredEmail: isSet(object.referredEmail) ? globalThis.String(object.referredEmail) : "",
      referralType: isSet(object.referralType) ? globalThis.String(object.referralType) : "",
      referralSource: isSet(object.referralSource) ? globalThis.String(object.referralSource) : undefined,
      pointsAwarded: isSet(object.pointsAwarded) ? globalThis.Number(object.pointsAwarded) : 0,
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
    };
  },

  toJSON(message: ReferralRecord): unknown {
    const obj: any = {};
    if (message.id !== "0") {
      obj.id = message.id;
    }
    if (message.uuid !== "") {
      obj.uuid = message.uuid;
    }
    if (message.referrerId !== "0") {
      obj.referrerId = message.referrerId;
    }
    if (message.referrerUuid !== "") {
      obj.referrerUuid = message.referrerUuid;
    }
    if (message.referrerUsername !== "") {
      obj.referrerUsername = message.referrerUsername;
    }
    if (message.referredId !== "0") {
      obj.referredId = message.referredId;
    }
    if (message.referredUuid !== "") {
      obj.referredUuid = message.referredUuid;
    }
    if (message.referredEmail !== "") {
      obj.referredEmail = message.referredEmail;
    }
    if (message.referralType !== "") {
      obj.referralType = message.referralType;
    }
    if (message.referralSource !== undefined) {
      obj.referralSource = message.referralSource;
    }
    if (message.pointsAwarded !== 0) {
      obj.pointsAwarded = Math.round(message.pointsAwarded);
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReferralRecord>, I>>(base?: I): ReferralRecord {
    return ReferralRecord.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReferralRecord>, I>>(object: I): ReferralRecord {
    const message = createBaseReferralRecord();
    message.id = object.id ?? "0";
    message.uuid = object.uuid ?? "";
    message.referrerId = object.referrerId ?? "0";
    message.referrerUuid = object.referrerUuid ?? "";
    message.referrerUsername = object.referrerUsername ?? "";
    message.referredId = object.referredId ?? "0";
    message.referredUuid = object.referredUuid ?? "";
    message.referredEmail = object.referredEmail ?? "";
    message.referralType = object.referralType ?? "";
    message.referralSource = object.referralSource ?? undefined;
    message.pointsAwarded = object.pointsAwarded ?? 0;
    message.createdAt = object.createdAt ?? undefined;
    return message;
  },
};

function createBaseLocationStat(): LocationStat {
  return {
    country: "",
    region: undefined,
    city: undefined,
    userCount: "0",
    talentCount: "0",
    pioneerCount: "0",
    hustlerCount: "0",
    businessCount: "0",
    avgReferrals: 0,
    maxReferrals: "0",
  };
}

export const LocationStat: MessageFns<LocationStat> = {
  encode(message: LocationStat, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.country !== "") {
      writer.uint32(10).string(message.country);
    }
    if (message.region !== undefined) {
      writer.uint32(18).string(message.region);
    }
    if (message.city !== undefined) {
      writer.uint32(26).string(message.city);
    }
    if (message.userCount !== "0") {
      writer.uint32(32).int64(message.userCount);
    }
    if (message.talentCount !== "0") {
      writer.uint32(40).int64(message.talentCount);
    }
    if (message.pioneerCount !== "0") {
      writer.uint32(48).int64(message.pioneerCount);
    }
    if (message.hustlerCount !== "0") {
      writer.uint32(56).int64(message.hustlerCount);
    }
    if (message.businessCount !== "0") {
      writer.uint32(64).int64(message.businessCount);
    }
    if (message.avgReferrals !== 0) {
      writer.uint32(73).double(message.avgReferrals);
    }
    if (message.maxReferrals !== "0") {
      writer.uint32(80).int64(message.maxReferrals);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LocationStat {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLocationStat();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.country = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.region = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.city = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.userCount = reader.int64().toString();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.talentCount = reader.int64().toString();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.pioneerCount = reader.int64().toString();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.hustlerCount = reader.int64().toString();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.businessCount = reader.int64().toString();
          continue;
        }
        case 9: {
          if (tag !== 73) {
            break;
          }

          message.avgReferrals = reader.double();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.maxReferrals = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LocationStat {
    return {
      country: isSet(object.country) ? globalThis.String(object.country) : "",
      region: isSet(object.region) ? globalThis.String(object.region) : undefined,
      city: isSet(object.city) ? globalThis.String(object.city) : undefined,
      userCount: isSet(object.userCount) ? globalThis.String(object.userCount) : "0",
      talentCount: isSet(object.talentCount) ? globalThis.String(object.talentCount) : "0",
      pioneerCount: isSet(object.pioneerCount) ? globalThis.String(object.pioneerCount) : "0",
      hustlerCount: isSet(object.hustlerCount) ? globalThis.String(object.hustlerCount) : "0",
      businessCount: isSet(object.businessCount) ? globalThis.String(object.businessCount) : "0",
      avgReferrals: isSet(object.avgReferrals) ? globalThis.Number(object.avgReferrals) : 0,
      maxReferrals: isSet(object.maxReferrals) ? globalThis.String(object.maxReferrals) : "0",
    };
  },

  toJSON(message: LocationStat): unknown {
    const obj: any = {};
    if (message.country !== "") {
      obj.country = message.country;
    }
    if (message.region !== undefined) {
      obj.region = message.region;
    }
    if (message.city !== undefined) {
      obj.city = message.city;
    }
    if (message.userCount !== "0") {
      obj.userCount = message.userCount;
    }
    if (message.talentCount !== "0") {
      obj.talentCount = message.talentCount;
    }
    if (message.pioneerCount !== "0") {
      obj.pioneerCount = message.pioneerCount;
    }
    if (message.hustlerCount !== "0") {
      obj.hustlerCount = message.hustlerCount;
    }
    if (message.businessCount !== "0") {
      obj.businessCount = message.businessCount;
    }
    if (message.avgReferrals !== 0) {
      obj.avgReferrals = message.avgReferrals;
    }
    if (message.maxReferrals !== "0") {
      obj.maxReferrals = message.maxReferrals;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LocationStat>, I>>(base?: I): LocationStat {
    return LocationStat.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LocationStat>, I>>(object: I): LocationStat {
    const message = createBaseLocationStat();
    message.country = object.country ?? "";
    message.region = object.region ?? undefined;
    message.city = object.city ?? undefined;
    message.userCount = object.userCount ?? "0";
    message.talentCount = object.talentCount ?? "0";
    message.pioneerCount = object.pioneerCount ?? "0";
    message.hustlerCount = object.hustlerCount ?? "0";
    message.businessCount = object.businessCount ?? "0";
    message.avgReferrals = object.avgReferrals ?? 0;
    message.maxReferrals = object.maxReferrals ?? "0";
    return message;
  },
};

function createBaseReferralStats(): ReferralStats {
  return { totalReferrals: "0", totalReferralPoints: "0", avgReferralsPerUser: 0, topReferrers: [] };
}

export const ReferralStats: MessageFns<ReferralStats> = {
  encode(message: ReferralStats, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.totalReferrals !== "0") {
      writer.uint32(8).int64(message.totalReferrals);
    }
    if (message.totalReferralPoints !== "0") {
      writer.uint32(16).int64(message.totalReferralPoints);
    }
    if (message.avgReferralsPerUser !== 0) {
      writer.uint32(25).double(message.avgReferralsPerUser);
    }
    for (const v of message.topReferrers) {
      LeaderboardEntry.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReferralStats {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReferralStats();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.totalReferrals = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.totalReferralPoints = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 25) {
            break;
          }

          message.avgReferralsPerUser = reader.double();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.topReferrers.push(LeaderboardEntry.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReferralStats {
    return {
      totalReferrals: isSet(object.totalReferrals) ? globalThis.String(object.totalReferrals) : "0",
      totalReferralPoints: isSet(object.totalReferralPoints) ? globalThis.String(object.totalReferralPoints) : "0",
      avgReferralsPerUser: isSet(object.avgReferralsPerUser) ? globalThis.Number(object.avgReferralsPerUser) : 0,
      topReferrers: globalThis.Array.isArray(object?.topReferrers)
        ? object.topReferrers.map((e: any) => LeaderboardEntry.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ReferralStats): unknown {
    const obj: any = {};
    if (message.totalReferrals !== "0") {
      obj.totalReferrals = message.totalReferrals;
    }
    if (message.totalReferralPoints !== "0") {
      obj.totalReferralPoints = message.totalReferralPoints;
    }
    if (message.avgReferralsPerUser !== 0) {
      obj.avgReferralsPerUser = message.avgReferralsPerUser;
    }
    if (message.topReferrers?.length) {
      obj.topReferrers = message.topReferrers.map((e) => LeaderboardEntry.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReferralStats>, I>>(base?: I): ReferralStats {
    return ReferralStats.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReferralStats>, I>>(object: I): ReferralStats {
    const message = createBaseReferralStats();
    message.totalReferrals = object.totalReferrals ?? "0";
    message.totalReferralPoints = object.totalReferralPoints ?? "0";
    message.avgReferralsPerUser = object.avgReferralsPerUser ?? 0;
    message.topReferrers = object.topReferrers?.map((e) => LeaderboardEntry.fromPartial(e)) || [];
    return message;
  },
};

function createBaseWaitlistStats(): WaitlistStats {
  return {
    totalEntries: "0",
    pendingEntries: "0",
    invitedEntries: "0",
    tierBreakdown: {},
    statusBreakdown: {},
    campaignStats: {},
    locationStats: [],
    referralStats: undefined,
  };
}

export const WaitlistStats: MessageFns<WaitlistStats> = {
  encode(message: WaitlistStats, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.totalEntries !== "0") {
      writer.uint32(8).int64(message.totalEntries);
    }
    if (message.pendingEntries !== "0") {
      writer.uint32(16).int64(message.pendingEntries);
    }
    if (message.invitedEntries !== "0") {
      writer.uint32(24).int64(message.invitedEntries);
    }
    Object.entries(message.tierBreakdown).forEach(([key, value]) => {
      WaitlistStats_TierBreakdownEntry.encode({ key: key as any, value }, writer.uint32(34).fork()).join();
    });
    Object.entries(message.statusBreakdown).forEach(([key, value]) => {
      WaitlistStats_StatusBreakdownEntry.encode({ key: key as any, value }, writer.uint32(42).fork()).join();
    });
    Object.entries(message.campaignStats).forEach(([key, value]) => {
      WaitlistStats_CampaignStatsEntry.encode({ key: key as any, value }, writer.uint32(50).fork()).join();
    });
    for (const v of message.locationStats) {
      LocationStat.encode(v!, writer.uint32(58).fork()).join();
    }
    if (message.referralStats !== undefined) {
      ReferralStats.encode(message.referralStats, writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WaitlistStats {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWaitlistStats();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.totalEntries = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.pendingEntries = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.invitedEntries = reader.int64().toString();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          const entry4 = WaitlistStats_TierBreakdownEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.tierBreakdown[entry4.key] = entry4.value;
          }
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          const entry5 = WaitlistStats_StatusBreakdownEntry.decode(reader, reader.uint32());
          if (entry5.value !== undefined) {
            message.statusBreakdown[entry5.key] = entry5.value;
          }
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          const entry6 = WaitlistStats_CampaignStatsEntry.decode(reader, reader.uint32());
          if (entry6.value !== undefined) {
            message.campaignStats[entry6.key] = entry6.value;
          }
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.locationStats.push(LocationStat.decode(reader, reader.uint32()));
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.referralStats = ReferralStats.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WaitlistStats {
    return {
      totalEntries: isSet(object.totalEntries) ? globalThis.String(object.totalEntries) : "0",
      pendingEntries: isSet(object.pendingEntries) ? globalThis.String(object.pendingEntries) : "0",
      invitedEntries: isSet(object.invitedEntries) ? globalThis.String(object.invitedEntries) : "0",
      tierBreakdown: isObject(object.tierBreakdown)
        ? Object.entries(object.tierBreakdown).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      statusBreakdown: isObject(object.statusBreakdown)
        ? Object.entries(object.statusBreakdown).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      campaignStats: isObject(object.campaignStats)
        ? Object.entries(object.campaignStats).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      locationStats: globalThis.Array.isArray(object?.locationStats)
        ? object.locationStats.map((e: any) => LocationStat.fromJSON(e))
        : [],
      referralStats: isSet(object.referralStats) ? ReferralStats.fromJSON(object.referralStats) : undefined,
    };
  },

  toJSON(message: WaitlistStats): unknown {
    const obj: any = {};
    if (message.totalEntries !== "0") {
      obj.totalEntries = message.totalEntries;
    }
    if (message.pendingEntries !== "0") {
      obj.pendingEntries = message.pendingEntries;
    }
    if (message.invitedEntries !== "0") {
      obj.invitedEntries = message.invitedEntries;
    }
    if (message.tierBreakdown) {
      const entries = Object.entries(message.tierBreakdown);
      if (entries.length > 0) {
        obj.tierBreakdown = {};
        entries.forEach(([k, v]) => {
          obj.tierBreakdown[k] = v;
        });
      }
    }
    if (message.statusBreakdown) {
      const entries = Object.entries(message.statusBreakdown);
      if (entries.length > 0) {
        obj.statusBreakdown = {};
        entries.forEach(([k, v]) => {
          obj.statusBreakdown[k] = v;
        });
      }
    }
    if (message.campaignStats) {
      const entries = Object.entries(message.campaignStats);
      if (entries.length > 0) {
        obj.campaignStats = {};
        entries.forEach(([k, v]) => {
          obj.campaignStats[k] = v;
        });
      }
    }
    if (message.locationStats?.length) {
      obj.locationStats = message.locationStats.map((e) => LocationStat.toJSON(e));
    }
    if (message.referralStats !== undefined) {
      obj.referralStats = ReferralStats.toJSON(message.referralStats);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WaitlistStats>, I>>(base?: I): WaitlistStats {
    return WaitlistStats.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WaitlistStats>, I>>(object: I): WaitlistStats {
    const message = createBaseWaitlistStats();
    message.totalEntries = object.totalEntries ?? "0";
    message.pendingEntries = object.pendingEntries ?? "0";
    message.invitedEntries = object.invitedEntries ?? "0";
    message.tierBreakdown = Object.entries(object.tierBreakdown ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    message.statusBreakdown = Object.entries(object.statusBreakdown ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    message.campaignStats = Object.entries(object.campaignStats ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    message.locationStats = object.locationStats?.map((e) => LocationStat.fromPartial(e)) || [];
    message.referralStats = (object.referralStats !== undefined && object.referralStats !== null)
      ? ReferralStats.fromPartial(object.referralStats)
      : undefined;
    return message;
  },
};

function createBaseWaitlistStats_TierBreakdownEntry(): WaitlistStats_TierBreakdownEntry {
  return { key: "", value: "0" };
}

export const WaitlistStats_TierBreakdownEntry: MessageFns<WaitlistStats_TierBreakdownEntry> = {
  encode(message: WaitlistStats_TierBreakdownEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "0") {
      writer.uint32(16).int64(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WaitlistStats_TierBreakdownEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWaitlistStats_TierBreakdownEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.value = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WaitlistStats_TierBreakdownEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "0",
    };
  },

  toJSON(message: WaitlistStats_TierBreakdownEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "0") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WaitlistStats_TierBreakdownEntry>, I>>(
    base?: I,
  ): WaitlistStats_TierBreakdownEntry {
    return WaitlistStats_TierBreakdownEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WaitlistStats_TierBreakdownEntry>, I>>(
    object: I,
  ): WaitlistStats_TierBreakdownEntry {
    const message = createBaseWaitlistStats_TierBreakdownEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "0";
    return message;
  },
};

function createBaseWaitlistStats_StatusBreakdownEntry(): WaitlistStats_StatusBreakdownEntry {
  return { key: "", value: "0" };
}

export const WaitlistStats_StatusBreakdownEntry: MessageFns<WaitlistStats_StatusBreakdownEntry> = {
  encode(message: WaitlistStats_StatusBreakdownEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "0") {
      writer.uint32(16).int64(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WaitlistStats_StatusBreakdownEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWaitlistStats_StatusBreakdownEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.value = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WaitlistStats_StatusBreakdownEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "0",
    };
  },

  toJSON(message: WaitlistStats_StatusBreakdownEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "0") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WaitlistStats_StatusBreakdownEntry>, I>>(
    base?: I,
  ): WaitlistStats_StatusBreakdownEntry {
    return WaitlistStats_StatusBreakdownEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WaitlistStats_StatusBreakdownEntry>, I>>(
    object: I,
  ): WaitlistStats_StatusBreakdownEntry {
    const message = createBaseWaitlistStats_StatusBreakdownEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "0";
    return message;
  },
};

function createBaseWaitlistStats_CampaignStatsEntry(): WaitlistStats_CampaignStatsEntry {
  return { key: "", value: "0" };
}

export const WaitlistStats_CampaignStatsEntry: MessageFns<WaitlistStats_CampaignStatsEntry> = {
  encode(message: WaitlistStats_CampaignStatsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "0") {
      writer.uint32(16).int64(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WaitlistStats_CampaignStatsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWaitlistStats_CampaignStatsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.value = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WaitlistStats_CampaignStatsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "0",
    };
  },

  toJSON(message: WaitlistStats_CampaignStatsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "0") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WaitlistStats_CampaignStatsEntry>, I>>(
    base?: I,
  ): WaitlistStats_CampaignStatsEntry {
    return WaitlistStats_CampaignStatsEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WaitlistStats_CampaignStatsEntry>, I>>(
    object: I,
  ): WaitlistStats_CampaignStatsEntry {
    const message = createBaseWaitlistStats_CampaignStatsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "0";
    return message;
  },
};

function createBaseCreateWaitlistEntryRequest(): CreateWaitlistEntryRequest {
  return {
    email: "",
    firstName: "",
    lastName: "",
    tier: "",
    reservedUsername: undefined,
    intention: "",
    questionnaireAnswers: undefined,
    interests: [],
    referralUsername: undefined,
    referralCode: undefined,
    feedback: undefined,
    additionalComments: undefined,
    contactPreferences: undefined,
    metadata: undefined,
    campaignName: "",
    locationCountry: undefined,
    locationRegion: undefined,
    locationCity: undefined,
    locationLat: undefined,
    locationLng: undefined,
    ipAddress: undefined,
    userAgent: undefined,
    referrerUrl: undefined,
    utmSource: undefined,
    utmMedium: undefined,
    utmCampaign: undefined,
    utmTerm: undefined,
    utmContent: undefined,
  };
}

export const CreateWaitlistEntryRequest: MessageFns<CreateWaitlistEntryRequest> = {
  encode(message: CreateWaitlistEntryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.email !== "") {
      writer.uint32(10).string(message.email);
    }
    if (message.firstName !== "") {
      writer.uint32(18).string(message.firstName);
    }
    if (message.lastName !== "") {
      writer.uint32(26).string(message.lastName);
    }
    if (message.tier !== "") {
      writer.uint32(34).string(message.tier);
    }
    if (message.reservedUsername !== undefined) {
      writer.uint32(42).string(message.reservedUsername);
    }
    if (message.intention !== "") {
      writer.uint32(50).string(message.intention);
    }
    if (message.questionnaireAnswers !== undefined) {
      Struct.encode(Struct.wrap(message.questionnaireAnswers), writer.uint32(58).fork()).join();
    }
    for (const v of message.interests) {
      writer.uint32(66).string(v!);
    }
    if (message.referralUsername !== undefined) {
      writer.uint32(74).string(message.referralUsername);
    }
    if (message.referralCode !== undefined) {
      writer.uint32(82).string(message.referralCode);
    }
    if (message.feedback !== undefined) {
      writer.uint32(90).string(message.feedback);
    }
    if (message.additionalComments !== undefined) {
      writer.uint32(98).string(message.additionalComments);
    }
    if (message.contactPreferences !== undefined) {
      Struct.encode(Struct.wrap(message.contactPreferences), writer.uint32(106).fork()).join();
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(114).fork()).join();
    }
    if (message.campaignName !== "") {
      writer.uint32(122).string(message.campaignName);
    }
    if (message.locationCountry !== undefined) {
      writer.uint32(130).string(message.locationCountry);
    }
    if (message.locationRegion !== undefined) {
      writer.uint32(138).string(message.locationRegion);
    }
    if (message.locationCity !== undefined) {
      writer.uint32(146).string(message.locationCity);
    }
    if (message.locationLat !== undefined) {
      writer.uint32(153).double(message.locationLat);
    }
    if (message.locationLng !== undefined) {
      writer.uint32(161).double(message.locationLng);
    }
    if (message.ipAddress !== undefined) {
      writer.uint32(170).string(message.ipAddress);
    }
    if (message.userAgent !== undefined) {
      writer.uint32(178).string(message.userAgent);
    }
    if (message.referrerUrl !== undefined) {
      writer.uint32(186).string(message.referrerUrl);
    }
    if (message.utmSource !== undefined) {
      writer.uint32(194).string(message.utmSource);
    }
    if (message.utmMedium !== undefined) {
      writer.uint32(202).string(message.utmMedium);
    }
    if (message.utmCampaign !== undefined) {
      writer.uint32(210).string(message.utmCampaign);
    }
    if (message.utmTerm !== undefined) {
      writer.uint32(218).string(message.utmTerm);
    }
    if (message.utmContent !== undefined) {
      writer.uint32(226).string(message.utmContent);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateWaitlistEntryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateWaitlistEntryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.firstName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.lastName = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.tier = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.reservedUsername = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.intention = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.questionnaireAnswers = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.interests.push(reader.string());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.referralUsername = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.referralCode = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.feedback = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.additionalComments = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.contactPreferences = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.campaignName = reader.string();
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.locationCountry = reader.string();
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.locationRegion = reader.string();
          continue;
        }
        case 18: {
          if (tag !== 146) {
            break;
          }

          message.locationCity = reader.string();
          continue;
        }
        case 19: {
          if (tag !== 153) {
            break;
          }

          message.locationLat = reader.double();
          continue;
        }
        case 20: {
          if (tag !== 161) {
            break;
          }

          message.locationLng = reader.double();
          continue;
        }
        case 21: {
          if (tag !== 170) {
            break;
          }

          message.ipAddress = reader.string();
          continue;
        }
        case 22: {
          if (tag !== 178) {
            break;
          }

          message.userAgent = reader.string();
          continue;
        }
        case 23: {
          if (tag !== 186) {
            break;
          }

          message.referrerUrl = reader.string();
          continue;
        }
        case 24: {
          if (tag !== 194) {
            break;
          }

          message.utmSource = reader.string();
          continue;
        }
        case 25: {
          if (tag !== 202) {
            break;
          }

          message.utmMedium = reader.string();
          continue;
        }
        case 26: {
          if (tag !== 210) {
            break;
          }

          message.utmCampaign = reader.string();
          continue;
        }
        case 27: {
          if (tag !== 218) {
            break;
          }

          message.utmTerm = reader.string();
          continue;
        }
        case 28: {
          if (tag !== 226) {
            break;
          }

          message.utmContent = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateWaitlistEntryRequest {
    return {
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      firstName: isSet(object.firstName) ? globalThis.String(object.firstName) : "",
      lastName: isSet(object.lastName) ? globalThis.String(object.lastName) : "",
      tier: isSet(object.tier) ? globalThis.String(object.tier) : "",
      reservedUsername: isSet(object.reservedUsername) ? globalThis.String(object.reservedUsername) : undefined,
      intention: isSet(object.intention) ? globalThis.String(object.intention) : "",
      questionnaireAnswers: isObject(object.questionnaireAnswers) ? object.questionnaireAnswers : undefined,
      interests: globalThis.Array.isArray(object?.interests)
        ? object.interests.map((e: any) => globalThis.String(e))
        : [],
      referralUsername: isSet(object.referralUsername) ? globalThis.String(object.referralUsername) : undefined,
      referralCode: isSet(object.referralCode) ? globalThis.String(object.referralCode) : undefined,
      feedback: isSet(object.feedback) ? globalThis.String(object.feedback) : undefined,
      additionalComments: isSet(object.additionalComments) ? globalThis.String(object.additionalComments) : undefined,
      contactPreferences: isObject(object.contactPreferences) ? object.contactPreferences : undefined,
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
      campaignName: isSet(object.campaignName) ? globalThis.String(object.campaignName) : "",
      locationCountry: isSet(object.locationCountry) ? globalThis.String(object.locationCountry) : undefined,
      locationRegion: isSet(object.locationRegion) ? globalThis.String(object.locationRegion) : undefined,
      locationCity: isSet(object.locationCity) ? globalThis.String(object.locationCity) : undefined,
      locationLat: isSet(object.locationLat) ? globalThis.Number(object.locationLat) : undefined,
      locationLng: isSet(object.locationLng) ? globalThis.Number(object.locationLng) : undefined,
      ipAddress: isSet(object.ipAddress) ? globalThis.String(object.ipAddress) : undefined,
      userAgent: isSet(object.userAgent) ? globalThis.String(object.userAgent) : undefined,
      referrerUrl: isSet(object.referrerUrl) ? globalThis.String(object.referrerUrl) : undefined,
      utmSource: isSet(object.utmSource) ? globalThis.String(object.utmSource) : undefined,
      utmMedium: isSet(object.utmMedium) ? globalThis.String(object.utmMedium) : undefined,
      utmCampaign: isSet(object.utmCampaign) ? globalThis.String(object.utmCampaign) : undefined,
      utmTerm: isSet(object.utmTerm) ? globalThis.String(object.utmTerm) : undefined,
      utmContent: isSet(object.utmContent) ? globalThis.String(object.utmContent) : undefined,
    };
  },

  toJSON(message: CreateWaitlistEntryRequest): unknown {
    const obj: any = {};
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.firstName !== "") {
      obj.firstName = message.firstName;
    }
    if (message.lastName !== "") {
      obj.lastName = message.lastName;
    }
    if (message.tier !== "") {
      obj.tier = message.tier;
    }
    if (message.reservedUsername !== undefined) {
      obj.reservedUsername = message.reservedUsername;
    }
    if (message.intention !== "") {
      obj.intention = message.intention;
    }
    if (message.questionnaireAnswers !== undefined) {
      obj.questionnaireAnswers = message.questionnaireAnswers;
    }
    if (message.interests?.length) {
      obj.interests = message.interests;
    }
    if (message.referralUsername !== undefined) {
      obj.referralUsername = message.referralUsername;
    }
    if (message.referralCode !== undefined) {
      obj.referralCode = message.referralCode;
    }
    if (message.feedback !== undefined) {
      obj.feedback = message.feedback;
    }
    if (message.additionalComments !== undefined) {
      obj.additionalComments = message.additionalComments;
    }
    if (message.contactPreferences !== undefined) {
      obj.contactPreferences = message.contactPreferences;
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    if (message.campaignName !== "") {
      obj.campaignName = message.campaignName;
    }
    if (message.locationCountry !== undefined) {
      obj.locationCountry = message.locationCountry;
    }
    if (message.locationRegion !== undefined) {
      obj.locationRegion = message.locationRegion;
    }
    if (message.locationCity !== undefined) {
      obj.locationCity = message.locationCity;
    }
    if (message.locationLat !== undefined) {
      obj.locationLat = message.locationLat;
    }
    if (message.locationLng !== undefined) {
      obj.locationLng = message.locationLng;
    }
    if (message.ipAddress !== undefined) {
      obj.ipAddress = message.ipAddress;
    }
    if (message.userAgent !== undefined) {
      obj.userAgent = message.userAgent;
    }
    if (message.referrerUrl !== undefined) {
      obj.referrerUrl = message.referrerUrl;
    }
    if (message.utmSource !== undefined) {
      obj.utmSource = message.utmSource;
    }
    if (message.utmMedium !== undefined) {
      obj.utmMedium = message.utmMedium;
    }
    if (message.utmCampaign !== undefined) {
      obj.utmCampaign = message.utmCampaign;
    }
    if (message.utmTerm !== undefined) {
      obj.utmTerm = message.utmTerm;
    }
    if (message.utmContent !== undefined) {
      obj.utmContent = message.utmContent;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateWaitlistEntryRequest>, I>>(base?: I): CreateWaitlistEntryRequest {
    return CreateWaitlistEntryRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateWaitlistEntryRequest>, I>>(object: I): CreateWaitlistEntryRequest {
    const message = createBaseCreateWaitlistEntryRequest();
    message.email = object.email ?? "";
    message.firstName = object.firstName ?? "";
    message.lastName = object.lastName ?? "";
    message.tier = object.tier ?? "";
    message.reservedUsername = object.reservedUsername ?? undefined;
    message.intention = object.intention ?? "";
    message.questionnaireAnswers = object.questionnaireAnswers ?? undefined;
    message.interests = object.interests?.map((e) => e) || [];
    message.referralUsername = object.referralUsername ?? undefined;
    message.referralCode = object.referralCode ?? undefined;
    message.feedback = object.feedback ?? undefined;
    message.additionalComments = object.additionalComments ?? undefined;
    message.contactPreferences = object.contactPreferences ?? undefined;
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    message.campaignName = object.campaignName ?? "";
    message.locationCountry = object.locationCountry ?? undefined;
    message.locationRegion = object.locationRegion ?? undefined;
    message.locationCity = object.locationCity ?? undefined;
    message.locationLat = object.locationLat ?? undefined;
    message.locationLng = object.locationLng ?? undefined;
    message.ipAddress = object.ipAddress ?? undefined;
    message.userAgent = object.userAgent ?? undefined;
    message.referrerUrl = object.referrerUrl ?? undefined;
    message.utmSource = object.utmSource ?? undefined;
    message.utmMedium = object.utmMedium ?? undefined;
    message.utmCampaign = object.utmCampaign ?? undefined;
    message.utmTerm = object.utmTerm ?? undefined;
    message.utmContent = object.utmContent ?? undefined;
    return message;
  },
};

function createBaseCreateWaitlistEntryResponse(): CreateWaitlistEntryResponse {
  return { entry: undefined };
}

export const CreateWaitlistEntryResponse: MessageFns<CreateWaitlistEntryResponse> = {
  encode(message: CreateWaitlistEntryResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.entry !== undefined) {
      WaitlistEntry.encode(message.entry, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateWaitlistEntryResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateWaitlistEntryResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.entry = WaitlistEntry.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateWaitlistEntryResponse {
    return { entry: isSet(object.entry) ? WaitlistEntry.fromJSON(object.entry) : undefined };
  },

  toJSON(message: CreateWaitlistEntryResponse): unknown {
    const obj: any = {};
    if (message.entry !== undefined) {
      obj.entry = WaitlistEntry.toJSON(message.entry);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateWaitlistEntryResponse>, I>>(base?: I): CreateWaitlistEntryResponse {
    return CreateWaitlistEntryResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateWaitlistEntryResponse>, I>>(object: I): CreateWaitlistEntryResponse {
    const message = createBaseCreateWaitlistEntryResponse();
    message.entry = (object.entry !== undefined && object.entry !== null)
      ? WaitlistEntry.fromPartial(object.entry)
      : undefined;
    return message;
  },
};

function createBaseGetWaitlistEntryRequest(): GetWaitlistEntryRequest {
  return { id: undefined, uuid: undefined, email: undefined };
}

export const GetWaitlistEntryRequest: MessageFns<GetWaitlistEntryRequest> = {
  encode(message: GetWaitlistEntryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      writer.uint32(8).int64(message.id);
    }
    if (message.uuid !== undefined) {
      writer.uint32(18).string(message.uuid);
    }
    if (message.email !== undefined) {
      writer.uint32(26).string(message.email);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetWaitlistEntryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetWaitlistEntryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.uuid = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.email = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetWaitlistEntryRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : undefined,
      uuid: isSet(object.uuid) ? globalThis.String(object.uuid) : undefined,
      email: isSet(object.email) ? globalThis.String(object.email) : undefined,
    };
  },

  toJSON(message: GetWaitlistEntryRequest): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = message.id;
    }
    if (message.uuid !== undefined) {
      obj.uuid = message.uuid;
    }
    if (message.email !== undefined) {
      obj.email = message.email;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetWaitlistEntryRequest>, I>>(base?: I): GetWaitlistEntryRequest {
    return GetWaitlistEntryRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetWaitlistEntryRequest>, I>>(object: I): GetWaitlistEntryRequest {
    const message = createBaseGetWaitlistEntryRequest();
    message.id = object.id ?? undefined;
    message.uuid = object.uuid ?? undefined;
    message.email = object.email ?? undefined;
    return message;
  },
};

function createBaseGetWaitlistEntryResponse(): GetWaitlistEntryResponse {
  return { entry: undefined };
}

export const GetWaitlistEntryResponse: MessageFns<GetWaitlistEntryResponse> = {
  encode(message: GetWaitlistEntryResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.entry !== undefined) {
      WaitlistEntry.encode(message.entry, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetWaitlistEntryResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetWaitlistEntryResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.entry = WaitlistEntry.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetWaitlistEntryResponse {
    return { entry: isSet(object.entry) ? WaitlistEntry.fromJSON(object.entry) : undefined };
  },

  toJSON(message: GetWaitlistEntryResponse): unknown {
    const obj: any = {};
    if (message.entry !== undefined) {
      obj.entry = WaitlistEntry.toJSON(message.entry);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetWaitlistEntryResponse>, I>>(base?: I): GetWaitlistEntryResponse {
    return GetWaitlistEntryResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetWaitlistEntryResponse>, I>>(object: I): GetWaitlistEntryResponse {
    const message = createBaseGetWaitlistEntryResponse();
    message.entry = (object.entry !== undefined && object.entry !== null)
      ? WaitlistEntry.fromPartial(object.entry)
      : undefined;
    return message;
  },
};

function createBaseUpdateWaitlistEntryRequest(): UpdateWaitlistEntryRequest {
  return {
    id: "0",
    email: undefined,
    firstName: undefined,
    lastName: undefined,
    tier: undefined,
    reservedUsername: undefined,
    intention: undefined,
    questionnaireAnswers: undefined,
    interests: [],
    referralUsername: undefined,
    referralCode: undefined,
    feedback: undefined,
    additionalComments: undefined,
    status: undefined,
    priorityScore: undefined,
    contactPreferences: undefined,
    metadata: undefined,
  };
}

export const UpdateWaitlistEntryRequest: MessageFns<UpdateWaitlistEntryRequest> = {
  encode(message: UpdateWaitlistEntryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "0") {
      writer.uint32(8).int64(message.id);
    }
    if (message.email !== undefined) {
      writer.uint32(18).string(message.email);
    }
    if (message.firstName !== undefined) {
      writer.uint32(26).string(message.firstName);
    }
    if (message.lastName !== undefined) {
      writer.uint32(34).string(message.lastName);
    }
    if (message.tier !== undefined) {
      writer.uint32(42).string(message.tier);
    }
    if (message.reservedUsername !== undefined) {
      writer.uint32(50).string(message.reservedUsername);
    }
    if (message.intention !== undefined) {
      writer.uint32(58).string(message.intention);
    }
    if (message.questionnaireAnswers !== undefined) {
      Struct.encode(Struct.wrap(message.questionnaireAnswers), writer.uint32(66).fork()).join();
    }
    for (const v of message.interests) {
      writer.uint32(74).string(v!);
    }
    if (message.referralUsername !== undefined) {
      writer.uint32(82).string(message.referralUsername);
    }
    if (message.referralCode !== undefined) {
      writer.uint32(90).string(message.referralCode);
    }
    if (message.feedback !== undefined) {
      writer.uint32(98).string(message.feedback);
    }
    if (message.additionalComments !== undefined) {
      writer.uint32(106).string(message.additionalComments);
    }
    if (message.status !== undefined) {
      writer.uint32(114).string(message.status);
    }
    if (message.priorityScore !== undefined) {
      writer.uint32(120).int32(message.priorityScore);
    }
    if (message.contactPreferences !== undefined) {
      Struct.encode(Struct.wrap(message.contactPreferences), writer.uint32(130).fork()).join();
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(138).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateWaitlistEntryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateWaitlistEntryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.firstName = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.lastName = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.tier = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.reservedUsername = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.intention = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.questionnaireAnswers = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.interests.push(reader.string());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.referralUsername = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.referralCode = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.feedback = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.additionalComments = reader.string();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.priorityScore = reader.int32();
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.contactPreferences = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateWaitlistEntryRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "0",
      email: isSet(object.email) ? globalThis.String(object.email) : undefined,
      firstName: isSet(object.firstName) ? globalThis.String(object.firstName) : undefined,
      lastName: isSet(object.lastName) ? globalThis.String(object.lastName) : undefined,
      tier: isSet(object.tier) ? globalThis.String(object.tier) : undefined,
      reservedUsername: isSet(object.reservedUsername) ? globalThis.String(object.reservedUsername) : undefined,
      intention: isSet(object.intention) ? globalThis.String(object.intention) : undefined,
      questionnaireAnswers: isObject(object.questionnaireAnswers) ? object.questionnaireAnswers : undefined,
      interests: globalThis.Array.isArray(object?.interests)
        ? object.interests.map((e: any) => globalThis.String(e))
        : [],
      referralUsername: isSet(object.referralUsername) ? globalThis.String(object.referralUsername) : undefined,
      referralCode: isSet(object.referralCode) ? globalThis.String(object.referralCode) : undefined,
      feedback: isSet(object.feedback) ? globalThis.String(object.feedback) : undefined,
      additionalComments: isSet(object.additionalComments) ? globalThis.String(object.additionalComments) : undefined,
      status: isSet(object.status) ? globalThis.String(object.status) : undefined,
      priorityScore: isSet(object.priorityScore) ? globalThis.Number(object.priorityScore) : undefined,
      contactPreferences: isObject(object.contactPreferences) ? object.contactPreferences : undefined,
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
    };
  },

  toJSON(message: UpdateWaitlistEntryRequest): unknown {
    const obj: any = {};
    if (message.id !== "0") {
      obj.id = message.id;
    }
    if (message.email !== undefined) {
      obj.email = message.email;
    }
    if (message.firstName !== undefined) {
      obj.firstName = message.firstName;
    }
    if (message.lastName !== undefined) {
      obj.lastName = message.lastName;
    }
    if (message.tier !== undefined) {
      obj.tier = message.tier;
    }
    if (message.reservedUsername !== undefined) {
      obj.reservedUsername = message.reservedUsername;
    }
    if (message.intention !== undefined) {
      obj.intention = message.intention;
    }
    if (message.questionnaireAnswers !== undefined) {
      obj.questionnaireAnswers = message.questionnaireAnswers;
    }
    if (message.interests?.length) {
      obj.interests = message.interests;
    }
    if (message.referralUsername !== undefined) {
      obj.referralUsername = message.referralUsername;
    }
    if (message.referralCode !== undefined) {
      obj.referralCode = message.referralCode;
    }
    if (message.feedback !== undefined) {
      obj.feedback = message.feedback;
    }
    if (message.additionalComments !== undefined) {
      obj.additionalComments = message.additionalComments;
    }
    if (message.status !== undefined) {
      obj.status = message.status;
    }
    if (message.priorityScore !== undefined) {
      obj.priorityScore = Math.round(message.priorityScore);
    }
    if (message.contactPreferences !== undefined) {
      obj.contactPreferences = message.contactPreferences;
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateWaitlistEntryRequest>, I>>(base?: I): UpdateWaitlistEntryRequest {
    return UpdateWaitlistEntryRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateWaitlistEntryRequest>, I>>(object: I): UpdateWaitlistEntryRequest {
    const message = createBaseUpdateWaitlistEntryRequest();
    message.id = object.id ?? "0";
    message.email = object.email ?? undefined;
    message.firstName = object.firstName ?? undefined;
    message.lastName = object.lastName ?? undefined;
    message.tier = object.tier ?? undefined;
    message.reservedUsername = object.reservedUsername ?? undefined;
    message.intention = object.intention ?? undefined;
    message.questionnaireAnswers = object.questionnaireAnswers ?? undefined;
    message.interests = object.interests?.map((e) => e) || [];
    message.referralUsername = object.referralUsername ?? undefined;
    message.referralCode = object.referralCode ?? undefined;
    message.feedback = object.feedback ?? undefined;
    message.additionalComments = object.additionalComments ?? undefined;
    message.status = object.status ?? undefined;
    message.priorityScore = object.priorityScore ?? undefined;
    message.contactPreferences = object.contactPreferences ?? undefined;
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    return message;
  },
};

function createBaseUpdateWaitlistEntryResponse(): UpdateWaitlistEntryResponse {
  return { entry: undefined };
}

export const UpdateWaitlistEntryResponse: MessageFns<UpdateWaitlistEntryResponse> = {
  encode(message: UpdateWaitlistEntryResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.entry !== undefined) {
      WaitlistEntry.encode(message.entry, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateWaitlistEntryResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateWaitlistEntryResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.entry = WaitlistEntry.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateWaitlistEntryResponse {
    return { entry: isSet(object.entry) ? WaitlistEntry.fromJSON(object.entry) : undefined };
  },

  toJSON(message: UpdateWaitlistEntryResponse): unknown {
    const obj: any = {};
    if (message.entry !== undefined) {
      obj.entry = WaitlistEntry.toJSON(message.entry);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateWaitlistEntryResponse>, I>>(base?: I): UpdateWaitlistEntryResponse {
    return UpdateWaitlistEntryResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateWaitlistEntryResponse>, I>>(object: I): UpdateWaitlistEntryResponse {
    const message = createBaseUpdateWaitlistEntryResponse();
    message.entry = (object.entry !== undefined && object.entry !== null)
      ? WaitlistEntry.fromPartial(object.entry)
      : undefined;
    return message;
  },
};

function createBaseListWaitlistEntriesRequest(): ListWaitlistEntriesRequest {
  return { limit: 0, offset: 0, tierFilter: undefined, statusFilter: undefined, campaignFilter: undefined };
}

export const ListWaitlistEntriesRequest: MessageFns<ListWaitlistEntriesRequest> = {
  encode(message: ListWaitlistEntriesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.limit !== 0) {
      writer.uint32(8).int32(message.limit);
    }
    if (message.offset !== 0) {
      writer.uint32(16).int32(message.offset);
    }
    if (message.tierFilter !== undefined) {
      writer.uint32(26).string(message.tierFilter);
    }
    if (message.statusFilter !== undefined) {
      writer.uint32(34).string(message.statusFilter);
    }
    if (message.campaignFilter !== undefined) {
      writer.uint32(42).string(message.campaignFilter);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListWaitlistEntriesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListWaitlistEntriesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.limit = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.offset = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.tierFilter = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.statusFilter = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.campaignFilter = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListWaitlistEntriesRequest {
    return {
      limit: isSet(object.limit) ? globalThis.Number(object.limit) : 0,
      offset: isSet(object.offset) ? globalThis.Number(object.offset) : 0,
      tierFilter: isSet(object.tierFilter) ? globalThis.String(object.tierFilter) : undefined,
      statusFilter: isSet(object.statusFilter) ? globalThis.String(object.statusFilter) : undefined,
      campaignFilter: isSet(object.campaignFilter) ? globalThis.String(object.campaignFilter) : undefined,
    };
  },

  toJSON(message: ListWaitlistEntriesRequest): unknown {
    const obj: any = {};
    if (message.limit !== 0) {
      obj.limit = Math.round(message.limit);
    }
    if (message.offset !== 0) {
      obj.offset = Math.round(message.offset);
    }
    if (message.tierFilter !== undefined) {
      obj.tierFilter = message.tierFilter;
    }
    if (message.statusFilter !== undefined) {
      obj.statusFilter = message.statusFilter;
    }
    if (message.campaignFilter !== undefined) {
      obj.campaignFilter = message.campaignFilter;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListWaitlistEntriesRequest>, I>>(base?: I): ListWaitlistEntriesRequest {
    return ListWaitlistEntriesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListWaitlistEntriesRequest>, I>>(object: I): ListWaitlistEntriesRequest {
    const message = createBaseListWaitlistEntriesRequest();
    message.limit = object.limit ?? 0;
    message.offset = object.offset ?? 0;
    message.tierFilter = object.tierFilter ?? undefined;
    message.statusFilter = object.statusFilter ?? undefined;
    message.campaignFilter = object.campaignFilter ?? undefined;
    return message;
  },
};

function createBaseListWaitlistEntriesResponse(): ListWaitlistEntriesResponse {
  return { entries: [], totalCount: "0" };
}

export const ListWaitlistEntriesResponse: MessageFns<ListWaitlistEntriesResponse> = {
  encode(message: ListWaitlistEntriesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.entries) {
      WaitlistEntry.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.totalCount !== "0") {
      writer.uint32(16).int64(message.totalCount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListWaitlistEntriesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListWaitlistEntriesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.entries.push(WaitlistEntry.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.totalCount = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListWaitlistEntriesResponse {
    return {
      entries: globalThis.Array.isArray(object?.entries)
        ? object.entries.map((e: any) => WaitlistEntry.fromJSON(e))
        : [],
      totalCount: isSet(object.totalCount) ? globalThis.String(object.totalCount) : "0",
    };
  },

  toJSON(message: ListWaitlistEntriesResponse): unknown {
    const obj: any = {};
    if (message.entries?.length) {
      obj.entries = message.entries.map((e) => WaitlistEntry.toJSON(e));
    }
    if (message.totalCount !== "0") {
      obj.totalCount = message.totalCount;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListWaitlistEntriesResponse>, I>>(base?: I): ListWaitlistEntriesResponse {
    return ListWaitlistEntriesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListWaitlistEntriesResponse>, I>>(object: I): ListWaitlistEntriesResponse {
    const message = createBaseListWaitlistEntriesResponse();
    message.entries = object.entries?.map((e) => WaitlistEntry.fromPartial(e)) || [];
    message.totalCount = object.totalCount ?? "0";
    return message;
  },
};

function createBaseInviteUserRequest(): InviteUserRequest {
  return { id: "0" };
}

export const InviteUserRequest: MessageFns<InviteUserRequest> = {
  encode(message: InviteUserRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "0") {
      writer.uint32(8).int64(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InviteUserRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInviteUserRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InviteUserRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "0" };
  },

  toJSON(message: InviteUserRequest): unknown {
    const obj: any = {};
    if (message.id !== "0") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InviteUserRequest>, I>>(base?: I): InviteUserRequest {
    return InviteUserRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InviteUserRequest>, I>>(object: I): InviteUserRequest {
    const message = createBaseInviteUserRequest();
    message.id = object.id ?? "0";
    return message;
  },
};

function createBaseInviteUserResponse(): InviteUserResponse {
  return { success: false, message: "" };
}

export const InviteUserResponse: MessageFns<InviteUserResponse> = {
  encode(message: InviteUserResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InviteUserResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInviteUserResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InviteUserResponse {
    return {
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
      message: isSet(object.message) ? globalThis.String(object.message) : "",
    };
  },

  toJSON(message: InviteUserResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InviteUserResponse>, I>>(base?: I): InviteUserResponse {
    return InviteUserResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InviteUserResponse>, I>>(object: I): InviteUserResponse {
    const message = createBaseInviteUserResponse();
    message.success = object.success ?? false;
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseCheckUsernameAvailabilityRequest(): CheckUsernameAvailabilityRequest {
  return { username: "" };
}

export const CheckUsernameAvailabilityRequest: MessageFns<CheckUsernameAvailabilityRequest> = {
  encode(message: CheckUsernameAvailabilityRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.username !== "") {
      writer.uint32(10).string(message.username);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CheckUsernameAvailabilityRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCheckUsernameAvailabilityRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.username = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CheckUsernameAvailabilityRequest {
    return { username: isSet(object.username) ? globalThis.String(object.username) : "" };
  },

  toJSON(message: CheckUsernameAvailabilityRequest): unknown {
    const obj: any = {};
    if (message.username !== "") {
      obj.username = message.username;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CheckUsernameAvailabilityRequest>, I>>(
    base?: I,
  ): CheckUsernameAvailabilityRequest {
    return CheckUsernameAvailabilityRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CheckUsernameAvailabilityRequest>, I>>(
    object: I,
  ): CheckUsernameAvailabilityRequest {
    const message = createBaseCheckUsernameAvailabilityRequest();
    message.username = object.username ?? "";
    return message;
  },
};

function createBaseCheckUsernameAvailabilityResponse(): CheckUsernameAvailabilityResponse {
  return { available: false };
}

export const CheckUsernameAvailabilityResponse: MessageFns<CheckUsernameAvailabilityResponse> = {
  encode(message: CheckUsernameAvailabilityResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.available !== false) {
      writer.uint32(8).bool(message.available);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CheckUsernameAvailabilityResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCheckUsernameAvailabilityResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.available = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CheckUsernameAvailabilityResponse {
    return { available: isSet(object.available) ? globalThis.Boolean(object.available) : false };
  },

  toJSON(message: CheckUsernameAvailabilityResponse): unknown {
    const obj: any = {};
    if (message.available !== false) {
      obj.available = message.available;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CheckUsernameAvailabilityResponse>, I>>(
    base?: I,
  ): CheckUsernameAvailabilityResponse {
    return CheckUsernameAvailabilityResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CheckUsernameAvailabilityResponse>, I>>(
    object: I,
  ): CheckUsernameAvailabilityResponse {
    const message = createBaseCheckUsernameAvailabilityResponse();
    message.available = object.available ?? false;
    return message;
  },
};

function createBaseValidateReferralUsernameRequest(): ValidateReferralUsernameRequest {
  return { username: "" };
}

export const ValidateReferralUsernameRequest: MessageFns<ValidateReferralUsernameRequest> = {
  encode(message: ValidateReferralUsernameRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.username !== "") {
      writer.uint32(10).string(message.username);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ValidateReferralUsernameRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseValidateReferralUsernameRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.username = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ValidateReferralUsernameRequest {
    return { username: isSet(object.username) ? globalThis.String(object.username) : "" };
  },

  toJSON(message: ValidateReferralUsernameRequest): unknown {
    const obj: any = {};
    if (message.username !== "") {
      obj.username = message.username;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ValidateReferralUsernameRequest>, I>>(base?: I): ValidateReferralUsernameRequest {
    return ValidateReferralUsernameRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ValidateReferralUsernameRequest>, I>>(
    object: I,
  ): ValidateReferralUsernameRequest {
    const message = createBaseValidateReferralUsernameRequest();
    message.username = object.username ?? "";
    return message;
  },
};

function createBaseValidateReferralUsernameResponse(): ValidateReferralUsernameResponse {
  return { valid: false };
}

export const ValidateReferralUsernameResponse: MessageFns<ValidateReferralUsernameResponse> = {
  encode(message: ValidateReferralUsernameResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.valid !== false) {
      writer.uint32(8).bool(message.valid);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ValidateReferralUsernameResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseValidateReferralUsernameResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.valid = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ValidateReferralUsernameResponse {
    return { valid: isSet(object.valid) ? globalThis.Boolean(object.valid) : false };
  },

  toJSON(message: ValidateReferralUsernameResponse): unknown {
    const obj: any = {};
    if (message.valid !== false) {
      obj.valid = message.valid;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ValidateReferralUsernameResponse>, I>>(
    base?: I,
  ): ValidateReferralUsernameResponse {
    return ValidateReferralUsernameResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ValidateReferralUsernameResponse>, I>>(
    object: I,
  ): ValidateReferralUsernameResponse {
    const message = createBaseValidateReferralUsernameResponse();
    message.valid = object.valid ?? false;
    return message;
  },
};

function createBaseGetLeaderboardRequest(): GetLeaderboardRequest {
  return { limit: 0, campaign: undefined };
}

export const GetLeaderboardRequest: MessageFns<GetLeaderboardRequest> = {
  encode(message: GetLeaderboardRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.limit !== 0) {
      writer.uint32(8).int32(message.limit);
    }
    if (message.campaign !== undefined) {
      writer.uint32(18).string(message.campaign);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetLeaderboardRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetLeaderboardRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.limit = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.campaign = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetLeaderboardRequest {
    return {
      limit: isSet(object.limit) ? globalThis.Number(object.limit) : 0,
      campaign: isSet(object.campaign) ? globalThis.String(object.campaign) : undefined,
    };
  },

  toJSON(message: GetLeaderboardRequest): unknown {
    const obj: any = {};
    if (message.limit !== 0) {
      obj.limit = Math.round(message.limit);
    }
    if (message.campaign !== undefined) {
      obj.campaign = message.campaign;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetLeaderboardRequest>, I>>(base?: I): GetLeaderboardRequest {
    return GetLeaderboardRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetLeaderboardRequest>, I>>(object: I): GetLeaderboardRequest {
    const message = createBaseGetLeaderboardRequest();
    message.limit = object.limit ?? 0;
    message.campaign = object.campaign ?? undefined;
    return message;
  },
};

function createBaseGetLeaderboardResponse(): GetLeaderboardResponse {
  return { entries: [] };
}

export const GetLeaderboardResponse: MessageFns<GetLeaderboardResponse> = {
  encode(message: GetLeaderboardResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.entries) {
      LeaderboardEntry.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetLeaderboardResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetLeaderboardResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.entries.push(LeaderboardEntry.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetLeaderboardResponse {
    return {
      entries: globalThis.Array.isArray(object?.entries)
        ? object.entries.map((e: any) => LeaderboardEntry.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GetLeaderboardResponse): unknown {
    const obj: any = {};
    if (message.entries?.length) {
      obj.entries = message.entries.map((e) => LeaderboardEntry.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetLeaderboardResponse>, I>>(base?: I): GetLeaderboardResponse {
    return GetLeaderboardResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetLeaderboardResponse>, I>>(object: I): GetLeaderboardResponse {
    const message = createBaseGetLeaderboardResponse();
    message.entries = object.entries?.map((e) => LeaderboardEntry.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetReferralsByUserRequest(): GetReferralsByUserRequest {
  return { userId: "0" };
}

export const GetReferralsByUserRequest: MessageFns<GetReferralsByUserRequest> = {
  encode(message: GetReferralsByUserRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "0") {
      writer.uint32(8).int64(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetReferralsByUserRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetReferralsByUserRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetReferralsByUserRequest {
    return { userId: isSet(object.userId) ? globalThis.String(object.userId) : "0" };
  },

  toJSON(message: GetReferralsByUserRequest): unknown {
    const obj: any = {};
    if (message.userId !== "0") {
      obj.userId = message.userId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetReferralsByUserRequest>, I>>(base?: I): GetReferralsByUserRequest {
    return GetReferralsByUserRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetReferralsByUserRequest>, I>>(object: I): GetReferralsByUserRequest {
    const message = createBaseGetReferralsByUserRequest();
    message.userId = object.userId ?? "0";
    return message;
  },
};

function createBaseGetReferralsByUserResponse(): GetReferralsByUserResponse {
  return { referrals: [] };
}

export const GetReferralsByUserResponse: MessageFns<GetReferralsByUserResponse> = {
  encode(message: GetReferralsByUserResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.referrals) {
      ReferralRecord.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetReferralsByUserResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetReferralsByUserResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.referrals.push(ReferralRecord.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetReferralsByUserResponse {
    return {
      referrals: globalThis.Array.isArray(object?.referrals)
        ? object.referrals.map((e: any) => ReferralRecord.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GetReferralsByUserResponse): unknown {
    const obj: any = {};
    if (message.referrals?.length) {
      obj.referrals = message.referrals.map((e) => ReferralRecord.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetReferralsByUserResponse>, I>>(base?: I): GetReferralsByUserResponse {
    return GetReferralsByUserResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetReferralsByUserResponse>, I>>(object: I): GetReferralsByUserResponse {
    const message = createBaseGetReferralsByUserResponse();
    message.referrals = object.referrals?.map((e) => ReferralRecord.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetLocationStatsRequest(): GetLocationStatsRequest {
  return { campaign: undefined };
}

export const GetLocationStatsRequest: MessageFns<GetLocationStatsRequest> = {
  encode(message: GetLocationStatsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.campaign !== undefined) {
      writer.uint32(10).string(message.campaign);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetLocationStatsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetLocationStatsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.campaign = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetLocationStatsRequest {
    return { campaign: isSet(object.campaign) ? globalThis.String(object.campaign) : undefined };
  },

  toJSON(message: GetLocationStatsRequest): unknown {
    const obj: any = {};
    if (message.campaign !== undefined) {
      obj.campaign = message.campaign;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetLocationStatsRequest>, I>>(base?: I): GetLocationStatsRequest {
    return GetLocationStatsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetLocationStatsRequest>, I>>(object: I): GetLocationStatsRequest {
    const message = createBaseGetLocationStatsRequest();
    message.campaign = object.campaign ?? undefined;
    return message;
  },
};

function createBaseGetLocationStatsResponse(): GetLocationStatsResponse {
  return { stats: [] };
}

export const GetLocationStatsResponse: MessageFns<GetLocationStatsResponse> = {
  encode(message: GetLocationStatsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.stats) {
      LocationStat.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetLocationStatsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetLocationStatsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.stats.push(LocationStat.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetLocationStatsResponse {
    return {
      stats: globalThis.Array.isArray(object?.stats) ? object.stats.map((e: any) => LocationStat.fromJSON(e)) : [],
    };
  },

  toJSON(message: GetLocationStatsResponse): unknown {
    const obj: any = {};
    if (message.stats?.length) {
      obj.stats = message.stats.map((e) => LocationStat.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetLocationStatsResponse>, I>>(base?: I): GetLocationStatsResponse {
    return GetLocationStatsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetLocationStatsResponse>, I>>(object: I): GetLocationStatsResponse {
    const message = createBaseGetLocationStatsResponse();
    message.stats = object.stats?.map((e) => LocationStat.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetWaitlistStatsRequest(): GetWaitlistStatsRequest {
  return { campaign: undefined };
}

export const GetWaitlistStatsRequest: MessageFns<GetWaitlistStatsRequest> = {
  encode(message: GetWaitlistStatsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.campaign !== undefined) {
      writer.uint32(10).string(message.campaign);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetWaitlistStatsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetWaitlistStatsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.campaign = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetWaitlistStatsRequest {
    return { campaign: isSet(object.campaign) ? globalThis.String(object.campaign) : undefined };
  },

  toJSON(message: GetWaitlistStatsRequest): unknown {
    const obj: any = {};
    if (message.campaign !== undefined) {
      obj.campaign = message.campaign;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetWaitlistStatsRequest>, I>>(base?: I): GetWaitlistStatsRequest {
    return GetWaitlistStatsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetWaitlistStatsRequest>, I>>(object: I): GetWaitlistStatsRequest {
    const message = createBaseGetWaitlistStatsRequest();
    message.campaign = object.campaign ?? undefined;
    return message;
  },
};

function createBaseGetWaitlistStatsResponse(): GetWaitlistStatsResponse {
  return { stats: undefined };
}

export const GetWaitlistStatsResponse: MessageFns<GetWaitlistStatsResponse> = {
  encode(message: GetWaitlistStatsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.stats !== undefined) {
      WaitlistStats.encode(message.stats, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetWaitlistStatsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetWaitlistStatsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.stats = WaitlistStats.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetWaitlistStatsResponse {
    return { stats: isSet(object.stats) ? WaitlistStats.fromJSON(object.stats) : undefined };
  },

  toJSON(message: GetWaitlistStatsResponse): unknown {
    const obj: any = {};
    if (message.stats !== undefined) {
      obj.stats = WaitlistStats.toJSON(message.stats);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetWaitlistStatsResponse>, I>>(base?: I): GetWaitlistStatsResponse {
    return GetWaitlistStatsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetWaitlistStatsResponse>, I>>(object: I): GetWaitlistStatsResponse {
    const message = createBaseGetWaitlistStatsResponse();
    message.stats = (object.stats !== undefined && object.stats !== null)
      ? WaitlistStats.fromPartial(object.stats)
      : undefined;
    return message;
  },
};

function createBaseGetWaitlistPositionRequest(): GetWaitlistPositionRequest {
  return { id: "0" };
}

export const GetWaitlistPositionRequest: MessageFns<GetWaitlistPositionRequest> = {
  encode(message: GetWaitlistPositionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "0") {
      writer.uint32(8).int64(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetWaitlistPositionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetWaitlistPositionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetWaitlistPositionRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "0" };
  },

  toJSON(message: GetWaitlistPositionRequest): unknown {
    const obj: any = {};
    if (message.id !== "0") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetWaitlistPositionRequest>, I>>(base?: I): GetWaitlistPositionRequest {
    return GetWaitlistPositionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetWaitlistPositionRequest>, I>>(object: I): GetWaitlistPositionRequest {
    const message = createBaseGetWaitlistPositionRequest();
    message.id = object.id ?? "0";
    return message;
  },
};

function createBaseGetWaitlistPositionResponse(): GetWaitlistPositionResponse {
  return { position: 0 };
}

export const GetWaitlistPositionResponse: MessageFns<GetWaitlistPositionResponse> = {
  encode(message: GetWaitlistPositionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.position !== 0) {
      writer.uint32(8).int32(message.position);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetWaitlistPositionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetWaitlistPositionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.position = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetWaitlistPositionResponse {
    return { position: isSet(object.position) ? globalThis.Number(object.position) : 0 };
  },

  toJSON(message: GetWaitlistPositionResponse): unknown {
    const obj: any = {};
    if (message.position !== 0) {
      obj.position = Math.round(message.position);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetWaitlistPositionResponse>, I>>(base?: I): GetWaitlistPositionResponse {
    return GetWaitlistPositionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetWaitlistPositionResponse>, I>>(object: I): GetWaitlistPositionResponse {
    const message = createBaseGetWaitlistPositionResponse();
    message.position = object.position ?? 0;
    return message;
  },
};

/** Waitlist service definition */
export interface WaitlistService {
  /** Create a new waitlist entry */
  CreateWaitlistEntry(request: CreateWaitlistEntryRequest): Promise<CreateWaitlistEntryResponse>;
  /** Get waitlist entry by ID, UUID, or email */
  GetWaitlistEntry(request: GetWaitlistEntryRequest): Promise<GetWaitlistEntryResponse>;
  /** Update an existing waitlist entry */
  UpdateWaitlistEntry(request: UpdateWaitlistEntryRequest): Promise<UpdateWaitlistEntryResponse>;
  /** List waitlist entries with pagination and filters */
  ListWaitlistEntries(request: ListWaitlistEntriesRequest): Promise<ListWaitlistEntriesResponse>;
  /** Invite a user (update status to invited) */
  InviteUser(request: InviteUserRequest): Promise<InviteUserResponse>;
  /** Check if username is available */
  CheckUsernameAvailability(request: CheckUsernameAvailabilityRequest): Promise<CheckUsernameAvailabilityResponse>;
  /** Validate referral username */
  ValidateReferralUsername(request: ValidateReferralUsernameRequest): Promise<ValidateReferralUsernameResponse>;
  /** Get referral leaderboard */
  GetLeaderboard(request: GetLeaderboardRequest): Promise<GetLeaderboardResponse>;
  /** Get referrals made by a user */
  GetReferralsByUser(request: GetReferralsByUserRequest): Promise<GetReferralsByUserResponse>;
  /** Get location-based statistics */
  GetLocationStats(request: GetLocationStatsRequest): Promise<GetLocationStatsResponse>;
  /** Get waitlist statistics */
  GetWaitlistStats(request: GetWaitlistStatsRequest): Promise<GetWaitlistStatsResponse>;
  /** Get user's waitlist position */
  GetWaitlistPosition(request: GetWaitlistPositionRequest): Promise<GetWaitlistPositionResponse>;
}

export const WaitlistServiceServiceName = "waitlist.v1.WaitlistService";
export class WaitlistServiceClientImpl implements WaitlistService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || WaitlistServiceServiceName;
    this.rpc = rpc;
    this.CreateWaitlistEntry = this.CreateWaitlistEntry.bind(this);
    this.GetWaitlistEntry = this.GetWaitlistEntry.bind(this);
    this.UpdateWaitlistEntry = this.UpdateWaitlistEntry.bind(this);
    this.ListWaitlistEntries = this.ListWaitlistEntries.bind(this);
    this.InviteUser = this.InviteUser.bind(this);
    this.CheckUsernameAvailability = this.CheckUsernameAvailability.bind(this);
    this.ValidateReferralUsername = this.ValidateReferralUsername.bind(this);
    this.GetLeaderboard = this.GetLeaderboard.bind(this);
    this.GetReferralsByUser = this.GetReferralsByUser.bind(this);
    this.GetLocationStats = this.GetLocationStats.bind(this);
    this.GetWaitlistStats = this.GetWaitlistStats.bind(this);
    this.GetWaitlistPosition = this.GetWaitlistPosition.bind(this);
  }
  CreateWaitlistEntry(request: CreateWaitlistEntryRequest): Promise<CreateWaitlistEntryResponse> {
    const data = CreateWaitlistEntryRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateWaitlistEntry", data);
    return promise.then((data) => CreateWaitlistEntryResponse.decode(new BinaryReader(data)));
  }

  GetWaitlistEntry(request: GetWaitlistEntryRequest): Promise<GetWaitlistEntryResponse> {
    const data = GetWaitlistEntryRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetWaitlistEntry", data);
    return promise.then((data) => GetWaitlistEntryResponse.decode(new BinaryReader(data)));
  }

  UpdateWaitlistEntry(request: UpdateWaitlistEntryRequest): Promise<UpdateWaitlistEntryResponse> {
    const data = UpdateWaitlistEntryRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateWaitlistEntry", data);
    return promise.then((data) => UpdateWaitlistEntryResponse.decode(new BinaryReader(data)));
  }

  ListWaitlistEntries(request: ListWaitlistEntriesRequest): Promise<ListWaitlistEntriesResponse> {
    const data = ListWaitlistEntriesRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ListWaitlistEntries", data);
    return promise.then((data) => ListWaitlistEntriesResponse.decode(new BinaryReader(data)));
  }

  InviteUser(request: InviteUserRequest): Promise<InviteUserResponse> {
    const data = InviteUserRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "InviteUser", data);
    return promise.then((data) => InviteUserResponse.decode(new BinaryReader(data)));
  }

  CheckUsernameAvailability(request: CheckUsernameAvailabilityRequest): Promise<CheckUsernameAvailabilityResponse> {
    const data = CheckUsernameAvailabilityRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "CheckUsernameAvailability", data);
    return promise.then((data) => CheckUsernameAvailabilityResponse.decode(new BinaryReader(data)));
  }

  ValidateReferralUsername(request: ValidateReferralUsernameRequest): Promise<ValidateReferralUsernameResponse> {
    const data = ValidateReferralUsernameRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ValidateReferralUsername", data);
    return promise.then((data) => ValidateReferralUsernameResponse.decode(new BinaryReader(data)));
  }

  GetLeaderboard(request: GetLeaderboardRequest): Promise<GetLeaderboardResponse> {
    const data = GetLeaderboardRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetLeaderboard", data);
    return promise.then((data) => GetLeaderboardResponse.decode(new BinaryReader(data)));
  }

  GetReferralsByUser(request: GetReferralsByUserRequest): Promise<GetReferralsByUserResponse> {
    const data = GetReferralsByUserRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetReferralsByUser", data);
    return promise.then((data) => GetReferralsByUserResponse.decode(new BinaryReader(data)));
  }

  GetLocationStats(request: GetLocationStatsRequest): Promise<GetLocationStatsResponse> {
    const data = GetLocationStatsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetLocationStats", data);
    return promise.then((data) => GetLocationStatsResponse.decode(new BinaryReader(data)));
  }

  GetWaitlistStats(request: GetWaitlistStatsRequest): Promise<GetWaitlistStatsResponse> {
    const data = GetWaitlistStatsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetWaitlistStats", data);
    return promise.then((data) => GetWaitlistStatsResponse.decode(new BinaryReader(data)));
  }

  GetWaitlistPosition(request: GetWaitlistPositionRequest): Promise<GetWaitlistPositionResponse> {
    const data = GetWaitlistPositionRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetWaitlistPosition", data);
    return promise.then((data) => GetWaitlistPositionResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000).toString();
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (globalThis.Number(t.seconds) || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
