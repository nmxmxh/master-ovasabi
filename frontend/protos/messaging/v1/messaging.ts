// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v5.29.3
// source: messaging/v1/messaging.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Observable } from "rxjs";
import { map } from "rxjs/operators";
import { Metadata } from "../../common/v1/metadata";
import { Struct } from "../../google/protobuf/struct";
import { Timestamp } from "../../google/protobuf/timestamp";

export const protobufPackage = "messaging.v1";

export enum MessageType {
  MESSAGE_TYPE_UNSPECIFIED = 0,
  MESSAGE_TYPE_TEXT = 1,
  MESSAGE_TYPE_IMAGE = 2,
  MESSAGE_TYPE_VIDEO = 3,
  MESSAGE_TYPE_FILE = 4,
  MESSAGE_TYPE_SYSTEM = 5,
  MESSAGE_TYPE_REPLY = 6,
  MESSAGE_TYPE_FORWARD = 7,
  UNRECOGNIZED = -1,
}

export function messageTypeFromJSON(object: any): MessageType {
  switch (object) {
    case 0:
    case "MESSAGE_TYPE_UNSPECIFIED":
      return MessageType.MESSAGE_TYPE_UNSPECIFIED;
    case 1:
    case "MESSAGE_TYPE_TEXT":
      return MessageType.MESSAGE_TYPE_TEXT;
    case 2:
    case "MESSAGE_TYPE_IMAGE":
      return MessageType.MESSAGE_TYPE_IMAGE;
    case 3:
    case "MESSAGE_TYPE_VIDEO":
      return MessageType.MESSAGE_TYPE_VIDEO;
    case 4:
    case "MESSAGE_TYPE_FILE":
      return MessageType.MESSAGE_TYPE_FILE;
    case 5:
    case "MESSAGE_TYPE_SYSTEM":
      return MessageType.MESSAGE_TYPE_SYSTEM;
    case 6:
    case "MESSAGE_TYPE_REPLY":
      return MessageType.MESSAGE_TYPE_REPLY;
    case 7:
    case "MESSAGE_TYPE_FORWARD":
      return MessageType.MESSAGE_TYPE_FORWARD;
    case -1:
    case "UNRECOGNIZED":
    default:
      return MessageType.UNRECOGNIZED;
  }
}

export function messageTypeToJSON(object: MessageType): string {
  switch (object) {
    case MessageType.MESSAGE_TYPE_UNSPECIFIED:
      return "MESSAGE_TYPE_UNSPECIFIED";
    case MessageType.MESSAGE_TYPE_TEXT:
      return "MESSAGE_TYPE_TEXT";
    case MessageType.MESSAGE_TYPE_IMAGE:
      return "MESSAGE_TYPE_IMAGE";
    case MessageType.MESSAGE_TYPE_VIDEO:
      return "MESSAGE_TYPE_VIDEO";
    case MessageType.MESSAGE_TYPE_FILE:
      return "MESSAGE_TYPE_FILE";
    case MessageType.MESSAGE_TYPE_SYSTEM:
      return "MESSAGE_TYPE_SYSTEM";
    case MessageType.MESSAGE_TYPE_REPLY:
      return "MESSAGE_TYPE_REPLY";
    case MessageType.MESSAGE_TYPE_FORWARD:
      return "MESSAGE_TYPE_FORWARD";
    case MessageType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum MessageStatus {
  MESSAGE_STATUS_UNSPECIFIED = 0,
  MESSAGE_STATUS_SENT = 1,
  MESSAGE_STATUS_DELIVERED = 2,
  MESSAGE_STATUS_READ = 3,
  MESSAGE_STATUS_FAILED = 4,
  MESSAGE_STATUS_DELETED = 5,
  UNRECOGNIZED = -1,
}

export function messageStatusFromJSON(object: any): MessageStatus {
  switch (object) {
    case 0:
    case "MESSAGE_STATUS_UNSPECIFIED":
      return MessageStatus.MESSAGE_STATUS_UNSPECIFIED;
    case 1:
    case "MESSAGE_STATUS_SENT":
      return MessageStatus.MESSAGE_STATUS_SENT;
    case 2:
    case "MESSAGE_STATUS_DELIVERED":
      return MessageStatus.MESSAGE_STATUS_DELIVERED;
    case 3:
    case "MESSAGE_STATUS_READ":
      return MessageStatus.MESSAGE_STATUS_READ;
    case 4:
    case "MESSAGE_STATUS_FAILED":
      return MessageStatus.MESSAGE_STATUS_FAILED;
    case 5:
    case "MESSAGE_STATUS_DELETED":
      return MessageStatus.MESSAGE_STATUS_DELETED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return MessageStatus.UNRECOGNIZED;
  }
}

export function messageStatusToJSON(object: MessageStatus): string {
  switch (object) {
    case MessageStatus.MESSAGE_STATUS_UNSPECIFIED:
      return "MESSAGE_STATUS_UNSPECIFIED";
    case MessageStatus.MESSAGE_STATUS_SENT:
      return "MESSAGE_STATUS_SENT";
    case MessageStatus.MESSAGE_STATUS_DELIVERED:
      return "MESSAGE_STATUS_DELIVERED";
    case MessageStatus.MESSAGE_STATUS_READ:
      return "MESSAGE_STATUS_READ";
    case MessageStatus.MESSAGE_STATUS_FAILED:
      return "MESSAGE_STATUS_FAILED";
    case MessageStatus.MESSAGE_STATUS_DELETED:
      return "MESSAGE_STATUS_DELETED";
    case MessageStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** --- Core Entities --- */
export interface Message {
  id: string;
  threadId: string;
  conversationId: string;
  chatGroupId: string;
  senderId: string;
  recipientIds: string[];
  content: string;
  type: MessageType;
  attachments: Attachment[];
  reactions: Reaction[];
  status: MessageStatus;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  edited: boolean;
  deleted: boolean;
  metadata?:
    | Metadata
    | undefined;
  /** campaign/tenant context */
  campaignId: string;
}

export interface Thread {
  id: string;
  participantIds: string[];
  subject: string;
  messageIds: string[];
  metadata?: Metadata | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
}

export interface Conversation {
  id: string;
  participantIds: string[];
  chatGroupId: string;
  threadIds: string[];
  metadata?: Metadata | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
}

export interface ChatGroup {
  id: string;
  name: string;
  description: string;
  memberIds: string[];
  /** user_id -> role */
  roles: { [key: string]: string };
  metadata?: Metadata | undefined;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
}

export interface ChatGroup_RolesEntry {
  key: string;
  value: string;
}

export interface Reaction {
  userId: string;
  emoji: string;
  reactedAt?: Date | undefined;
  metadata?: Metadata | undefined;
}

export interface Attachment {
  id: string;
  url: string;
  type: string;
  filename: string;
  size: string;
  metadata?: Metadata | undefined;
}

/** --- Requests/Responses --- */
export interface SendMessageRequest {
  threadId: string;
  conversationId: string;
  chatGroupId: string;
  senderId: string;
  recipientIds: string[];
  content: string;
  type: MessageType;
  attachments: Attachment[];
  metadata?:
    | Metadata
    | undefined;
  /** optional */
  productId: string;
  /** optional */
  campaignId: string;
  /** optional */
  talentId: string;
}

export interface SendMessageResponse {
  message?: Message | undefined;
}

export interface SendGroupMessageRequest {
  chatGroupId: string;
  senderId: string;
  content: string;
  type: MessageType;
  attachments: Attachment[];
  metadata?:
    | Metadata
    | undefined;
  /** optional */
  productId: string;
  /** optional */
  campaignId: string;
  /** optional */
  talentId: string;
}

export interface SendGroupMessageResponse {
  message?: Message | undefined;
}

export interface EditMessageRequest {
  messageId: string;
  editorId: string;
  newContent: string;
  newAttachments: Attachment[];
  metadata?:
    | Metadata
    | undefined;
  /** optional */
  productId: string;
  /** optional */
  campaignId: string;
  /** optional */
  talentId: string;
}

export interface EditMessageResponse {
  message?: Message | undefined;
}

export interface DeleteMessageRequest {
  messageId: string;
  requesterId: string;
  metadata?:
    | Metadata
    | undefined;
  /** optional */
  productId: string;
  /** optional */
  campaignId: string;
  /** optional */
  talentId: string;
}

export interface DeleteMessageResponse {
  success: boolean;
}

export interface ReactToMessageRequest {
  messageId: string;
  userId: string;
  emoji: string;
  metadata?:
    | Metadata
    | undefined;
  /** optional */
  productId: string;
  /** optional */
  campaignId: string;
  /** optional */
  talentId: string;
}

export interface ReactToMessageResponse {
  message?: Message | undefined;
}

export interface GetMessageRequest {
  messageId: string;
}

export interface GetMessageResponse {
  message?: Message | undefined;
}

export interface ListMessagesRequest {
  threadId: string;
  conversationId: string;
  chatGroupId: string;
  page: number;
  pageSize: number;
  filters?: Metadata | undefined;
  metadata?:
    | Metadata
    | undefined;
  /** optional */
  productId: string;
  /** optional */
  campaignId: string;
  /** optional */
  talentId: string;
}

export interface ListMessagesResponse {
  messages: Message[];
  totalCount: number;
  page: number;
  totalPages: number;
}

export interface ListThreadsRequest {
  userId: string;
  page: number;
  pageSize: number;
  filters?: Metadata | undefined;
  metadata?:
    | Metadata
    | undefined;
  /** optional */
  productId: string;
  /** optional */
  campaignId: string;
  /** optional */
  talentId: string;
}

export interface ListThreadsResponse {
  threads: Thread[];
  totalCount: number;
  page: number;
  totalPages: number;
}

export interface ListConversationsRequest {
  userId: string;
  page: number;
  pageSize: number;
  filters?: Metadata | undefined;
  metadata?:
    | Metadata
    | undefined;
  /** optional */
  productId: string;
  /** optional */
  campaignId: string;
  /** optional */
  talentId: string;
}

export interface ListConversationsResponse {
  conversations: Conversation[];
  totalCount: number;
  page: number;
  totalPages: number;
}

/** --- Real-Time Streaming --- */
export interface StreamMessagesRequest {
  userId: string;
  conversationIds: string[];
  chatGroupIds: string[];
  filters?: Metadata | undefined;
  metadata?:
    | Metadata
    | undefined;
  /** optional */
  productId: string;
  /** optional */
  campaignId: string;
  /** optional */
  talentId: string;
}

export interface MessageEvent {
  eventId: string;
  messageId: string;
  threadId: string;
  conversationId: string;
  chatGroupId: string;
  eventType: string;
  payload?: { [key: string]: any } | undefined;
  createdAt?:
    | Date
    | undefined;
  /** optional */
  productId: string;
  /** optional */
  campaignId: string;
  /** optional */
  talentId: string;
}

export interface StreamTypingRequest {
  userId: string;
  conversationId: string;
  chatGroupId: string;
  metadata?:
    | Metadata
    | undefined;
  /** optional */
  productId: string;
  /** optional */
  campaignId: string;
  /** optional */
  talentId: string;
}

export interface TypingEvent {
  userId: string;
  conversationId: string;
  chatGroupId: string;
  isTyping: boolean;
  timestamp?:
    | Date
    | undefined;
  /** optional */
  productId: string;
  /** optional */
  campaignId: string;
  /** optional */
  talentId: string;
}

export interface StreamPresenceRequest {
  userId: string;
  metadata?:
    | Metadata
    | undefined;
  /** optional */
  productId: string;
  /** optional */
  campaignId: string;
  /** optional */
  talentId: string;
}

export interface PresenceEvent {
  userId: string;
  /** online, offline, away, dnd */
  status: string;
  timestamp?:
    | Date
    | undefined;
  /** optional */
  productId: string;
  /** optional */
  campaignId: string;
  /** optional */
  talentId: string;
}

/** --- Read/Delivery/Ack --- */
export interface MarkAsReadRequest {
  messageId: string;
  userId: string;
  metadata?:
    | Metadata
    | undefined;
  /** optional */
  productId: string;
  /** optional */
  campaignId: string;
  /** optional */
  talentId: string;
}

export interface MarkAsReadResponse {
  success: boolean;
}

export interface MarkAsDeliveredRequest {
  messageId: string;
  userId: string;
  metadata?:
    | Metadata
    | undefined;
  /** optional */
  productId: string;
  /** optional */
  campaignId: string;
  /** optional */
  talentId: string;
}

export interface MarkAsDeliveredResponse {
  success: boolean;
}

export interface AcknowledgeMessageRequest {
  messageId: string;
  userId: string;
  metadata?:
    | Metadata
    | undefined;
  /** optional */
  productId: string;
  /** optional */
  campaignId: string;
  /** optional */
  talentId: string;
}

export interface AcknowledgeMessageResponse {
  success: boolean;
}

/** --- Group Management --- */
export interface CreateChatGroupRequest {
  name: string;
  description: string;
  memberIds: string[];
  roles: { [key: string]: string };
  metadata?:
    | Metadata
    | undefined;
  /** optional */
  productId: string;
  /** optional */
  campaignId: string;
  /** optional */
  talentId: string;
}

export interface CreateChatGroupRequest_RolesEntry {
  key: string;
  value: string;
}

export interface CreateChatGroupResponse {
  chatGroup?: ChatGroup | undefined;
}

export interface AddChatGroupMemberRequest {
  chatGroupId: string;
  userId: string;
  role: string;
  metadata?:
    | Metadata
    | undefined;
  /** optional */
  productId: string;
  /** optional */
  campaignId: string;
  /** optional */
  talentId: string;
}

export interface AddChatGroupMemberResponse {
  chatGroup?: ChatGroup | undefined;
}

export interface RemoveChatGroupMemberRequest {
  chatGroupId: string;
  userId: string;
  metadata?:
    | Metadata
    | undefined;
  /** optional */
  productId: string;
  /** optional */
  campaignId: string;
  /** optional */
  talentId: string;
}

export interface RemoveChatGroupMemberResponse {
  chatGroup?: ChatGroup | undefined;
}

export interface ListChatGroupMembersRequest {
  chatGroupId: string;
  page: number;
  pageSize: number;
  metadata?:
    | Metadata
    | undefined;
  /** optional */
  productId: string;
  /** optional */
  campaignId: string;
  /** optional */
  talentId: string;
}

export interface ListChatGroupMembersResponse {
  memberIds: string[];
  totalCount: number;
  page: number;
  totalPages: number;
}

/** --- Preferences --- */
export interface MessagingPreferences {
  mute: boolean;
  archive: boolean;
  notificationTypes: { [key: string]: boolean };
  quietHours: string[];
  timezone: string;
  metadata?:
    | Metadata
    | undefined;
  /** optional */
  productId: string;
  /** optional */
  campaignId: string;
  /** optional */
  talentId: string;
}

export interface MessagingPreferences_NotificationTypesEntry {
  key: string;
  value: boolean;
}

export interface UpdateMessagingPreferencesRequest {
  userId: string;
  preferences?:
    | MessagingPreferences
    | undefined;
  /** optional */
  productId: string;
  /** optional */
  campaignId: string;
  /** optional */
  talentId: string;
}

export interface UpdateMessagingPreferencesResponse {
  preferences?: MessagingPreferences | undefined;
  updatedAt: string;
}

/** --- Analytics/Events --- */
export interface ListMessageEventsRequest {
  userId: string;
  page: number;
  pageSize: number;
  filters?: Metadata | undefined;
  metadata?:
    | Metadata
    | undefined;
  /** optional */
  productId: string;
  /** optional */
  campaignId: string;
  /** optional */
  talentId: string;
}

export interface ListMessageEventsResponse {
  events: MessageEvent[];
  totalCount: number;
  page: number;
  totalPages: number;
}

function createBaseMessage(): Message {
  return {
    id: "",
    threadId: "",
    conversationId: "",
    chatGroupId: "",
    senderId: "",
    recipientIds: [],
    content: "",
    type: 0,
    attachments: [],
    reactions: [],
    status: 0,
    createdAt: undefined,
    updatedAt: undefined,
    edited: false,
    deleted: false,
    metadata: undefined,
    campaignId: "0",
  };
}

export const Message: MessageFns<Message> = {
  encode(message: Message, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.threadId !== "") {
      writer.uint32(18).string(message.threadId);
    }
    if (message.conversationId !== "") {
      writer.uint32(26).string(message.conversationId);
    }
    if (message.chatGroupId !== "") {
      writer.uint32(34).string(message.chatGroupId);
    }
    if (message.senderId !== "") {
      writer.uint32(42).string(message.senderId);
    }
    for (const v of message.recipientIds) {
      writer.uint32(50).string(v!);
    }
    if (message.content !== "") {
      writer.uint32(58).string(message.content);
    }
    if (message.type !== 0) {
      writer.uint32(64).int32(message.type);
    }
    for (const v of message.attachments) {
      Attachment.encode(v!, writer.uint32(74).fork()).join();
    }
    for (const v of message.reactions) {
      Reaction.encode(v!, writer.uint32(82).fork()).join();
    }
    if (message.status !== 0) {
      writer.uint32(88).int32(message.status);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(98).fork()).join();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.updatedAt), writer.uint32(106).fork()).join();
    }
    if (message.edited !== false) {
      writer.uint32(112).bool(message.edited);
    }
    if (message.deleted !== false) {
      writer.uint32(120).bool(message.deleted);
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(130).fork()).join();
    }
    if (message.campaignId !== "0") {
      writer.uint32(136).int64(message.campaignId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.threadId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.conversationId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.chatGroupId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.senderId = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.recipientIds.push(reader.string());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.content = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.attachments.push(Attachment.decode(reader, reader.uint32()));
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.reactions.push(Reaction.decode(reader, reader.uint32()));
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.updatedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.edited = reader.bool();
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.deleted = reader.bool();
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
        case 17: {
          if (tag !== 136) {
            break;
          }

          message.campaignId = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Message {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      threadId: isSet(object.threadId) ? globalThis.String(object.threadId) : "",
      conversationId: isSet(object.conversationId) ? globalThis.String(object.conversationId) : "",
      chatGroupId: isSet(object.chatGroupId) ? globalThis.String(object.chatGroupId) : "",
      senderId: isSet(object.senderId) ? globalThis.String(object.senderId) : "",
      recipientIds: globalThis.Array.isArray(object?.recipientIds)
        ? object.recipientIds.map((e: any) => globalThis.String(e))
        : [],
      content: isSet(object.content) ? globalThis.String(object.content) : "",
      type: isSet(object.type) ? messageTypeFromJSON(object.type) : 0,
      attachments: globalThis.Array.isArray(object?.attachments)
        ? object.attachments.map((e: any) => Attachment.fromJSON(e))
        : [],
      reactions: globalThis.Array.isArray(object?.reactions)
        ? object.reactions.map((e: any) => Reaction.fromJSON(e))
        : [],
      status: isSet(object.status) ? messageStatusFromJSON(object.status) : 0,
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
      edited: isSet(object.edited) ? globalThis.Boolean(object.edited) : false,
      deleted: isSet(object.deleted) ? globalThis.Boolean(object.deleted) : false,
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
      campaignId: isSet(object.campaignId) ? globalThis.String(object.campaignId) : "0",
    };
  },

  toJSON(message: Message): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.threadId !== "") {
      obj.threadId = message.threadId;
    }
    if (message.conversationId !== "") {
      obj.conversationId = message.conversationId;
    }
    if (message.chatGroupId !== "") {
      obj.chatGroupId = message.chatGroupId;
    }
    if (message.senderId !== "") {
      obj.senderId = message.senderId;
    }
    if (message.recipientIds?.length) {
      obj.recipientIds = message.recipientIds;
    }
    if (message.content !== "") {
      obj.content = message.content;
    }
    if (message.type !== 0) {
      obj.type = messageTypeToJSON(message.type);
    }
    if (message.attachments?.length) {
      obj.attachments = message.attachments.map((e) => Attachment.toJSON(e));
    }
    if (message.reactions?.length) {
      obj.reactions = message.reactions.map((e) => Reaction.toJSON(e));
    }
    if (message.status !== 0) {
      obj.status = messageStatusToJSON(message.status);
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = message.updatedAt.toISOString();
    }
    if (message.edited !== false) {
      obj.edited = message.edited;
    }
    if (message.deleted !== false) {
      obj.deleted = message.deleted;
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    if (message.campaignId !== "0") {
      obj.campaignId = message.campaignId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Message>, I>>(base?: I): Message {
    return Message.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Message>, I>>(object: I): Message {
    const message = createBaseMessage();
    message.id = object.id ?? "";
    message.threadId = object.threadId ?? "";
    message.conversationId = object.conversationId ?? "";
    message.chatGroupId = object.chatGroupId ?? "";
    message.senderId = object.senderId ?? "";
    message.recipientIds = object.recipientIds?.map((e) => e) || [];
    message.content = object.content ?? "";
    message.type = object.type ?? 0;
    message.attachments = object.attachments?.map((e) => Attachment.fromPartial(e)) || [];
    message.reactions = object.reactions?.map((e) => Reaction.fromPartial(e)) || [];
    message.status = object.status ?? 0;
    message.createdAt = object.createdAt ?? undefined;
    message.updatedAt = object.updatedAt ?? undefined;
    message.edited = object.edited ?? false;
    message.deleted = object.deleted ?? false;
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    message.campaignId = object.campaignId ?? "0";
    return message;
  },
};

function createBaseThread(): Thread {
  return {
    id: "",
    participantIds: [],
    subject: "",
    messageIds: [],
    metadata: undefined,
    createdAt: undefined,
    updatedAt: undefined,
  };
}

export const Thread: MessageFns<Thread> = {
  encode(message: Thread, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    for (const v of message.participantIds) {
      writer.uint32(18).string(v!);
    }
    if (message.subject !== "") {
      writer.uint32(26).string(message.subject);
    }
    for (const v of message.messageIds) {
      writer.uint32(34).string(v!);
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(42).fork()).join();
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(50).fork()).join();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.updatedAt), writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Thread {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseThread();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.participantIds.push(reader.string());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.subject = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.messageIds.push(reader.string());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.updatedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Thread {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      participantIds: globalThis.Array.isArray(object?.participantIds)
        ? object.participantIds.map((e: any) => globalThis.String(e))
        : [],
      subject: isSet(object.subject) ? globalThis.String(object.subject) : "",
      messageIds: globalThis.Array.isArray(object?.messageIds)
        ? object.messageIds.map((e: any) => globalThis.String(e))
        : [],
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
    };
  },

  toJSON(message: Thread): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.participantIds?.length) {
      obj.participantIds = message.participantIds;
    }
    if (message.subject !== "") {
      obj.subject = message.subject;
    }
    if (message.messageIds?.length) {
      obj.messageIds = message.messageIds;
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = message.updatedAt.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Thread>, I>>(base?: I): Thread {
    return Thread.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Thread>, I>>(object: I): Thread {
    const message = createBaseThread();
    message.id = object.id ?? "";
    message.participantIds = object.participantIds?.map((e) => e) || [];
    message.subject = object.subject ?? "";
    message.messageIds = object.messageIds?.map((e) => e) || [];
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    message.createdAt = object.createdAt ?? undefined;
    message.updatedAt = object.updatedAt ?? undefined;
    return message;
  },
};

function createBaseConversation(): Conversation {
  return {
    id: "",
    participantIds: [],
    chatGroupId: "",
    threadIds: [],
    metadata: undefined,
    createdAt: undefined,
    updatedAt: undefined,
  };
}

export const Conversation: MessageFns<Conversation> = {
  encode(message: Conversation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    for (const v of message.participantIds) {
      writer.uint32(18).string(v!);
    }
    if (message.chatGroupId !== "") {
      writer.uint32(26).string(message.chatGroupId);
    }
    for (const v of message.threadIds) {
      writer.uint32(34).string(v!);
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(42).fork()).join();
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(50).fork()).join();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.updatedAt), writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Conversation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConversation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.participantIds.push(reader.string());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.chatGroupId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.threadIds.push(reader.string());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.updatedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Conversation {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      participantIds: globalThis.Array.isArray(object?.participantIds)
        ? object.participantIds.map((e: any) => globalThis.String(e))
        : [],
      chatGroupId: isSet(object.chatGroupId) ? globalThis.String(object.chatGroupId) : "",
      threadIds: globalThis.Array.isArray(object?.threadIds)
        ? object.threadIds.map((e: any) => globalThis.String(e))
        : [],
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
    };
  },

  toJSON(message: Conversation): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.participantIds?.length) {
      obj.participantIds = message.participantIds;
    }
    if (message.chatGroupId !== "") {
      obj.chatGroupId = message.chatGroupId;
    }
    if (message.threadIds?.length) {
      obj.threadIds = message.threadIds;
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = message.updatedAt.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Conversation>, I>>(base?: I): Conversation {
    return Conversation.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Conversation>, I>>(object: I): Conversation {
    const message = createBaseConversation();
    message.id = object.id ?? "";
    message.participantIds = object.participantIds?.map((e) => e) || [];
    message.chatGroupId = object.chatGroupId ?? "";
    message.threadIds = object.threadIds?.map((e) => e) || [];
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    message.createdAt = object.createdAt ?? undefined;
    message.updatedAt = object.updatedAt ?? undefined;
    return message;
  },
};

function createBaseChatGroup(): ChatGroup {
  return {
    id: "",
    name: "",
    description: "",
    memberIds: [],
    roles: {},
    metadata: undefined,
    createdAt: undefined,
    updatedAt: undefined,
  };
}

export const ChatGroup: MessageFns<ChatGroup> = {
  encode(message: ChatGroup, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    for (const v of message.memberIds) {
      writer.uint32(34).string(v!);
    }
    Object.entries(message.roles).forEach(([key, value]) => {
      ChatGroup_RolesEntry.encode({ key: key as any, value }, writer.uint32(42).fork()).join();
    });
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(50).fork()).join();
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(58).fork()).join();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.updatedAt), writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChatGroup {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChatGroup();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.memberIds.push(reader.string());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          const entry5 = ChatGroup_RolesEntry.decode(reader, reader.uint32());
          if (entry5.value !== undefined) {
            message.roles[entry5.key] = entry5.value;
          }
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.updatedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChatGroup {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      memberIds: globalThis.Array.isArray(object?.memberIds)
        ? object.memberIds.map((e: any) => globalThis.String(e))
        : [],
      roles: isObject(object.roles)
        ? Object.entries(object.roles).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
    };
  },

  toJSON(message: ChatGroup): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.memberIds?.length) {
      obj.memberIds = message.memberIds;
    }
    if (message.roles) {
      const entries = Object.entries(message.roles);
      if (entries.length > 0) {
        obj.roles = {};
        entries.forEach(([k, v]) => {
          obj.roles[k] = v;
        });
      }
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = message.updatedAt.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ChatGroup>, I>>(base?: I): ChatGroup {
    return ChatGroup.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ChatGroup>, I>>(object: I): ChatGroup {
    const message = createBaseChatGroup();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.memberIds = object.memberIds?.map((e) => e) || [];
    message.roles = Object.entries(object.roles ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    message.createdAt = object.createdAt ?? undefined;
    message.updatedAt = object.updatedAt ?? undefined;
    return message;
  },
};

function createBaseChatGroup_RolesEntry(): ChatGroup_RolesEntry {
  return { key: "", value: "" };
}

export const ChatGroup_RolesEntry: MessageFns<ChatGroup_RolesEntry> = {
  encode(message: ChatGroup_RolesEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChatGroup_RolesEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChatGroup_RolesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChatGroup_RolesEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: ChatGroup_RolesEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ChatGroup_RolesEntry>, I>>(base?: I): ChatGroup_RolesEntry {
    return ChatGroup_RolesEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ChatGroup_RolesEntry>, I>>(object: I): ChatGroup_RolesEntry {
    const message = createBaseChatGroup_RolesEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseReaction(): Reaction {
  return { userId: "", emoji: "", reactedAt: undefined, metadata: undefined };
}

export const Reaction: MessageFns<Reaction> = {
  encode(message: Reaction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.emoji !== "") {
      writer.uint32(18).string(message.emoji);
    }
    if (message.reactedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.reactedAt), writer.uint32(26).fork()).join();
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Reaction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReaction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.emoji = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.reactedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Reaction {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      emoji: isSet(object.emoji) ? globalThis.String(object.emoji) : "",
      reactedAt: isSet(object.reactedAt) ? fromJsonTimestamp(object.reactedAt) : undefined,
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
    };
  },

  toJSON(message: Reaction): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.emoji !== "") {
      obj.emoji = message.emoji;
    }
    if (message.reactedAt !== undefined) {
      obj.reactedAt = message.reactedAt.toISOString();
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Reaction>, I>>(base?: I): Reaction {
    return Reaction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Reaction>, I>>(object: I): Reaction {
    const message = createBaseReaction();
    message.userId = object.userId ?? "";
    message.emoji = object.emoji ?? "";
    message.reactedAt = object.reactedAt ?? undefined;
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    return message;
  },
};

function createBaseAttachment(): Attachment {
  return { id: "", url: "", type: "", filename: "", size: "0", metadata: undefined };
}

export const Attachment: MessageFns<Attachment> = {
  encode(message: Attachment, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.url !== "") {
      writer.uint32(18).string(message.url);
    }
    if (message.type !== "") {
      writer.uint32(26).string(message.type);
    }
    if (message.filename !== "") {
      writer.uint32(34).string(message.filename);
    }
    if (message.size !== "0") {
      writer.uint32(40).int64(message.size);
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Attachment {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAttachment();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.url = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.filename = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.size = reader.int64().toString();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Attachment {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      url: isSet(object.url) ? globalThis.String(object.url) : "",
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      filename: isSet(object.filename) ? globalThis.String(object.filename) : "",
      size: isSet(object.size) ? globalThis.String(object.size) : "0",
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
    };
  },

  toJSON(message: Attachment): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.url !== "") {
      obj.url = message.url;
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.filename !== "") {
      obj.filename = message.filename;
    }
    if (message.size !== "0") {
      obj.size = message.size;
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Attachment>, I>>(base?: I): Attachment {
    return Attachment.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Attachment>, I>>(object: I): Attachment {
    const message = createBaseAttachment();
    message.id = object.id ?? "";
    message.url = object.url ?? "";
    message.type = object.type ?? "";
    message.filename = object.filename ?? "";
    message.size = object.size ?? "0";
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    return message;
  },
};

function createBaseSendMessageRequest(): SendMessageRequest {
  return {
    threadId: "",
    conversationId: "",
    chatGroupId: "",
    senderId: "",
    recipientIds: [],
    content: "",
    type: 0,
    attachments: [],
    metadata: undefined,
    productId: "",
    campaignId: "",
    talentId: "",
  };
}

export const SendMessageRequest: MessageFns<SendMessageRequest> = {
  encode(message: SendMessageRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.threadId !== "") {
      writer.uint32(10).string(message.threadId);
    }
    if (message.conversationId !== "") {
      writer.uint32(18).string(message.conversationId);
    }
    if (message.chatGroupId !== "") {
      writer.uint32(26).string(message.chatGroupId);
    }
    if (message.senderId !== "") {
      writer.uint32(34).string(message.senderId);
    }
    for (const v of message.recipientIds) {
      writer.uint32(42).string(v!);
    }
    if (message.content !== "") {
      writer.uint32(50).string(message.content);
    }
    if (message.type !== 0) {
      writer.uint32(56).int32(message.type);
    }
    for (const v of message.attachments) {
      Attachment.encode(v!, writer.uint32(66).fork()).join();
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(74).fork()).join();
    }
    if (message.productId !== "") {
      writer.uint32(82).string(message.productId);
    }
    if (message.campaignId !== "") {
      writer.uint32(90).string(message.campaignId);
    }
    if (message.talentId !== "") {
      writer.uint32(98).string(message.talentId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SendMessageRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSendMessageRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.threadId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.conversationId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.chatGroupId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.senderId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.recipientIds.push(reader.string());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.content = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.attachments.push(Attachment.decode(reader, reader.uint32()));
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.productId = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.campaignId = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.talentId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SendMessageRequest {
    return {
      threadId: isSet(object.threadId) ? globalThis.String(object.threadId) : "",
      conversationId: isSet(object.conversationId) ? globalThis.String(object.conversationId) : "",
      chatGroupId: isSet(object.chatGroupId) ? globalThis.String(object.chatGroupId) : "",
      senderId: isSet(object.senderId) ? globalThis.String(object.senderId) : "",
      recipientIds: globalThis.Array.isArray(object?.recipientIds)
        ? object.recipientIds.map((e: any) => globalThis.String(e))
        : [],
      content: isSet(object.content) ? globalThis.String(object.content) : "",
      type: isSet(object.type) ? messageTypeFromJSON(object.type) : 0,
      attachments: globalThis.Array.isArray(object?.attachments)
        ? object.attachments.map((e: any) => Attachment.fromJSON(e))
        : [],
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
      productId: isSet(object.productId) ? globalThis.String(object.productId) : "",
      campaignId: isSet(object.campaignId) ? globalThis.String(object.campaignId) : "",
      talentId: isSet(object.talentId) ? globalThis.String(object.talentId) : "",
    };
  },

  toJSON(message: SendMessageRequest): unknown {
    const obj: any = {};
    if (message.threadId !== "") {
      obj.threadId = message.threadId;
    }
    if (message.conversationId !== "") {
      obj.conversationId = message.conversationId;
    }
    if (message.chatGroupId !== "") {
      obj.chatGroupId = message.chatGroupId;
    }
    if (message.senderId !== "") {
      obj.senderId = message.senderId;
    }
    if (message.recipientIds?.length) {
      obj.recipientIds = message.recipientIds;
    }
    if (message.content !== "") {
      obj.content = message.content;
    }
    if (message.type !== 0) {
      obj.type = messageTypeToJSON(message.type);
    }
    if (message.attachments?.length) {
      obj.attachments = message.attachments.map((e) => Attachment.toJSON(e));
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    if (message.productId !== "") {
      obj.productId = message.productId;
    }
    if (message.campaignId !== "") {
      obj.campaignId = message.campaignId;
    }
    if (message.talentId !== "") {
      obj.talentId = message.talentId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SendMessageRequest>, I>>(base?: I): SendMessageRequest {
    return SendMessageRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SendMessageRequest>, I>>(object: I): SendMessageRequest {
    const message = createBaseSendMessageRequest();
    message.threadId = object.threadId ?? "";
    message.conversationId = object.conversationId ?? "";
    message.chatGroupId = object.chatGroupId ?? "";
    message.senderId = object.senderId ?? "";
    message.recipientIds = object.recipientIds?.map((e) => e) || [];
    message.content = object.content ?? "";
    message.type = object.type ?? 0;
    message.attachments = object.attachments?.map((e) => Attachment.fromPartial(e)) || [];
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    message.productId = object.productId ?? "";
    message.campaignId = object.campaignId ?? "";
    message.talentId = object.talentId ?? "";
    return message;
  },
};

function createBaseSendMessageResponse(): SendMessageResponse {
  return { message: undefined };
}

export const SendMessageResponse: MessageFns<SendMessageResponse> = {
  encode(message: SendMessageResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== undefined) {
      Message.encode(message.message, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SendMessageResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSendMessageResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.message = Message.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SendMessageResponse {
    return { message: isSet(object.message) ? Message.fromJSON(object.message) : undefined };
  },

  toJSON(message: SendMessageResponse): unknown {
    const obj: any = {};
    if (message.message !== undefined) {
      obj.message = Message.toJSON(message.message);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SendMessageResponse>, I>>(base?: I): SendMessageResponse {
    return SendMessageResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SendMessageResponse>, I>>(object: I): SendMessageResponse {
    const message = createBaseSendMessageResponse();
    message.message = (object.message !== undefined && object.message !== null)
      ? Message.fromPartial(object.message)
      : undefined;
    return message;
  },
};

function createBaseSendGroupMessageRequest(): SendGroupMessageRequest {
  return {
    chatGroupId: "",
    senderId: "",
    content: "",
    type: 0,
    attachments: [],
    metadata: undefined,
    productId: "",
    campaignId: "",
    talentId: "",
  };
}

export const SendGroupMessageRequest: MessageFns<SendGroupMessageRequest> = {
  encode(message: SendGroupMessageRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.chatGroupId !== "") {
      writer.uint32(10).string(message.chatGroupId);
    }
    if (message.senderId !== "") {
      writer.uint32(18).string(message.senderId);
    }
    if (message.content !== "") {
      writer.uint32(26).string(message.content);
    }
    if (message.type !== 0) {
      writer.uint32(32).int32(message.type);
    }
    for (const v of message.attachments) {
      Attachment.encode(v!, writer.uint32(42).fork()).join();
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(50).fork()).join();
    }
    if (message.productId !== "") {
      writer.uint32(58).string(message.productId);
    }
    if (message.campaignId !== "") {
      writer.uint32(66).string(message.campaignId);
    }
    if (message.talentId !== "") {
      writer.uint32(74).string(message.talentId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SendGroupMessageRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSendGroupMessageRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.chatGroupId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.senderId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.content = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.attachments.push(Attachment.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.productId = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.campaignId = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.talentId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SendGroupMessageRequest {
    return {
      chatGroupId: isSet(object.chatGroupId) ? globalThis.String(object.chatGroupId) : "",
      senderId: isSet(object.senderId) ? globalThis.String(object.senderId) : "",
      content: isSet(object.content) ? globalThis.String(object.content) : "",
      type: isSet(object.type) ? messageTypeFromJSON(object.type) : 0,
      attachments: globalThis.Array.isArray(object?.attachments)
        ? object.attachments.map((e: any) => Attachment.fromJSON(e))
        : [],
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
      productId: isSet(object.productId) ? globalThis.String(object.productId) : "",
      campaignId: isSet(object.campaignId) ? globalThis.String(object.campaignId) : "",
      talentId: isSet(object.talentId) ? globalThis.String(object.talentId) : "",
    };
  },

  toJSON(message: SendGroupMessageRequest): unknown {
    const obj: any = {};
    if (message.chatGroupId !== "") {
      obj.chatGroupId = message.chatGroupId;
    }
    if (message.senderId !== "") {
      obj.senderId = message.senderId;
    }
    if (message.content !== "") {
      obj.content = message.content;
    }
    if (message.type !== 0) {
      obj.type = messageTypeToJSON(message.type);
    }
    if (message.attachments?.length) {
      obj.attachments = message.attachments.map((e) => Attachment.toJSON(e));
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    if (message.productId !== "") {
      obj.productId = message.productId;
    }
    if (message.campaignId !== "") {
      obj.campaignId = message.campaignId;
    }
    if (message.talentId !== "") {
      obj.talentId = message.talentId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SendGroupMessageRequest>, I>>(base?: I): SendGroupMessageRequest {
    return SendGroupMessageRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SendGroupMessageRequest>, I>>(object: I): SendGroupMessageRequest {
    const message = createBaseSendGroupMessageRequest();
    message.chatGroupId = object.chatGroupId ?? "";
    message.senderId = object.senderId ?? "";
    message.content = object.content ?? "";
    message.type = object.type ?? 0;
    message.attachments = object.attachments?.map((e) => Attachment.fromPartial(e)) || [];
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    message.productId = object.productId ?? "";
    message.campaignId = object.campaignId ?? "";
    message.talentId = object.talentId ?? "";
    return message;
  },
};

function createBaseSendGroupMessageResponse(): SendGroupMessageResponse {
  return { message: undefined };
}

export const SendGroupMessageResponse: MessageFns<SendGroupMessageResponse> = {
  encode(message: SendGroupMessageResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== undefined) {
      Message.encode(message.message, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SendGroupMessageResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSendGroupMessageResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.message = Message.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SendGroupMessageResponse {
    return { message: isSet(object.message) ? Message.fromJSON(object.message) : undefined };
  },

  toJSON(message: SendGroupMessageResponse): unknown {
    const obj: any = {};
    if (message.message !== undefined) {
      obj.message = Message.toJSON(message.message);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SendGroupMessageResponse>, I>>(base?: I): SendGroupMessageResponse {
    return SendGroupMessageResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SendGroupMessageResponse>, I>>(object: I): SendGroupMessageResponse {
    const message = createBaseSendGroupMessageResponse();
    message.message = (object.message !== undefined && object.message !== null)
      ? Message.fromPartial(object.message)
      : undefined;
    return message;
  },
};

function createBaseEditMessageRequest(): EditMessageRequest {
  return {
    messageId: "",
    editorId: "",
    newContent: "",
    newAttachments: [],
    metadata: undefined,
    productId: "",
    campaignId: "",
    talentId: "",
  };
}

export const EditMessageRequest: MessageFns<EditMessageRequest> = {
  encode(message: EditMessageRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.messageId !== "") {
      writer.uint32(10).string(message.messageId);
    }
    if (message.editorId !== "") {
      writer.uint32(18).string(message.editorId);
    }
    if (message.newContent !== "") {
      writer.uint32(26).string(message.newContent);
    }
    for (const v of message.newAttachments) {
      Attachment.encode(v!, writer.uint32(34).fork()).join();
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(42).fork()).join();
    }
    if (message.productId !== "") {
      writer.uint32(50).string(message.productId);
    }
    if (message.campaignId !== "") {
      writer.uint32(58).string(message.campaignId);
    }
    if (message.talentId !== "") {
      writer.uint32(66).string(message.talentId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EditMessageRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEditMessageRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.messageId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.editorId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.newContent = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.newAttachments.push(Attachment.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.productId = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.campaignId = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.talentId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EditMessageRequest {
    return {
      messageId: isSet(object.messageId) ? globalThis.String(object.messageId) : "",
      editorId: isSet(object.editorId) ? globalThis.String(object.editorId) : "",
      newContent: isSet(object.newContent) ? globalThis.String(object.newContent) : "",
      newAttachments: globalThis.Array.isArray(object?.newAttachments)
        ? object.newAttachments.map((e: any) => Attachment.fromJSON(e))
        : [],
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
      productId: isSet(object.productId) ? globalThis.String(object.productId) : "",
      campaignId: isSet(object.campaignId) ? globalThis.String(object.campaignId) : "",
      talentId: isSet(object.talentId) ? globalThis.String(object.talentId) : "",
    };
  },

  toJSON(message: EditMessageRequest): unknown {
    const obj: any = {};
    if (message.messageId !== "") {
      obj.messageId = message.messageId;
    }
    if (message.editorId !== "") {
      obj.editorId = message.editorId;
    }
    if (message.newContent !== "") {
      obj.newContent = message.newContent;
    }
    if (message.newAttachments?.length) {
      obj.newAttachments = message.newAttachments.map((e) => Attachment.toJSON(e));
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    if (message.productId !== "") {
      obj.productId = message.productId;
    }
    if (message.campaignId !== "") {
      obj.campaignId = message.campaignId;
    }
    if (message.talentId !== "") {
      obj.talentId = message.talentId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EditMessageRequest>, I>>(base?: I): EditMessageRequest {
    return EditMessageRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EditMessageRequest>, I>>(object: I): EditMessageRequest {
    const message = createBaseEditMessageRequest();
    message.messageId = object.messageId ?? "";
    message.editorId = object.editorId ?? "";
    message.newContent = object.newContent ?? "";
    message.newAttachments = object.newAttachments?.map((e) => Attachment.fromPartial(e)) || [];
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    message.productId = object.productId ?? "";
    message.campaignId = object.campaignId ?? "";
    message.talentId = object.talentId ?? "";
    return message;
  },
};

function createBaseEditMessageResponse(): EditMessageResponse {
  return { message: undefined };
}

export const EditMessageResponse: MessageFns<EditMessageResponse> = {
  encode(message: EditMessageResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== undefined) {
      Message.encode(message.message, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EditMessageResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEditMessageResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.message = Message.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EditMessageResponse {
    return { message: isSet(object.message) ? Message.fromJSON(object.message) : undefined };
  },

  toJSON(message: EditMessageResponse): unknown {
    const obj: any = {};
    if (message.message !== undefined) {
      obj.message = Message.toJSON(message.message);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EditMessageResponse>, I>>(base?: I): EditMessageResponse {
    return EditMessageResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EditMessageResponse>, I>>(object: I): EditMessageResponse {
    const message = createBaseEditMessageResponse();
    message.message = (object.message !== undefined && object.message !== null)
      ? Message.fromPartial(object.message)
      : undefined;
    return message;
  },
};

function createBaseDeleteMessageRequest(): DeleteMessageRequest {
  return { messageId: "", requesterId: "", metadata: undefined, productId: "", campaignId: "", talentId: "" };
}

export const DeleteMessageRequest: MessageFns<DeleteMessageRequest> = {
  encode(message: DeleteMessageRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.messageId !== "") {
      writer.uint32(10).string(message.messageId);
    }
    if (message.requesterId !== "") {
      writer.uint32(18).string(message.requesterId);
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(26).fork()).join();
    }
    if (message.productId !== "") {
      writer.uint32(34).string(message.productId);
    }
    if (message.campaignId !== "") {
      writer.uint32(42).string(message.campaignId);
    }
    if (message.talentId !== "") {
      writer.uint32(50).string(message.talentId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteMessageRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteMessageRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.messageId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.requesterId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.productId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.campaignId = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.talentId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteMessageRequest {
    return {
      messageId: isSet(object.messageId) ? globalThis.String(object.messageId) : "",
      requesterId: isSet(object.requesterId) ? globalThis.String(object.requesterId) : "",
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
      productId: isSet(object.productId) ? globalThis.String(object.productId) : "",
      campaignId: isSet(object.campaignId) ? globalThis.String(object.campaignId) : "",
      talentId: isSet(object.talentId) ? globalThis.String(object.talentId) : "",
    };
  },

  toJSON(message: DeleteMessageRequest): unknown {
    const obj: any = {};
    if (message.messageId !== "") {
      obj.messageId = message.messageId;
    }
    if (message.requesterId !== "") {
      obj.requesterId = message.requesterId;
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    if (message.productId !== "") {
      obj.productId = message.productId;
    }
    if (message.campaignId !== "") {
      obj.campaignId = message.campaignId;
    }
    if (message.talentId !== "") {
      obj.talentId = message.talentId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteMessageRequest>, I>>(base?: I): DeleteMessageRequest {
    return DeleteMessageRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteMessageRequest>, I>>(object: I): DeleteMessageRequest {
    const message = createBaseDeleteMessageRequest();
    message.messageId = object.messageId ?? "";
    message.requesterId = object.requesterId ?? "";
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    message.productId = object.productId ?? "";
    message.campaignId = object.campaignId ?? "";
    message.talentId = object.talentId ?? "";
    return message;
  },
};

function createBaseDeleteMessageResponse(): DeleteMessageResponse {
  return { success: false };
}

export const DeleteMessageResponse: MessageFns<DeleteMessageResponse> = {
  encode(message: DeleteMessageResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteMessageResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteMessageResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteMessageResponse {
    return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
  },

  toJSON(message: DeleteMessageResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteMessageResponse>, I>>(base?: I): DeleteMessageResponse {
    return DeleteMessageResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteMessageResponse>, I>>(object: I): DeleteMessageResponse {
    const message = createBaseDeleteMessageResponse();
    message.success = object.success ?? false;
    return message;
  },
};

function createBaseReactToMessageRequest(): ReactToMessageRequest {
  return { messageId: "", userId: "", emoji: "", metadata: undefined, productId: "", campaignId: "", talentId: "" };
}

export const ReactToMessageRequest: MessageFns<ReactToMessageRequest> = {
  encode(message: ReactToMessageRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.messageId !== "") {
      writer.uint32(10).string(message.messageId);
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    if (message.emoji !== "") {
      writer.uint32(26).string(message.emoji);
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(34).fork()).join();
    }
    if (message.productId !== "") {
      writer.uint32(42).string(message.productId);
    }
    if (message.campaignId !== "") {
      writer.uint32(50).string(message.campaignId);
    }
    if (message.talentId !== "") {
      writer.uint32(58).string(message.talentId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReactToMessageRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReactToMessageRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.messageId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.emoji = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.productId = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.campaignId = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.talentId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReactToMessageRequest {
    return {
      messageId: isSet(object.messageId) ? globalThis.String(object.messageId) : "",
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      emoji: isSet(object.emoji) ? globalThis.String(object.emoji) : "",
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
      productId: isSet(object.productId) ? globalThis.String(object.productId) : "",
      campaignId: isSet(object.campaignId) ? globalThis.String(object.campaignId) : "",
      talentId: isSet(object.talentId) ? globalThis.String(object.talentId) : "",
    };
  },

  toJSON(message: ReactToMessageRequest): unknown {
    const obj: any = {};
    if (message.messageId !== "") {
      obj.messageId = message.messageId;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.emoji !== "") {
      obj.emoji = message.emoji;
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    if (message.productId !== "") {
      obj.productId = message.productId;
    }
    if (message.campaignId !== "") {
      obj.campaignId = message.campaignId;
    }
    if (message.talentId !== "") {
      obj.talentId = message.talentId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReactToMessageRequest>, I>>(base?: I): ReactToMessageRequest {
    return ReactToMessageRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReactToMessageRequest>, I>>(object: I): ReactToMessageRequest {
    const message = createBaseReactToMessageRequest();
    message.messageId = object.messageId ?? "";
    message.userId = object.userId ?? "";
    message.emoji = object.emoji ?? "";
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    message.productId = object.productId ?? "";
    message.campaignId = object.campaignId ?? "";
    message.talentId = object.talentId ?? "";
    return message;
  },
};

function createBaseReactToMessageResponse(): ReactToMessageResponse {
  return { message: undefined };
}

export const ReactToMessageResponse: MessageFns<ReactToMessageResponse> = {
  encode(message: ReactToMessageResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== undefined) {
      Message.encode(message.message, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReactToMessageResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReactToMessageResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.message = Message.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReactToMessageResponse {
    return { message: isSet(object.message) ? Message.fromJSON(object.message) : undefined };
  },

  toJSON(message: ReactToMessageResponse): unknown {
    const obj: any = {};
    if (message.message !== undefined) {
      obj.message = Message.toJSON(message.message);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReactToMessageResponse>, I>>(base?: I): ReactToMessageResponse {
    return ReactToMessageResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReactToMessageResponse>, I>>(object: I): ReactToMessageResponse {
    const message = createBaseReactToMessageResponse();
    message.message = (object.message !== undefined && object.message !== null)
      ? Message.fromPartial(object.message)
      : undefined;
    return message;
  },
};

function createBaseGetMessageRequest(): GetMessageRequest {
  return { messageId: "" };
}

export const GetMessageRequest: MessageFns<GetMessageRequest> = {
  encode(message: GetMessageRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.messageId !== "") {
      writer.uint32(10).string(message.messageId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetMessageRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetMessageRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.messageId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetMessageRequest {
    return { messageId: isSet(object.messageId) ? globalThis.String(object.messageId) : "" };
  },

  toJSON(message: GetMessageRequest): unknown {
    const obj: any = {};
    if (message.messageId !== "") {
      obj.messageId = message.messageId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetMessageRequest>, I>>(base?: I): GetMessageRequest {
    return GetMessageRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetMessageRequest>, I>>(object: I): GetMessageRequest {
    const message = createBaseGetMessageRequest();
    message.messageId = object.messageId ?? "";
    return message;
  },
};

function createBaseGetMessageResponse(): GetMessageResponse {
  return { message: undefined };
}

export const GetMessageResponse: MessageFns<GetMessageResponse> = {
  encode(message: GetMessageResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== undefined) {
      Message.encode(message.message, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetMessageResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetMessageResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.message = Message.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetMessageResponse {
    return { message: isSet(object.message) ? Message.fromJSON(object.message) : undefined };
  },

  toJSON(message: GetMessageResponse): unknown {
    const obj: any = {};
    if (message.message !== undefined) {
      obj.message = Message.toJSON(message.message);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetMessageResponse>, I>>(base?: I): GetMessageResponse {
    return GetMessageResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetMessageResponse>, I>>(object: I): GetMessageResponse {
    const message = createBaseGetMessageResponse();
    message.message = (object.message !== undefined && object.message !== null)
      ? Message.fromPartial(object.message)
      : undefined;
    return message;
  },
};

function createBaseListMessagesRequest(): ListMessagesRequest {
  return {
    threadId: "",
    conversationId: "",
    chatGroupId: "",
    page: 0,
    pageSize: 0,
    filters: undefined,
    metadata: undefined,
    productId: "",
    campaignId: "",
    talentId: "",
  };
}

export const ListMessagesRequest: MessageFns<ListMessagesRequest> = {
  encode(message: ListMessagesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.threadId !== "") {
      writer.uint32(10).string(message.threadId);
    }
    if (message.conversationId !== "") {
      writer.uint32(18).string(message.conversationId);
    }
    if (message.chatGroupId !== "") {
      writer.uint32(26).string(message.chatGroupId);
    }
    if (message.page !== 0) {
      writer.uint32(32).int32(message.page);
    }
    if (message.pageSize !== 0) {
      writer.uint32(40).int32(message.pageSize);
    }
    if (message.filters !== undefined) {
      Metadata.encode(message.filters, writer.uint32(50).fork()).join();
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(58).fork()).join();
    }
    if (message.productId !== "") {
      writer.uint32(66).string(message.productId);
    }
    if (message.campaignId !== "") {
      writer.uint32(74).string(message.campaignId);
    }
    if (message.talentId !== "") {
      writer.uint32(82).string(message.talentId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListMessagesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListMessagesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.threadId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.conversationId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.chatGroupId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.page = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.filters = Metadata.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.productId = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.campaignId = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.talentId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListMessagesRequest {
    return {
      threadId: isSet(object.threadId) ? globalThis.String(object.threadId) : "",
      conversationId: isSet(object.conversationId) ? globalThis.String(object.conversationId) : "",
      chatGroupId: isSet(object.chatGroupId) ? globalThis.String(object.chatGroupId) : "",
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      filters: isSet(object.filters) ? Metadata.fromJSON(object.filters) : undefined,
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
      productId: isSet(object.productId) ? globalThis.String(object.productId) : "",
      campaignId: isSet(object.campaignId) ? globalThis.String(object.campaignId) : "",
      talentId: isSet(object.talentId) ? globalThis.String(object.talentId) : "",
    };
  },

  toJSON(message: ListMessagesRequest): unknown {
    const obj: any = {};
    if (message.threadId !== "") {
      obj.threadId = message.threadId;
    }
    if (message.conversationId !== "") {
      obj.conversationId = message.conversationId;
    }
    if (message.chatGroupId !== "") {
      obj.chatGroupId = message.chatGroupId;
    }
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.filters !== undefined) {
      obj.filters = Metadata.toJSON(message.filters);
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    if (message.productId !== "") {
      obj.productId = message.productId;
    }
    if (message.campaignId !== "") {
      obj.campaignId = message.campaignId;
    }
    if (message.talentId !== "") {
      obj.talentId = message.talentId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListMessagesRequest>, I>>(base?: I): ListMessagesRequest {
    return ListMessagesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListMessagesRequest>, I>>(object: I): ListMessagesRequest {
    const message = createBaseListMessagesRequest();
    message.threadId = object.threadId ?? "";
    message.conversationId = object.conversationId ?? "";
    message.chatGroupId = object.chatGroupId ?? "";
    message.page = object.page ?? 0;
    message.pageSize = object.pageSize ?? 0;
    message.filters = (object.filters !== undefined && object.filters !== null)
      ? Metadata.fromPartial(object.filters)
      : undefined;
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    message.productId = object.productId ?? "";
    message.campaignId = object.campaignId ?? "";
    message.talentId = object.talentId ?? "";
    return message;
  },
};

function createBaseListMessagesResponse(): ListMessagesResponse {
  return { messages: [], totalCount: 0, page: 0, totalPages: 0 };
}

export const ListMessagesResponse: MessageFns<ListMessagesResponse> = {
  encode(message: ListMessagesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.messages) {
      Message.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.totalCount !== 0) {
      writer.uint32(16).int32(message.totalCount);
    }
    if (message.page !== 0) {
      writer.uint32(24).int32(message.page);
    }
    if (message.totalPages !== 0) {
      writer.uint32(32).int32(message.totalPages);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListMessagesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListMessagesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.messages.push(Message.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.totalCount = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.page = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.totalPages = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListMessagesResponse {
    return {
      messages: globalThis.Array.isArray(object?.messages) ? object.messages.map((e: any) => Message.fromJSON(e)) : [],
      totalCount: isSet(object.totalCount) ? globalThis.Number(object.totalCount) : 0,
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      totalPages: isSet(object.totalPages) ? globalThis.Number(object.totalPages) : 0,
    };
  },

  toJSON(message: ListMessagesResponse): unknown {
    const obj: any = {};
    if (message.messages?.length) {
      obj.messages = message.messages.map((e) => Message.toJSON(e));
    }
    if (message.totalCount !== 0) {
      obj.totalCount = Math.round(message.totalCount);
    }
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.totalPages !== 0) {
      obj.totalPages = Math.round(message.totalPages);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListMessagesResponse>, I>>(base?: I): ListMessagesResponse {
    return ListMessagesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListMessagesResponse>, I>>(object: I): ListMessagesResponse {
    const message = createBaseListMessagesResponse();
    message.messages = object.messages?.map((e) => Message.fromPartial(e)) || [];
    message.totalCount = object.totalCount ?? 0;
    message.page = object.page ?? 0;
    message.totalPages = object.totalPages ?? 0;
    return message;
  },
};

function createBaseListThreadsRequest(): ListThreadsRequest {
  return {
    userId: "",
    page: 0,
    pageSize: 0,
    filters: undefined,
    metadata: undefined,
    productId: "",
    campaignId: "",
    talentId: "",
  };
}

export const ListThreadsRequest: MessageFns<ListThreadsRequest> = {
  encode(message: ListThreadsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.page !== 0) {
      writer.uint32(16).int32(message.page);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.filters !== undefined) {
      Metadata.encode(message.filters, writer.uint32(34).fork()).join();
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(42).fork()).join();
    }
    if (message.productId !== "") {
      writer.uint32(50).string(message.productId);
    }
    if (message.campaignId !== "") {
      writer.uint32(58).string(message.campaignId);
    }
    if (message.talentId !== "") {
      writer.uint32(66).string(message.talentId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListThreadsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListThreadsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.page = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.filters = Metadata.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.productId = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.campaignId = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.talentId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListThreadsRequest {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      filters: isSet(object.filters) ? Metadata.fromJSON(object.filters) : undefined,
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
      productId: isSet(object.productId) ? globalThis.String(object.productId) : "",
      campaignId: isSet(object.campaignId) ? globalThis.String(object.campaignId) : "",
      talentId: isSet(object.talentId) ? globalThis.String(object.talentId) : "",
    };
  },

  toJSON(message: ListThreadsRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.filters !== undefined) {
      obj.filters = Metadata.toJSON(message.filters);
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    if (message.productId !== "") {
      obj.productId = message.productId;
    }
    if (message.campaignId !== "") {
      obj.campaignId = message.campaignId;
    }
    if (message.talentId !== "") {
      obj.talentId = message.talentId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListThreadsRequest>, I>>(base?: I): ListThreadsRequest {
    return ListThreadsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListThreadsRequest>, I>>(object: I): ListThreadsRequest {
    const message = createBaseListThreadsRequest();
    message.userId = object.userId ?? "";
    message.page = object.page ?? 0;
    message.pageSize = object.pageSize ?? 0;
    message.filters = (object.filters !== undefined && object.filters !== null)
      ? Metadata.fromPartial(object.filters)
      : undefined;
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    message.productId = object.productId ?? "";
    message.campaignId = object.campaignId ?? "";
    message.talentId = object.talentId ?? "";
    return message;
  },
};

function createBaseListThreadsResponse(): ListThreadsResponse {
  return { threads: [], totalCount: 0, page: 0, totalPages: 0 };
}

export const ListThreadsResponse: MessageFns<ListThreadsResponse> = {
  encode(message: ListThreadsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.threads) {
      Thread.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.totalCount !== 0) {
      writer.uint32(16).int32(message.totalCount);
    }
    if (message.page !== 0) {
      writer.uint32(24).int32(message.page);
    }
    if (message.totalPages !== 0) {
      writer.uint32(32).int32(message.totalPages);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListThreadsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListThreadsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.threads.push(Thread.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.totalCount = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.page = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.totalPages = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListThreadsResponse {
    return {
      threads: globalThis.Array.isArray(object?.threads) ? object.threads.map((e: any) => Thread.fromJSON(e)) : [],
      totalCount: isSet(object.totalCount) ? globalThis.Number(object.totalCount) : 0,
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      totalPages: isSet(object.totalPages) ? globalThis.Number(object.totalPages) : 0,
    };
  },

  toJSON(message: ListThreadsResponse): unknown {
    const obj: any = {};
    if (message.threads?.length) {
      obj.threads = message.threads.map((e) => Thread.toJSON(e));
    }
    if (message.totalCount !== 0) {
      obj.totalCount = Math.round(message.totalCount);
    }
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.totalPages !== 0) {
      obj.totalPages = Math.round(message.totalPages);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListThreadsResponse>, I>>(base?: I): ListThreadsResponse {
    return ListThreadsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListThreadsResponse>, I>>(object: I): ListThreadsResponse {
    const message = createBaseListThreadsResponse();
    message.threads = object.threads?.map((e) => Thread.fromPartial(e)) || [];
    message.totalCount = object.totalCount ?? 0;
    message.page = object.page ?? 0;
    message.totalPages = object.totalPages ?? 0;
    return message;
  },
};

function createBaseListConversationsRequest(): ListConversationsRequest {
  return {
    userId: "",
    page: 0,
    pageSize: 0,
    filters: undefined,
    metadata: undefined,
    productId: "",
    campaignId: "",
    talentId: "",
  };
}

export const ListConversationsRequest: MessageFns<ListConversationsRequest> = {
  encode(message: ListConversationsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.page !== 0) {
      writer.uint32(16).int32(message.page);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.filters !== undefined) {
      Metadata.encode(message.filters, writer.uint32(34).fork()).join();
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(42).fork()).join();
    }
    if (message.productId !== "") {
      writer.uint32(50).string(message.productId);
    }
    if (message.campaignId !== "") {
      writer.uint32(58).string(message.campaignId);
    }
    if (message.talentId !== "") {
      writer.uint32(66).string(message.talentId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListConversationsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListConversationsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.page = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.filters = Metadata.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.productId = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.campaignId = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.talentId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListConversationsRequest {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      filters: isSet(object.filters) ? Metadata.fromJSON(object.filters) : undefined,
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
      productId: isSet(object.productId) ? globalThis.String(object.productId) : "",
      campaignId: isSet(object.campaignId) ? globalThis.String(object.campaignId) : "",
      talentId: isSet(object.talentId) ? globalThis.String(object.talentId) : "",
    };
  },

  toJSON(message: ListConversationsRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.filters !== undefined) {
      obj.filters = Metadata.toJSON(message.filters);
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    if (message.productId !== "") {
      obj.productId = message.productId;
    }
    if (message.campaignId !== "") {
      obj.campaignId = message.campaignId;
    }
    if (message.talentId !== "") {
      obj.talentId = message.talentId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListConversationsRequest>, I>>(base?: I): ListConversationsRequest {
    return ListConversationsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListConversationsRequest>, I>>(object: I): ListConversationsRequest {
    const message = createBaseListConversationsRequest();
    message.userId = object.userId ?? "";
    message.page = object.page ?? 0;
    message.pageSize = object.pageSize ?? 0;
    message.filters = (object.filters !== undefined && object.filters !== null)
      ? Metadata.fromPartial(object.filters)
      : undefined;
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    message.productId = object.productId ?? "";
    message.campaignId = object.campaignId ?? "";
    message.talentId = object.talentId ?? "";
    return message;
  },
};

function createBaseListConversationsResponse(): ListConversationsResponse {
  return { conversations: [], totalCount: 0, page: 0, totalPages: 0 };
}

export const ListConversationsResponse: MessageFns<ListConversationsResponse> = {
  encode(message: ListConversationsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.conversations) {
      Conversation.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.totalCount !== 0) {
      writer.uint32(16).int32(message.totalCount);
    }
    if (message.page !== 0) {
      writer.uint32(24).int32(message.page);
    }
    if (message.totalPages !== 0) {
      writer.uint32(32).int32(message.totalPages);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListConversationsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListConversationsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.conversations.push(Conversation.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.totalCount = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.page = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.totalPages = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListConversationsResponse {
    return {
      conversations: globalThis.Array.isArray(object?.conversations)
        ? object.conversations.map((e: any) => Conversation.fromJSON(e))
        : [],
      totalCount: isSet(object.totalCount) ? globalThis.Number(object.totalCount) : 0,
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      totalPages: isSet(object.totalPages) ? globalThis.Number(object.totalPages) : 0,
    };
  },

  toJSON(message: ListConversationsResponse): unknown {
    const obj: any = {};
    if (message.conversations?.length) {
      obj.conversations = message.conversations.map((e) => Conversation.toJSON(e));
    }
    if (message.totalCount !== 0) {
      obj.totalCount = Math.round(message.totalCount);
    }
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.totalPages !== 0) {
      obj.totalPages = Math.round(message.totalPages);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListConversationsResponse>, I>>(base?: I): ListConversationsResponse {
    return ListConversationsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListConversationsResponse>, I>>(object: I): ListConversationsResponse {
    const message = createBaseListConversationsResponse();
    message.conversations = object.conversations?.map((e) => Conversation.fromPartial(e)) || [];
    message.totalCount = object.totalCount ?? 0;
    message.page = object.page ?? 0;
    message.totalPages = object.totalPages ?? 0;
    return message;
  },
};

function createBaseStreamMessagesRequest(): StreamMessagesRequest {
  return {
    userId: "",
    conversationIds: [],
    chatGroupIds: [],
    filters: undefined,
    metadata: undefined,
    productId: "",
    campaignId: "",
    talentId: "",
  };
}

export const StreamMessagesRequest: MessageFns<StreamMessagesRequest> = {
  encode(message: StreamMessagesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    for (const v of message.conversationIds) {
      writer.uint32(18).string(v!);
    }
    for (const v of message.chatGroupIds) {
      writer.uint32(26).string(v!);
    }
    if (message.filters !== undefined) {
      Metadata.encode(message.filters, writer.uint32(34).fork()).join();
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(42).fork()).join();
    }
    if (message.productId !== "") {
      writer.uint32(82).string(message.productId);
    }
    if (message.campaignId !== "") {
      writer.uint32(90).string(message.campaignId);
    }
    if (message.talentId !== "") {
      writer.uint32(98).string(message.talentId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StreamMessagesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamMessagesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.conversationIds.push(reader.string());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.chatGroupIds.push(reader.string());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.filters = Metadata.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.productId = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.campaignId = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.talentId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamMessagesRequest {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      conversationIds: globalThis.Array.isArray(object?.conversationIds)
        ? object.conversationIds.map((e: any) => globalThis.String(e))
        : [],
      chatGroupIds: globalThis.Array.isArray(object?.chatGroupIds)
        ? object.chatGroupIds.map((e: any) => globalThis.String(e))
        : [],
      filters: isSet(object.filters) ? Metadata.fromJSON(object.filters) : undefined,
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
      productId: isSet(object.productId) ? globalThis.String(object.productId) : "",
      campaignId: isSet(object.campaignId) ? globalThis.String(object.campaignId) : "",
      talentId: isSet(object.talentId) ? globalThis.String(object.talentId) : "",
    };
  },

  toJSON(message: StreamMessagesRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.conversationIds?.length) {
      obj.conversationIds = message.conversationIds;
    }
    if (message.chatGroupIds?.length) {
      obj.chatGroupIds = message.chatGroupIds;
    }
    if (message.filters !== undefined) {
      obj.filters = Metadata.toJSON(message.filters);
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    if (message.productId !== "") {
      obj.productId = message.productId;
    }
    if (message.campaignId !== "") {
      obj.campaignId = message.campaignId;
    }
    if (message.talentId !== "") {
      obj.talentId = message.talentId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StreamMessagesRequest>, I>>(base?: I): StreamMessagesRequest {
    return StreamMessagesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StreamMessagesRequest>, I>>(object: I): StreamMessagesRequest {
    const message = createBaseStreamMessagesRequest();
    message.userId = object.userId ?? "";
    message.conversationIds = object.conversationIds?.map((e) => e) || [];
    message.chatGroupIds = object.chatGroupIds?.map((e) => e) || [];
    message.filters = (object.filters !== undefined && object.filters !== null)
      ? Metadata.fromPartial(object.filters)
      : undefined;
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    message.productId = object.productId ?? "";
    message.campaignId = object.campaignId ?? "";
    message.talentId = object.talentId ?? "";
    return message;
  },
};

function createBaseMessageEvent(): MessageEvent {
  return {
    eventId: "",
    messageId: "",
    threadId: "",
    conversationId: "",
    chatGroupId: "",
    eventType: "",
    payload: undefined,
    createdAt: undefined,
    productId: "",
    campaignId: "",
    talentId: "",
  };
}

export const MessageEvent: MessageFns<MessageEvent> = {
  encode(message: MessageEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.eventId !== "") {
      writer.uint32(10).string(message.eventId);
    }
    if (message.messageId !== "") {
      writer.uint32(18).string(message.messageId);
    }
    if (message.threadId !== "") {
      writer.uint32(26).string(message.threadId);
    }
    if (message.conversationId !== "") {
      writer.uint32(34).string(message.conversationId);
    }
    if (message.chatGroupId !== "") {
      writer.uint32(42).string(message.chatGroupId);
    }
    if (message.eventType !== "") {
      writer.uint32(50).string(message.eventType);
    }
    if (message.payload !== undefined) {
      Struct.encode(Struct.wrap(message.payload), writer.uint32(58).fork()).join();
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(66).fork()).join();
    }
    if (message.productId !== "") {
      writer.uint32(74).string(message.productId);
    }
    if (message.campaignId !== "") {
      writer.uint32(82).string(message.campaignId);
    }
    if (message.talentId !== "") {
      writer.uint32(90).string(message.talentId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MessageEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessageEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.eventId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.messageId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.threadId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.conversationId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.chatGroupId = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.eventType = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.payload = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.productId = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.campaignId = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.talentId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MessageEvent {
    return {
      eventId: isSet(object.eventId) ? globalThis.String(object.eventId) : "",
      messageId: isSet(object.messageId) ? globalThis.String(object.messageId) : "",
      threadId: isSet(object.threadId) ? globalThis.String(object.threadId) : "",
      conversationId: isSet(object.conversationId) ? globalThis.String(object.conversationId) : "",
      chatGroupId: isSet(object.chatGroupId) ? globalThis.String(object.chatGroupId) : "",
      eventType: isSet(object.eventType) ? globalThis.String(object.eventType) : "",
      payload: isObject(object.payload) ? object.payload : undefined,
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      productId: isSet(object.productId) ? globalThis.String(object.productId) : "",
      campaignId: isSet(object.campaignId) ? globalThis.String(object.campaignId) : "",
      talentId: isSet(object.talentId) ? globalThis.String(object.talentId) : "",
    };
  },

  toJSON(message: MessageEvent): unknown {
    const obj: any = {};
    if (message.eventId !== "") {
      obj.eventId = message.eventId;
    }
    if (message.messageId !== "") {
      obj.messageId = message.messageId;
    }
    if (message.threadId !== "") {
      obj.threadId = message.threadId;
    }
    if (message.conversationId !== "") {
      obj.conversationId = message.conversationId;
    }
    if (message.chatGroupId !== "") {
      obj.chatGroupId = message.chatGroupId;
    }
    if (message.eventType !== "") {
      obj.eventType = message.eventType;
    }
    if (message.payload !== undefined) {
      obj.payload = message.payload;
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.productId !== "") {
      obj.productId = message.productId;
    }
    if (message.campaignId !== "") {
      obj.campaignId = message.campaignId;
    }
    if (message.talentId !== "") {
      obj.talentId = message.talentId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MessageEvent>, I>>(base?: I): MessageEvent {
    return MessageEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MessageEvent>, I>>(object: I): MessageEvent {
    const message = createBaseMessageEvent();
    message.eventId = object.eventId ?? "";
    message.messageId = object.messageId ?? "";
    message.threadId = object.threadId ?? "";
    message.conversationId = object.conversationId ?? "";
    message.chatGroupId = object.chatGroupId ?? "";
    message.eventType = object.eventType ?? "";
    message.payload = object.payload ?? undefined;
    message.createdAt = object.createdAt ?? undefined;
    message.productId = object.productId ?? "";
    message.campaignId = object.campaignId ?? "";
    message.talentId = object.talentId ?? "";
    return message;
  },
};

function createBaseStreamTypingRequest(): StreamTypingRequest {
  return {
    userId: "",
    conversationId: "",
    chatGroupId: "",
    metadata: undefined,
    productId: "",
    campaignId: "",
    talentId: "",
  };
}

export const StreamTypingRequest: MessageFns<StreamTypingRequest> = {
  encode(message: StreamTypingRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.conversationId !== "") {
      writer.uint32(18).string(message.conversationId);
    }
    if (message.chatGroupId !== "") {
      writer.uint32(26).string(message.chatGroupId);
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(34).fork()).join();
    }
    if (message.productId !== "") {
      writer.uint32(42).string(message.productId);
    }
    if (message.campaignId !== "") {
      writer.uint32(50).string(message.campaignId);
    }
    if (message.talentId !== "") {
      writer.uint32(58).string(message.talentId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StreamTypingRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamTypingRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.conversationId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.chatGroupId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.productId = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.campaignId = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.talentId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamTypingRequest {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      conversationId: isSet(object.conversationId) ? globalThis.String(object.conversationId) : "",
      chatGroupId: isSet(object.chatGroupId) ? globalThis.String(object.chatGroupId) : "",
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
      productId: isSet(object.productId) ? globalThis.String(object.productId) : "",
      campaignId: isSet(object.campaignId) ? globalThis.String(object.campaignId) : "",
      talentId: isSet(object.talentId) ? globalThis.String(object.talentId) : "",
    };
  },

  toJSON(message: StreamTypingRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.conversationId !== "") {
      obj.conversationId = message.conversationId;
    }
    if (message.chatGroupId !== "") {
      obj.chatGroupId = message.chatGroupId;
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    if (message.productId !== "") {
      obj.productId = message.productId;
    }
    if (message.campaignId !== "") {
      obj.campaignId = message.campaignId;
    }
    if (message.talentId !== "") {
      obj.talentId = message.talentId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StreamTypingRequest>, I>>(base?: I): StreamTypingRequest {
    return StreamTypingRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StreamTypingRequest>, I>>(object: I): StreamTypingRequest {
    const message = createBaseStreamTypingRequest();
    message.userId = object.userId ?? "";
    message.conversationId = object.conversationId ?? "";
    message.chatGroupId = object.chatGroupId ?? "";
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    message.productId = object.productId ?? "";
    message.campaignId = object.campaignId ?? "";
    message.talentId = object.talentId ?? "";
    return message;
  },
};

function createBaseTypingEvent(): TypingEvent {
  return {
    userId: "",
    conversationId: "",
    chatGroupId: "",
    isTyping: false,
    timestamp: undefined,
    productId: "",
    campaignId: "",
    talentId: "",
  };
}

export const TypingEvent: MessageFns<TypingEvent> = {
  encode(message: TypingEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.conversationId !== "") {
      writer.uint32(18).string(message.conversationId);
    }
    if (message.chatGroupId !== "") {
      writer.uint32(26).string(message.chatGroupId);
    }
    if (message.isTyping !== false) {
      writer.uint32(32).bool(message.isTyping);
    }
    if (message.timestamp !== undefined) {
      Timestamp.encode(toTimestamp(message.timestamp), writer.uint32(42).fork()).join();
    }
    if (message.productId !== "") {
      writer.uint32(50).string(message.productId);
    }
    if (message.campaignId !== "") {
      writer.uint32(58).string(message.campaignId);
    }
    if (message.talentId !== "") {
      writer.uint32(66).string(message.talentId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TypingEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTypingEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.conversationId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.chatGroupId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.isTyping = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.timestamp = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.productId = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.campaignId = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.talentId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TypingEvent {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      conversationId: isSet(object.conversationId) ? globalThis.String(object.conversationId) : "",
      chatGroupId: isSet(object.chatGroupId) ? globalThis.String(object.chatGroupId) : "",
      isTyping: isSet(object.isTyping) ? globalThis.Boolean(object.isTyping) : false,
      timestamp: isSet(object.timestamp) ? fromJsonTimestamp(object.timestamp) : undefined,
      productId: isSet(object.productId) ? globalThis.String(object.productId) : "",
      campaignId: isSet(object.campaignId) ? globalThis.String(object.campaignId) : "",
      talentId: isSet(object.talentId) ? globalThis.String(object.talentId) : "",
    };
  },

  toJSON(message: TypingEvent): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.conversationId !== "") {
      obj.conversationId = message.conversationId;
    }
    if (message.chatGroupId !== "") {
      obj.chatGroupId = message.chatGroupId;
    }
    if (message.isTyping !== false) {
      obj.isTyping = message.isTyping;
    }
    if (message.timestamp !== undefined) {
      obj.timestamp = message.timestamp.toISOString();
    }
    if (message.productId !== "") {
      obj.productId = message.productId;
    }
    if (message.campaignId !== "") {
      obj.campaignId = message.campaignId;
    }
    if (message.talentId !== "") {
      obj.talentId = message.talentId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TypingEvent>, I>>(base?: I): TypingEvent {
    return TypingEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TypingEvent>, I>>(object: I): TypingEvent {
    const message = createBaseTypingEvent();
    message.userId = object.userId ?? "";
    message.conversationId = object.conversationId ?? "";
    message.chatGroupId = object.chatGroupId ?? "";
    message.isTyping = object.isTyping ?? false;
    message.timestamp = object.timestamp ?? undefined;
    message.productId = object.productId ?? "";
    message.campaignId = object.campaignId ?? "";
    message.talentId = object.talentId ?? "";
    return message;
  },
};

function createBaseStreamPresenceRequest(): StreamPresenceRequest {
  return { userId: "", metadata: undefined, productId: "", campaignId: "", talentId: "" };
}

export const StreamPresenceRequest: MessageFns<StreamPresenceRequest> = {
  encode(message: StreamPresenceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(18).fork()).join();
    }
    if (message.productId !== "") {
      writer.uint32(26).string(message.productId);
    }
    if (message.campaignId !== "") {
      writer.uint32(34).string(message.campaignId);
    }
    if (message.talentId !== "") {
      writer.uint32(42).string(message.talentId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StreamPresenceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamPresenceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.productId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.campaignId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.talentId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamPresenceRequest {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
      productId: isSet(object.productId) ? globalThis.String(object.productId) : "",
      campaignId: isSet(object.campaignId) ? globalThis.String(object.campaignId) : "",
      talentId: isSet(object.talentId) ? globalThis.String(object.talentId) : "",
    };
  },

  toJSON(message: StreamPresenceRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    if (message.productId !== "") {
      obj.productId = message.productId;
    }
    if (message.campaignId !== "") {
      obj.campaignId = message.campaignId;
    }
    if (message.talentId !== "") {
      obj.talentId = message.talentId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StreamPresenceRequest>, I>>(base?: I): StreamPresenceRequest {
    return StreamPresenceRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StreamPresenceRequest>, I>>(object: I): StreamPresenceRequest {
    const message = createBaseStreamPresenceRequest();
    message.userId = object.userId ?? "";
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    message.productId = object.productId ?? "";
    message.campaignId = object.campaignId ?? "";
    message.talentId = object.talentId ?? "";
    return message;
  },
};

function createBasePresenceEvent(): PresenceEvent {
  return { userId: "", status: "", timestamp: undefined, productId: "", campaignId: "", talentId: "" };
}

export const PresenceEvent: MessageFns<PresenceEvent> = {
  encode(message: PresenceEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.status !== "") {
      writer.uint32(18).string(message.status);
    }
    if (message.timestamp !== undefined) {
      Timestamp.encode(toTimestamp(message.timestamp), writer.uint32(26).fork()).join();
    }
    if (message.productId !== "") {
      writer.uint32(34).string(message.productId);
    }
    if (message.campaignId !== "") {
      writer.uint32(42).string(message.campaignId);
    }
    if (message.talentId !== "") {
      writer.uint32(50).string(message.talentId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PresenceEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePresenceEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.timestamp = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.productId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.campaignId = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.talentId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PresenceEvent {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      timestamp: isSet(object.timestamp) ? fromJsonTimestamp(object.timestamp) : undefined,
      productId: isSet(object.productId) ? globalThis.String(object.productId) : "",
      campaignId: isSet(object.campaignId) ? globalThis.String(object.campaignId) : "",
      talentId: isSet(object.talentId) ? globalThis.String(object.talentId) : "",
    };
  },

  toJSON(message: PresenceEvent): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.timestamp !== undefined) {
      obj.timestamp = message.timestamp.toISOString();
    }
    if (message.productId !== "") {
      obj.productId = message.productId;
    }
    if (message.campaignId !== "") {
      obj.campaignId = message.campaignId;
    }
    if (message.talentId !== "") {
      obj.talentId = message.talentId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PresenceEvent>, I>>(base?: I): PresenceEvent {
    return PresenceEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PresenceEvent>, I>>(object: I): PresenceEvent {
    const message = createBasePresenceEvent();
    message.userId = object.userId ?? "";
    message.status = object.status ?? "";
    message.timestamp = object.timestamp ?? undefined;
    message.productId = object.productId ?? "";
    message.campaignId = object.campaignId ?? "";
    message.talentId = object.talentId ?? "";
    return message;
  },
};

function createBaseMarkAsReadRequest(): MarkAsReadRequest {
  return { messageId: "", userId: "", metadata: undefined, productId: "", campaignId: "", talentId: "" };
}

export const MarkAsReadRequest: MessageFns<MarkAsReadRequest> = {
  encode(message: MarkAsReadRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.messageId !== "") {
      writer.uint32(10).string(message.messageId);
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(26).fork()).join();
    }
    if (message.productId !== "") {
      writer.uint32(34).string(message.productId);
    }
    if (message.campaignId !== "") {
      writer.uint32(42).string(message.campaignId);
    }
    if (message.talentId !== "") {
      writer.uint32(50).string(message.talentId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MarkAsReadRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMarkAsReadRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.messageId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.productId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.campaignId = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.talentId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MarkAsReadRequest {
    return {
      messageId: isSet(object.messageId) ? globalThis.String(object.messageId) : "",
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
      productId: isSet(object.productId) ? globalThis.String(object.productId) : "",
      campaignId: isSet(object.campaignId) ? globalThis.String(object.campaignId) : "",
      talentId: isSet(object.talentId) ? globalThis.String(object.talentId) : "",
    };
  },

  toJSON(message: MarkAsReadRequest): unknown {
    const obj: any = {};
    if (message.messageId !== "") {
      obj.messageId = message.messageId;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    if (message.productId !== "") {
      obj.productId = message.productId;
    }
    if (message.campaignId !== "") {
      obj.campaignId = message.campaignId;
    }
    if (message.talentId !== "") {
      obj.talentId = message.talentId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MarkAsReadRequest>, I>>(base?: I): MarkAsReadRequest {
    return MarkAsReadRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MarkAsReadRequest>, I>>(object: I): MarkAsReadRequest {
    const message = createBaseMarkAsReadRequest();
    message.messageId = object.messageId ?? "";
    message.userId = object.userId ?? "";
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    message.productId = object.productId ?? "";
    message.campaignId = object.campaignId ?? "";
    message.talentId = object.talentId ?? "";
    return message;
  },
};

function createBaseMarkAsReadResponse(): MarkAsReadResponse {
  return { success: false };
}

export const MarkAsReadResponse: MessageFns<MarkAsReadResponse> = {
  encode(message: MarkAsReadResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MarkAsReadResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMarkAsReadResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MarkAsReadResponse {
    return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
  },

  toJSON(message: MarkAsReadResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MarkAsReadResponse>, I>>(base?: I): MarkAsReadResponse {
    return MarkAsReadResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MarkAsReadResponse>, I>>(object: I): MarkAsReadResponse {
    const message = createBaseMarkAsReadResponse();
    message.success = object.success ?? false;
    return message;
  },
};

function createBaseMarkAsDeliveredRequest(): MarkAsDeliveredRequest {
  return { messageId: "", userId: "", metadata: undefined, productId: "", campaignId: "", talentId: "" };
}

export const MarkAsDeliveredRequest: MessageFns<MarkAsDeliveredRequest> = {
  encode(message: MarkAsDeliveredRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.messageId !== "") {
      writer.uint32(10).string(message.messageId);
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(26).fork()).join();
    }
    if (message.productId !== "") {
      writer.uint32(34).string(message.productId);
    }
    if (message.campaignId !== "") {
      writer.uint32(42).string(message.campaignId);
    }
    if (message.talentId !== "") {
      writer.uint32(50).string(message.talentId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MarkAsDeliveredRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMarkAsDeliveredRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.messageId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.productId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.campaignId = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.talentId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MarkAsDeliveredRequest {
    return {
      messageId: isSet(object.messageId) ? globalThis.String(object.messageId) : "",
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
      productId: isSet(object.productId) ? globalThis.String(object.productId) : "",
      campaignId: isSet(object.campaignId) ? globalThis.String(object.campaignId) : "",
      talentId: isSet(object.talentId) ? globalThis.String(object.talentId) : "",
    };
  },

  toJSON(message: MarkAsDeliveredRequest): unknown {
    const obj: any = {};
    if (message.messageId !== "") {
      obj.messageId = message.messageId;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    if (message.productId !== "") {
      obj.productId = message.productId;
    }
    if (message.campaignId !== "") {
      obj.campaignId = message.campaignId;
    }
    if (message.talentId !== "") {
      obj.talentId = message.talentId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MarkAsDeliveredRequest>, I>>(base?: I): MarkAsDeliveredRequest {
    return MarkAsDeliveredRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MarkAsDeliveredRequest>, I>>(object: I): MarkAsDeliveredRequest {
    const message = createBaseMarkAsDeliveredRequest();
    message.messageId = object.messageId ?? "";
    message.userId = object.userId ?? "";
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    message.productId = object.productId ?? "";
    message.campaignId = object.campaignId ?? "";
    message.talentId = object.talentId ?? "";
    return message;
  },
};

function createBaseMarkAsDeliveredResponse(): MarkAsDeliveredResponse {
  return { success: false };
}

export const MarkAsDeliveredResponse: MessageFns<MarkAsDeliveredResponse> = {
  encode(message: MarkAsDeliveredResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MarkAsDeliveredResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMarkAsDeliveredResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MarkAsDeliveredResponse {
    return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
  },

  toJSON(message: MarkAsDeliveredResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MarkAsDeliveredResponse>, I>>(base?: I): MarkAsDeliveredResponse {
    return MarkAsDeliveredResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MarkAsDeliveredResponse>, I>>(object: I): MarkAsDeliveredResponse {
    const message = createBaseMarkAsDeliveredResponse();
    message.success = object.success ?? false;
    return message;
  },
};

function createBaseAcknowledgeMessageRequest(): AcknowledgeMessageRequest {
  return { messageId: "", userId: "", metadata: undefined, productId: "", campaignId: "", talentId: "" };
}

export const AcknowledgeMessageRequest: MessageFns<AcknowledgeMessageRequest> = {
  encode(message: AcknowledgeMessageRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.messageId !== "") {
      writer.uint32(10).string(message.messageId);
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(26).fork()).join();
    }
    if (message.productId !== "") {
      writer.uint32(34).string(message.productId);
    }
    if (message.campaignId !== "") {
      writer.uint32(42).string(message.campaignId);
    }
    if (message.talentId !== "") {
      writer.uint32(50).string(message.talentId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AcknowledgeMessageRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAcknowledgeMessageRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.messageId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.productId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.campaignId = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.talentId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AcknowledgeMessageRequest {
    return {
      messageId: isSet(object.messageId) ? globalThis.String(object.messageId) : "",
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
      productId: isSet(object.productId) ? globalThis.String(object.productId) : "",
      campaignId: isSet(object.campaignId) ? globalThis.String(object.campaignId) : "",
      talentId: isSet(object.talentId) ? globalThis.String(object.talentId) : "",
    };
  },

  toJSON(message: AcknowledgeMessageRequest): unknown {
    const obj: any = {};
    if (message.messageId !== "") {
      obj.messageId = message.messageId;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    if (message.productId !== "") {
      obj.productId = message.productId;
    }
    if (message.campaignId !== "") {
      obj.campaignId = message.campaignId;
    }
    if (message.talentId !== "") {
      obj.talentId = message.talentId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AcknowledgeMessageRequest>, I>>(base?: I): AcknowledgeMessageRequest {
    return AcknowledgeMessageRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AcknowledgeMessageRequest>, I>>(object: I): AcknowledgeMessageRequest {
    const message = createBaseAcknowledgeMessageRequest();
    message.messageId = object.messageId ?? "";
    message.userId = object.userId ?? "";
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    message.productId = object.productId ?? "";
    message.campaignId = object.campaignId ?? "";
    message.talentId = object.talentId ?? "";
    return message;
  },
};

function createBaseAcknowledgeMessageResponse(): AcknowledgeMessageResponse {
  return { success: false };
}

export const AcknowledgeMessageResponse: MessageFns<AcknowledgeMessageResponse> = {
  encode(message: AcknowledgeMessageResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AcknowledgeMessageResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAcknowledgeMessageResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AcknowledgeMessageResponse {
    return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
  },

  toJSON(message: AcknowledgeMessageResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AcknowledgeMessageResponse>, I>>(base?: I): AcknowledgeMessageResponse {
    return AcknowledgeMessageResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AcknowledgeMessageResponse>, I>>(object: I): AcknowledgeMessageResponse {
    const message = createBaseAcknowledgeMessageResponse();
    message.success = object.success ?? false;
    return message;
  },
};

function createBaseCreateChatGroupRequest(): CreateChatGroupRequest {
  return {
    name: "",
    description: "",
    memberIds: [],
    roles: {},
    metadata: undefined,
    productId: "",
    campaignId: "",
    talentId: "",
  };
}

export const CreateChatGroupRequest: MessageFns<CreateChatGroupRequest> = {
  encode(message: CreateChatGroupRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    for (const v of message.memberIds) {
      writer.uint32(26).string(v!);
    }
    Object.entries(message.roles).forEach(([key, value]) => {
      CreateChatGroupRequest_RolesEntry.encode({ key: key as any, value }, writer.uint32(34).fork()).join();
    });
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(42).fork()).join();
    }
    if (message.productId !== "") {
      writer.uint32(82).string(message.productId);
    }
    if (message.campaignId !== "") {
      writer.uint32(90).string(message.campaignId);
    }
    if (message.talentId !== "") {
      writer.uint32(98).string(message.talentId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateChatGroupRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateChatGroupRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.memberIds.push(reader.string());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          const entry4 = CreateChatGroupRequest_RolesEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.roles[entry4.key] = entry4.value;
          }
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.productId = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.campaignId = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.talentId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateChatGroupRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      memberIds: globalThis.Array.isArray(object?.memberIds)
        ? object.memberIds.map((e: any) => globalThis.String(e))
        : [],
      roles: isObject(object.roles)
        ? Object.entries(object.roles).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
      productId: isSet(object.productId) ? globalThis.String(object.productId) : "",
      campaignId: isSet(object.campaignId) ? globalThis.String(object.campaignId) : "",
      talentId: isSet(object.talentId) ? globalThis.String(object.talentId) : "",
    };
  },

  toJSON(message: CreateChatGroupRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.memberIds?.length) {
      obj.memberIds = message.memberIds;
    }
    if (message.roles) {
      const entries = Object.entries(message.roles);
      if (entries.length > 0) {
        obj.roles = {};
        entries.forEach(([k, v]) => {
          obj.roles[k] = v;
        });
      }
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    if (message.productId !== "") {
      obj.productId = message.productId;
    }
    if (message.campaignId !== "") {
      obj.campaignId = message.campaignId;
    }
    if (message.talentId !== "") {
      obj.talentId = message.talentId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateChatGroupRequest>, I>>(base?: I): CreateChatGroupRequest {
    return CreateChatGroupRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateChatGroupRequest>, I>>(object: I): CreateChatGroupRequest {
    const message = createBaseCreateChatGroupRequest();
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.memberIds = object.memberIds?.map((e) => e) || [];
    message.roles = Object.entries(object.roles ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    message.productId = object.productId ?? "";
    message.campaignId = object.campaignId ?? "";
    message.talentId = object.talentId ?? "";
    return message;
  },
};

function createBaseCreateChatGroupRequest_RolesEntry(): CreateChatGroupRequest_RolesEntry {
  return { key: "", value: "" };
}

export const CreateChatGroupRequest_RolesEntry: MessageFns<CreateChatGroupRequest_RolesEntry> = {
  encode(message: CreateChatGroupRequest_RolesEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateChatGroupRequest_RolesEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateChatGroupRequest_RolesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateChatGroupRequest_RolesEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: CreateChatGroupRequest_RolesEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateChatGroupRequest_RolesEntry>, I>>(
    base?: I,
  ): CreateChatGroupRequest_RolesEntry {
    return CreateChatGroupRequest_RolesEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateChatGroupRequest_RolesEntry>, I>>(
    object: I,
  ): CreateChatGroupRequest_RolesEntry {
    const message = createBaseCreateChatGroupRequest_RolesEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseCreateChatGroupResponse(): CreateChatGroupResponse {
  return { chatGroup: undefined };
}

export const CreateChatGroupResponse: MessageFns<CreateChatGroupResponse> = {
  encode(message: CreateChatGroupResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.chatGroup !== undefined) {
      ChatGroup.encode(message.chatGroup, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateChatGroupResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateChatGroupResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.chatGroup = ChatGroup.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateChatGroupResponse {
    return { chatGroup: isSet(object.chatGroup) ? ChatGroup.fromJSON(object.chatGroup) : undefined };
  },

  toJSON(message: CreateChatGroupResponse): unknown {
    const obj: any = {};
    if (message.chatGroup !== undefined) {
      obj.chatGroup = ChatGroup.toJSON(message.chatGroup);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateChatGroupResponse>, I>>(base?: I): CreateChatGroupResponse {
    return CreateChatGroupResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateChatGroupResponse>, I>>(object: I): CreateChatGroupResponse {
    const message = createBaseCreateChatGroupResponse();
    message.chatGroup = (object.chatGroup !== undefined && object.chatGroup !== null)
      ? ChatGroup.fromPartial(object.chatGroup)
      : undefined;
    return message;
  },
};

function createBaseAddChatGroupMemberRequest(): AddChatGroupMemberRequest {
  return { chatGroupId: "", userId: "", role: "", metadata: undefined, productId: "", campaignId: "", talentId: "" };
}

export const AddChatGroupMemberRequest: MessageFns<AddChatGroupMemberRequest> = {
  encode(message: AddChatGroupMemberRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.chatGroupId !== "") {
      writer.uint32(10).string(message.chatGroupId);
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    if (message.role !== "") {
      writer.uint32(26).string(message.role);
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(34).fork()).join();
    }
    if (message.productId !== "") {
      writer.uint32(42).string(message.productId);
    }
    if (message.campaignId !== "") {
      writer.uint32(50).string(message.campaignId);
    }
    if (message.talentId !== "") {
      writer.uint32(58).string(message.talentId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddChatGroupMemberRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddChatGroupMemberRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.chatGroupId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.role = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.productId = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.campaignId = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.talentId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddChatGroupMemberRequest {
    return {
      chatGroupId: isSet(object.chatGroupId) ? globalThis.String(object.chatGroupId) : "",
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      role: isSet(object.role) ? globalThis.String(object.role) : "",
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
      productId: isSet(object.productId) ? globalThis.String(object.productId) : "",
      campaignId: isSet(object.campaignId) ? globalThis.String(object.campaignId) : "",
      talentId: isSet(object.talentId) ? globalThis.String(object.talentId) : "",
    };
  },

  toJSON(message: AddChatGroupMemberRequest): unknown {
    const obj: any = {};
    if (message.chatGroupId !== "") {
      obj.chatGroupId = message.chatGroupId;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.role !== "") {
      obj.role = message.role;
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    if (message.productId !== "") {
      obj.productId = message.productId;
    }
    if (message.campaignId !== "") {
      obj.campaignId = message.campaignId;
    }
    if (message.talentId !== "") {
      obj.talentId = message.talentId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddChatGroupMemberRequest>, I>>(base?: I): AddChatGroupMemberRequest {
    return AddChatGroupMemberRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddChatGroupMemberRequest>, I>>(object: I): AddChatGroupMemberRequest {
    const message = createBaseAddChatGroupMemberRequest();
    message.chatGroupId = object.chatGroupId ?? "";
    message.userId = object.userId ?? "";
    message.role = object.role ?? "";
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    message.productId = object.productId ?? "";
    message.campaignId = object.campaignId ?? "";
    message.talentId = object.talentId ?? "";
    return message;
  },
};

function createBaseAddChatGroupMemberResponse(): AddChatGroupMemberResponse {
  return { chatGroup: undefined };
}

export const AddChatGroupMemberResponse: MessageFns<AddChatGroupMemberResponse> = {
  encode(message: AddChatGroupMemberResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.chatGroup !== undefined) {
      ChatGroup.encode(message.chatGroup, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddChatGroupMemberResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddChatGroupMemberResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.chatGroup = ChatGroup.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddChatGroupMemberResponse {
    return { chatGroup: isSet(object.chatGroup) ? ChatGroup.fromJSON(object.chatGroup) : undefined };
  },

  toJSON(message: AddChatGroupMemberResponse): unknown {
    const obj: any = {};
    if (message.chatGroup !== undefined) {
      obj.chatGroup = ChatGroup.toJSON(message.chatGroup);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddChatGroupMemberResponse>, I>>(base?: I): AddChatGroupMemberResponse {
    return AddChatGroupMemberResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddChatGroupMemberResponse>, I>>(object: I): AddChatGroupMemberResponse {
    const message = createBaseAddChatGroupMemberResponse();
    message.chatGroup = (object.chatGroup !== undefined && object.chatGroup !== null)
      ? ChatGroup.fromPartial(object.chatGroup)
      : undefined;
    return message;
  },
};

function createBaseRemoveChatGroupMemberRequest(): RemoveChatGroupMemberRequest {
  return { chatGroupId: "", userId: "", metadata: undefined, productId: "", campaignId: "", talentId: "" };
}

export const RemoveChatGroupMemberRequest: MessageFns<RemoveChatGroupMemberRequest> = {
  encode(message: RemoveChatGroupMemberRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.chatGroupId !== "") {
      writer.uint32(10).string(message.chatGroupId);
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(26).fork()).join();
    }
    if (message.productId !== "") {
      writer.uint32(34).string(message.productId);
    }
    if (message.campaignId !== "") {
      writer.uint32(42).string(message.campaignId);
    }
    if (message.talentId !== "") {
      writer.uint32(50).string(message.talentId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveChatGroupMemberRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveChatGroupMemberRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.chatGroupId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.productId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.campaignId = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.talentId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveChatGroupMemberRequest {
    return {
      chatGroupId: isSet(object.chatGroupId) ? globalThis.String(object.chatGroupId) : "",
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
      productId: isSet(object.productId) ? globalThis.String(object.productId) : "",
      campaignId: isSet(object.campaignId) ? globalThis.String(object.campaignId) : "",
      talentId: isSet(object.talentId) ? globalThis.String(object.talentId) : "",
    };
  },

  toJSON(message: RemoveChatGroupMemberRequest): unknown {
    const obj: any = {};
    if (message.chatGroupId !== "") {
      obj.chatGroupId = message.chatGroupId;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    if (message.productId !== "") {
      obj.productId = message.productId;
    }
    if (message.campaignId !== "") {
      obj.campaignId = message.campaignId;
    }
    if (message.talentId !== "") {
      obj.talentId = message.talentId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveChatGroupMemberRequest>, I>>(base?: I): RemoveChatGroupMemberRequest {
    return RemoveChatGroupMemberRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveChatGroupMemberRequest>, I>>(object: I): RemoveChatGroupMemberRequest {
    const message = createBaseRemoveChatGroupMemberRequest();
    message.chatGroupId = object.chatGroupId ?? "";
    message.userId = object.userId ?? "";
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    message.productId = object.productId ?? "";
    message.campaignId = object.campaignId ?? "";
    message.talentId = object.talentId ?? "";
    return message;
  },
};

function createBaseRemoveChatGroupMemberResponse(): RemoveChatGroupMemberResponse {
  return { chatGroup: undefined };
}

export const RemoveChatGroupMemberResponse: MessageFns<RemoveChatGroupMemberResponse> = {
  encode(message: RemoveChatGroupMemberResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.chatGroup !== undefined) {
      ChatGroup.encode(message.chatGroup, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveChatGroupMemberResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveChatGroupMemberResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.chatGroup = ChatGroup.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveChatGroupMemberResponse {
    return { chatGroup: isSet(object.chatGroup) ? ChatGroup.fromJSON(object.chatGroup) : undefined };
  },

  toJSON(message: RemoveChatGroupMemberResponse): unknown {
    const obj: any = {};
    if (message.chatGroup !== undefined) {
      obj.chatGroup = ChatGroup.toJSON(message.chatGroup);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveChatGroupMemberResponse>, I>>(base?: I): RemoveChatGroupMemberResponse {
    return RemoveChatGroupMemberResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveChatGroupMemberResponse>, I>>(
    object: I,
  ): RemoveChatGroupMemberResponse {
    const message = createBaseRemoveChatGroupMemberResponse();
    message.chatGroup = (object.chatGroup !== undefined && object.chatGroup !== null)
      ? ChatGroup.fromPartial(object.chatGroup)
      : undefined;
    return message;
  },
};

function createBaseListChatGroupMembersRequest(): ListChatGroupMembersRequest {
  return { chatGroupId: "", page: 0, pageSize: 0, metadata: undefined, productId: "", campaignId: "", talentId: "" };
}

export const ListChatGroupMembersRequest: MessageFns<ListChatGroupMembersRequest> = {
  encode(message: ListChatGroupMembersRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.chatGroupId !== "") {
      writer.uint32(10).string(message.chatGroupId);
    }
    if (message.page !== 0) {
      writer.uint32(16).int32(message.page);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(34).fork()).join();
    }
    if (message.productId !== "") {
      writer.uint32(42).string(message.productId);
    }
    if (message.campaignId !== "") {
      writer.uint32(50).string(message.campaignId);
    }
    if (message.talentId !== "") {
      writer.uint32(58).string(message.talentId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListChatGroupMembersRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListChatGroupMembersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.chatGroupId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.page = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.productId = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.campaignId = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.talentId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListChatGroupMembersRequest {
    return {
      chatGroupId: isSet(object.chatGroupId) ? globalThis.String(object.chatGroupId) : "",
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
      productId: isSet(object.productId) ? globalThis.String(object.productId) : "",
      campaignId: isSet(object.campaignId) ? globalThis.String(object.campaignId) : "",
      talentId: isSet(object.talentId) ? globalThis.String(object.talentId) : "",
    };
  },

  toJSON(message: ListChatGroupMembersRequest): unknown {
    const obj: any = {};
    if (message.chatGroupId !== "") {
      obj.chatGroupId = message.chatGroupId;
    }
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    if (message.productId !== "") {
      obj.productId = message.productId;
    }
    if (message.campaignId !== "") {
      obj.campaignId = message.campaignId;
    }
    if (message.talentId !== "") {
      obj.talentId = message.talentId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListChatGroupMembersRequest>, I>>(base?: I): ListChatGroupMembersRequest {
    return ListChatGroupMembersRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListChatGroupMembersRequest>, I>>(object: I): ListChatGroupMembersRequest {
    const message = createBaseListChatGroupMembersRequest();
    message.chatGroupId = object.chatGroupId ?? "";
    message.page = object.page ?? 0;
    message.pageSize = object.pageSize ?? 0;
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    message.productId = object.productId ?? "";
    message.campaignId = object.campaignId ?? "";
    message.talentId = object.talentId ?? "";
    return message;
  },
};

function createBaseListChatGroupMembersResponse(): ListChatGroupMembersResponse {
  return { memberIds: [], totalCount: 0, page: 0, totalPages: 0 };
}

export const ListChatGroupMembersResponse: MessageFns<ListChatGroupMembersResponse> = {
  encode(message: ListChatGroupMembersResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.memberIds) {
      writer.uint32(10).string(v!);
    }
    if (message.totalCount !== 0) {
      writer.uint32(16).int32(message.totalCount);
    }
    if (message.page !== 0) {
      writer.uint32(24).int32(message.page);
    }
    if (message.totalPages !== 0) {
      writer.uint32(32).int32(message.totalPages);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListChatGroupMembersResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListChatGroupMembersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.memberIds.push(reader.string());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.totalCount = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.page = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.totalPages = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListChatGroupMembersResponse {
    return {
      memberIds: globalThis.Array.isArray(object?.memberIds)
        ? object.memberIds.map((e: any) => globalThis.String(e))
        : [],
      totalCount: isSet(object.totalCount) ? globalThis.Number(object.totalCount) : 0,
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      totalPages: isSet(object.totalPages) ? globalThis.Number(object.totalPages) : 0,
    };
  },

  toJSON(message: ListChatGroupMembersResponse): unknown {
    const obj: any = {};
    if (message.memberIds?.length) {
      obj.memberIds = message.memberIds;
    }
    if (message.totalCount !== 0) {
      obj.totalCount = Math.round(message.totalCount);
    }
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.totalPages !== 0) {
      obj.totalPages = Math.round(message.totalPages);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListChatGroupMembersResponse>, I>>(base?: I): ListChatGroupMembersResponse {
    return ListChatGroupMembersResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListChatGroupMembersResponse>, I>>(object: I): ListChatGroupMembersResponse {
    const message = createBaseListChatGroupMembersResponse();
    message.memberIds = object.memberIds?.map((e) => e) || [];
    message.totalCount = object.totalCount ?? 0;
    message.page = object.page ?? 0;
    message.totalPages = object.totalPages ?? 0;
    return message;
  },
};

function createBaseMessagingPreferences(): MessagingPreferences {
  return {
    mute: false,
    archive: false,
    notificationTypes: {},
    quietHours: [],
    timezone: "",
    metadata: undefined,
    productId: "",
    campaignId: "",
    talentId: "",
  };
}

export const MessagingPreferences: MessageFns<MessagingPreferences> = {
  encode(message: MessagingPreferences, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.mute !== false) {
      writer.uint32(8).bool(message.mute);
    }
    if (message.archive !== false) {
      writer.uint32(16).bool(message.archive);
    }
    Object.entries(message.notificationTypes).forEach(([key, value]) => {
      MessagingPreferences_NotificationTypesEntry.encode({ key: key as any, value }, writer.uint32(26).fork()).join();
    });
    for (const v of message.quietHours) {
      writer.uint32(34).string(v!);
    }
    if (message.timezone !== "") {
      writer.uint32(42).string(message.timezone);
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(50).fork()).join();
    }
    if (message.productId !== "") {
      writer.uint32(58).string(message.productId);
    }
    if (message.campaignId !== "") {
      writer.uint32(66).string(message.campaignId);
    }
    if (message.talentId !== "") {
      writer.uint32(74).string(message.talentId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MessagingPreferences {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessagingPreferences();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.mute = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.archive = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          const entry3 = MessagingPreferences_NotificationTypesEntry.decode(reader, reader.uint32());
          if (entry3.value !== undefined) {
            message.notificationTypes[entry3.key] = entry3.value;
          }
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.quietHours.push(reader.string());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.timezone = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.productId = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.campaignId = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.talentId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MessagingPreferences {
    return {
      mute: isSet(object.mute) ? globalThis.Boolean(object.mute) : false,
      archive: isSet(object.archive) ? globalThis.Boolean(object.archive) : false,
      notificationTypes: isObject(object.notificationTypes)
        ? Object.entries(object.notificationTypes).reduce<{ [key: string]: boolean }>((acc, [key, value]) => {
          acc[key] = Boolean(value);
          return acc;
        }, {})
        : {},
      quietHours: globalThis.Array.isArray(object?.quietHours)
        ? object.quietHours.map((e: any) => globalThis.String(e))
        : [],
      timezone: isSet(object.timezone) ? globalThis.String(object.timezone) : "",
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
      productId: isSet(object.productId) ? globalThis.String(object.productId) : "",
      campaignId: isSet(object.campaignId) ? globalThis.String(object.campaignId) : "",
      talentId: isSet(object.talentId) ? globalThis.String(object.talentId) : "",
    };
  },

  toJSON(message: MessagingPreferences): unknown {
    const obj: any = {};
    if (message.mute !== false) {
      obj.mute = message.mute;
    }
    if (message.archive !== false) {
      obj.archive = message.archive;
    }
    if (message.notificationTypes) {
      const entries = Object.entries(message.notificationTypes);
      if (entries.length > 0) {
        obj.notificationTypes = {};
        entries.forEach(([k, v]) => {
          obj.notificationTypes[k] = v;
        });
      }
    }
    if (message.quietHours?.length) {
      obj.quietHours = message.quietHours;
    }
    if (message.timezone !== "") {
      obj.timezone = message.timezone;
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    if (message.productId !== "") {
      obj.productId = message.productId;
    }
    if (message.campaignId !== "") {
      obj.campaignId = message.campaignId;
    }
    if (message.talentId !== "") {
      obj.talentId = message.talentId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MessagingPreferences>, I>>(base?: I): MessagingPreferences {
    return MessagingPreferences.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MessagingPreferences>, I>>(object: I): MessagingPreferences {
    const message = createBaseMessagingPreferences();
    message.mute = object.mute ?? false;
    message.archive = object.archive ?? false;
    message.notificationTypes = Object.entries(object.notificationTypes ?? {}).reduce<{ [key: string]: boolean }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.Boolean(value);
        }
        return acc;
      },
      {},
    );
    message.quietHours = object.quietHours?.map((e) => e) || [];
    message.timezone = object.timezone ?? "";
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    message.productId = object.productId ?? "";
    message.campaignId = object.campaignId ?? "";
    message.talentId = object.talentId ?? "";
    return message;
  },
};

function createBaseMessagingPreferences_NotificationTypesEntry(): MessagingPreferences_NotificationTypesEntry {
  return { key: "", value: false };
}

export const MessagingPreferences_NotificationTypesEntry: MessageFns<MessagingPreferences_NotificationTypesEntry> = {
  encode(
    message: MessagingPreferences_NotificationTypesEntry,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== false) {
      writer.uint32(16).bool(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MessagingPreferences_NotificationTypesEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessagingPreferences_NotificationTypesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.value = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MessagingPreferences_NotificationTypesEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.Boolean(object.value) : false,
    };
  },

  toJSON(message: MessagingPreferences_NotificationTypesEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== false) {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MessagingPreferences_NotificationTypesEntry>, I>>(
    base?: I,
  ): MessagingPreferences_NotificationTypesEntry {
    return MessagingPreferences_NotificationTypesEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MessagingPreferences_NotificationTypesEntry>, I>>(
    object: I,
  ): MessagingPreferences_NotificationTypesEntry {
    const message = createBaseMessagingPreferences_NotificationTypesEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? false;
    return message;
  },
};

function createBaseUpdateMessagingPreferencesRequest(): UpdateMessagingPreferencesRequest {
  return { userId: "", preferences: undefined, productId: "", campaignId: "", talentId: "" };
}

export const UpdateMessagingPreferencesRequest: MessageFns<UpdateMessagingPreferencesRequest> = {
  encode(message: UpdateMessagingPreferencesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.preferences !== undefined) {
      MessagingPreferences.encode(message.preferences, writer.uint32(18).fork()).join();
    }
    if (message.productId !== "") {
      writer.uint32(26).string(message.productId);
    }
    if (message.campaignId !== "") {
      writer.uint32(34).string(message.campaignId);
    }
    if (message.talentId !== "") {
      writer.uint32(42).string(message.talentId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateMessagingPreferencesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateMessagingPreferencesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.preferences = MessagingPreferences.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.productId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.campaignId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.talentId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateMessagingPreferencesRequest {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      preferences: isSet(object.preferences) ? MessagingPreferences.fromJSON(object.preferences) : undefined,
      productId: isSet(object.productId) ? globalThis.String(object.productId) : "",
      campaignId: isSet(object.campaignId) ? globalThis.String(object.campaignId) : "",
      talentId: isSet(object.talentId) ? globalThis.String(object.talentId) : "",
    };
  },

  toJSON(message: UpdateMessagingPreferencesRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.preferences !== undefined) {
      obj.preferences = MessagingPreferences.toJSON(message.preferences);
    }
    if (message.productId !== "") {
      obj.productId = message.productId;
    }
    if (message.campaignId !== "") {
      obj.campaignId = message.campaignId;
    }
    if (message.talentId !== "") {
      obj.talentId = message.talentId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateMessagingPreferencesRequest>, I>>(
    base?: I,
  ): UpdateMessagingPreferencesRequest {
    return UpdateMessagingPreferencesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateMessagingPreferencesRequest>, I>>(
    object: I,
  ): UpdateMessagingPreferencesRequest {
    const message = createBaseUpdateMessagingPreferencesRequest();
    message.userId = object.userId ?? "";
    message.preferences = (object.preferences !== undefined && object.preferences !== null)
      ? MessagingPreferences.fromPartial(object.preferences)
      : undefined;
    message.productId = object.productId ?? "";
    message.campaignId = object.campaignId ?? "";
    message.talentId = object.talentId ?? "";
    return message;
  },
};

function createBaseUpdateMessagingPreferencesResponse(): UpdateMessagingPreferencesResponse {
  return { preferences: undefined, updatedAt: "0" };
}

export const UpdateMessagingPreferencesResponse: MessageFns<UpdateMessagingPreferencesResponse> = {
  encode(message: UpdateMessagingPreferencesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.preferences !== undefined) {
      MessagingPreferences.encode(message.preferences, writer.uint32(10).fork()).join();
    }
    if (message.updatedAt !== "0") {
      writer.uint32(16).int64(message.updatedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateMessagingPreferencesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateMessagingPreferencesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.preferences = MessagingPreferences.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.updatedAt = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateMessagingPreferencesResponse {
    return {
      preferences: isSet(object.preferences) ? MessagingPreferences.fromJSON(object.preferences) : undefined,
      updatedAt: isSet(object.updatedAt) ? globalThis.String(object.updatedAt) : "0",
    };
  },

  toJSON(message: UpdateMessagingPreferencesResponse): unknown {
    const obj: any = {};
    if (message.preferences !== undefined) {
      obj.preferences = MessagingPreferences.toJSON(message.preferences);
    }
    if (message.updatedAt !== "0") {
      obj.updatedAt = message.updatedAt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateMessagingPreferencesResponse>, I>>(
    base?: I,
  ): UpdateMessagingPreferencesResponse {
    return UpdateMessagingPreferencesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateMessagingPreferencesResponse>, I>>(
    object: I,
  ): UpdateMessagingPreferencesResponse {
    const message = createBaseUpdateMessagingPreferencesResponse();
    message.preferences = (object.preferences !== undefined && object.preferences !== null)
      ? MessagingPreferences.fromPartial(object.preferences)
      : undefined;
    message.updatedAt = object.updatedAt ?? "0";
    return message;
  },
};

function createBaseListMessageEventsRequest(): ListMessageEventsRequest {
  return {
    userId: "",
    page: 0,
    pageSize: 0,
    filters: undefined,
    metadata: undefined,
    productId: "",
    campaignId: "",
    talentId: "",
  };
}

export const ListMessageEventsRequest: MessageFns<ListMessageEventsRequest> = {
  encode(message: ListMessageEventsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.page !== 0) {
      writer.uint32(16).int32(message.page);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.filters !== undefined) {
      Metadata.encode(message.filters, writer.uint32(34).fork()).join();
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(42).fork()).join();
    }
    if (message.productId !== "") {
      writer.uint32(50).string(message.productId);
    }
    if (message.campaignId !== "") {
      writer.uint32(58).string(message.campaignId);
    }
    if (message.talentId !== "") {
      writer.uint32(66).string(message.talentId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListMessageEventsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListMessageEventsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.page = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.filters = Metadata.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.productId = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.campaignId = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.talentId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListMessageEventsRequest {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      filters: isSet(object.filters) ? Metadata.fromJSON(object.filters) : undefined,
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
      productId: isSet(object.productId) ? globalThis.String(object.productId) : "",
      campaignId: isSet(object.campaignId) ? globalThis.String(object.campaignId) : "",
      talentId: isSet(object.talentId) ? globalThis.String(object.talentId) : "",
    };
  },

  toJSON(message: ListMessageEventsRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.filters !== undefined) {
      obj.filters = Metadata.toJSON(message.filters);
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    if (message.productId !== "") {
      obj.productId = message.productId;
    }
    if (message.campaignId !== "") {
      obj.campaignId = message.campaignId;
    }
    if (message.talentId !== "") {
      obj.talentId = message.talentId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListMessageEventsRequest>, I>>(base?: I): ListMessageEventsRequest {
    return ListMessageEventsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListMessageEventsRequest>, I>>(object: I): ListMessageEventsRequest {
    const message = createBaseListMessageEventsRequest();
    message.userId = object.userId ?? "";
    message.page = object.page ?? 0;
    message.pageSize = object.pageSize ?? 0;
    message.filters = (object.filters !== undefined && object.filters !== null)
      ? Metadata.fromPartial(object.filters)
      : undefined;
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    message.productId = object.productId ?? "";
    message.campaignId = object.campaignId ?? "";
    message.talentId = object.talentId ?? "";
    return message;
  },
};

function createBaseListMessageEventsResponse(): ListMessageEventsResponse {
  return { events: [], totalCount: 0, page: 0, totalPages: 0 };
}

export const ListMessageEventsResponse: MessageFns<ListMessageEventsResponse> = {
  encode(message: ListMessageEventsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.events) {
      MessageEvent.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.totalCount !== 0) {
      writer.uint32(16).int32(message.totalCount);
    }
    if (message.page !== 0) {
      writer.uint32(24).int32(message.page);
    }
    if (message.totalPages !== 0) {
      writer.uint32(32).int32(message.totalPages);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListMessageEventsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListMessageEventsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.events.push(MessageEvent.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.totalCount = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.page = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.totalPages = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListMessageEventsResponse {
    return {
      events: globalThis.Array.isArray(object?.events) ? object.events.map((e: any) => MessageEvent.fromJSON(e)) : [],
      totalCount: isSet(object.totalCount) ? globalThis.Number(object.totalCount) : 0,
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      totalPages: isSet(object.totalPages) ? globalThis.Number(object.totalPages) : 0,
    };
  },

  toJSON(message: ListMessageEventsResponse): unknown {
    const obj: any = {};
    if (message.events?.length) {
      obj.events = message.events.map((e) => MessageEvent.toJSON(e));
    }
    if (message.totalCount !== 0) {
      obj.totalCount = Math.round(message.totalCount);
    }
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.totalPages !== 0) {
      obj.totalPages = Math.round(message.totalPages);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListMessageEventsResponse>, I>>(base?: I): ListMessageEventsResponse {
    return ListMessageEventsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListMessageEventsResponse>, I>>(object: I): ListMessageEventsResponse {
    const message = createBaseListMessageEventsResponse();
    message.events = object.events?.map((e) => MessageEvent.fromPartial(e)) || [];
    message.totalCount = object.totalCount ?? 0;
    message.page = object.page ?? 0;
    message.totalPages = object.totalPages ?? 0;
    return message;
  },
};

/** --- Messaging Service: Robust, Extensible, Real-Time --- */
export interface MessagingService {
  /** --- Direct & Group Messaging --- */
  SendMessage(request: SendMessageRequest): Promise<SendMessageResponse>;
  SendGroupMessage(request: SendGroupMessageRequest): Promise<SendGroupMessageResponse>;
  EditMessage(request: EditMessageRequest): Promise<EditMessageResponse>;
  DeleteMessage(request: DeleteMessageRequest): Promise<DeleteMessageResponse>;
  ReactToMessage(request: ReactToMessageRequest): Promise<ReactToMessageResponse>;
  /** --- Retrieval --- */
  GetMessage(request: GetMessageRequest): Promise<GetMessageResponse>;
  ListMessages(request: ListMessagesRequest): Promise<ListMessagesResponse>;
  ListThreads(request: ListThreadsRequest): Promise<ListThreadsResponse>;
  ListConversations(request: ListConversationsRequest): Promise<ListConversationsResponse>;
  /** --- Real-Time Streaming --- */
  StreamMessages(request: StreamMessagesRequest): Observable<MessageEvent>;
  StreamTyping(request: StreamTypingRequest): Observable<TypingEvent>;
  StreamPresence(request: StreamPresenceRequest): Observable<PresenceEvent>;
  /** --- Read/Delivery/Ack --- */
  MarkAsRead(request: MarkAsReadRequest): Promise<MarkAsReadResponse>;
  MarkAsDelivered(request: MarkAsDeliveredRequest): Promise<MarkAsDeliveredResponse>;
  AcknowledgeMessage(request: AcknowledgeMessageRequest): Promise<AcknowledgeMessageResponse>;
  /** --- Group Management --- */
  CreateChatGroup(request: CreateChatGroupRequest): Promise<CreateChatGroupResponse>;
  AddChatGroupMember(request: AddChatGroupMemberRequest): Promise<AddChatGroupMemberResponse>;
  RemoveChatGroupMember(request: RemoveChatGroupMemberRequest): Promise<RemoveChatGroupMemberResponse>;
  ListChatGroupMembers(request: ListChatGroupMembersRequest): Promise<ListChatGroupMembersResponse>;
  /** --- Preferences --- */
  UpdateMessagingPreferences(request: UpdateMessagingPreferencesRequest): Promise<UpdateMessagingPreferencesResponse>;
  /** --- Analytics/Events --- */
  ListMessageEvents(request: ListMessageEventsRequest): Promise<ListMessageEventsResponse>;
}

export const MessagingServiceServiceName = "messaging.v1.MessagingService";
export class MessagingServiceClientImpl implements MessagingService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || MessagingServiceServiceName;
    this.rpc = rpc;
    this.SendMessage = this.SendMessage.bind(this);
    this.SendGroupMessage = this.SendGroupMessage.bind(this);
    this.EditMessage = this.EditMessage.bind(this);
    this.DeleteMessage = this.DeleteMessage.bind(this);
    this.ReactToMessage = this.ReactToMessage.bind(this);
    this.GetMessage = this.GetMessage.bind(this);
    this.ListMessages = this.ListMessages.bind(this);
    this.ListThreads = this.ListThreads.bind(this);
    this.ListConversations = this.ListConversations.bind(this);
    this.StreamMessages = this.StreamMessages.bind(this);
    this.StreamTyping = this.StreamTyping.bind(this);
    this.StreamPresence = this.StreamPresence.bind(this);
    this.MarkAsRead = this.MarkAsRead.bind(this);
    this.MarkAsDelivered = this.MarkAsDelivered.bind(this);
    this.AcknowledgeMessage = this.AcknowledgeMessage.bind(this);
    this.CreateChatGroup = this.CreateChatGroup.bind(this);
    this.AddChatGroupMember = this.AddChatGroupMember.bind(this);
    this.RemoveChatGroupMember = this.RemoveChatGroupMember.bind(this);
    this.ListChatGroupMembers = this.ListChatGroupMembers.bind(this);
    this.UpdateMessagingPreferences = this.UpdateMessagingPreferences.bind(this);
    this.ListMessageEvents = this.ListMessageEvents.bind(this);
  }
  SendMessage(request: SendMessageRequest): Promise<SendMessageResponse> {
    const data = SendMessageRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "SendMessage", data);
    return promise.then((data) => SendMessageResponse.decode(new BinaryReader(data)));
  }

  SendGroupMessage(request: SendGroupMessageRequest): Promise<SendGroupMessageResponse> {
    const data = SendGroupMessageRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "SendGroupMessage", data);
    return promise.then((data) => SendGroupMessageResponse.decode(new BinaryReader(data)));
  }

  EditMessage(request: EditMessageRequest): Promise<EditMessageResponse> {
    const data = EditMessageRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "EditMessage", data);
    return promise.then((data) => EditMessageResponse.decode(new BinaryReader(data)));
  }

  DeleteMessage(request: DeleteMessageRequest): Promise<DeleteMessageResponse> {
    const data = DeleteMessageRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "DeleteMessage", data);
    return promise.then((data) => DeleteMessageResponse.decode(new BinaryReader(data)));
  }

  ReactToMessage(request: ReactToMessageRequest): Promise<ReactToMessageResponse> {
    const data = ReactToMessageRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ReactToMessage", data);
    return promise.then((data) => ReactToMessageResponse.decode(new BinaryReader(data)));
  }

  GetMessage(request: GetMessageRequest): Promise<GetMessageResponse> {
    const data = GetMessageRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetMessage", data);
    return promise.then((data) => GetMessageResponse.decode(new BinaryReader(data)));
  }

  ListMessages(request: ListMessagesRequest): Promise<ListMessagesResponse> {
    const data = ListMessagesRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ListMessages", data);
    return promise.then((data) => ListMessagesResponse.decode(new BinaryReader(data)));
  }

  ListThreads(request: ListThreadsRequest): Promise<ListThreadsResponse> {
    const data = ListThreadsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ListThreads", data);
    return promise.then((data) => ListThreadsResponse.decode(new BinaryReader(data)));
  }

  ListConversations(request: ListConversationsRequest): Promise<ListConversationsResponse> {
    const data = ListConversationsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ListConversations", data);
    return promise.then((data) => ListConversationsResponse.decode(new BinaryReader(data)));
  }

  StreamMessages(request: StreamMessagesRequest): Observable<MessageEvent> {
    const data = StreamMessagesRequest.encode(request).finish();
    const result = this.rpc.serverStreamingRequest(this.service, "StreamMessages", data);
    return result.pipe(map((data) => MessageEvent.decode(new BinaryReader(data))));
  }

  StreamTyping(request: StreamTypingRequest): Observable<TypingEvent> {
    const data = StreamTypingRequest.encode(request).finish();
    const result = this.rpc.serverStreamingRequest(this.service, "StreamTyping", data);
    return result.pipe(map((data) => TypingEvent.decode(new BinaryReader(data))));
  }

  StreamPresence(request: StreamPresenceRequest): Observable<PresenceEvent> {
    const data = StreamPresenceRequest.encode(request).finish();
    const result = this.rpc.serverStreamingRequest(this.service, "StreamPresence", data);
    return result.pipe(map((data) => PresenceEvent.decode(new BinaryReader(data))));
  }

  MarkAsRead(request: MarkAsReadRequest): Promise<MarkAsReadResponse> {
    const data = MarkAsReadRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "MarkAsRead", data);
    return promise.then((data) => MarkAsReadResponse.decode(new BinaryReader(data)));
  }

  MarkAsDelivered(request: MarkAsDeliveredRequest): Promise<MarkAsDeliveredResponse> {
    const data = MarkAsDeliveredRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "MarkAsDelivered", data);
    return promise.then((data) => MarkAsDeliveredResponse.decode(new BinaryReader(data)));
  }

  AcknowledgeMessage(request: AcknowledgeMessageRequest): Promise<AcknowledgeMessageResponse> {
    const data = AcknowledgeMessageRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "AcknowledgeMessage", data);
    return promise.then((data) => AcknowledgeMessageResponse.decode(new BinaryReader(data)));
  }

  CreateChatGroup(request: CreateChatGroupRequest): Promise<CreateChatGroupResponse> {
    const data = CreateChatGroupRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateChatGroup", data);
    return promise.then((data) => CreateChatGroupResponse.decode(new BinaryReader(data)));
  }

  AddChatGroupMember(request: AddChatGroupMemberRequest): Promise<AddChatGroupMemberResponse> {
    const data = AddChatGroupMemberRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "AddChatGroupMember", data);
    return promise.then((data) => AddChatGroupMemberResponse.decode(new BinaryReader(data)));
  }

  RemoveChatGroupMember(request: RemoveChatGroupMemberRequest): Promise<RemoveChatGroupMemberResponse> {
    const data = RemoveChatGroupMemberRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "RemoveChatGroupMember", data);
    return promise.then((data) => RemoveChatGroupMemberResponse.decode(new BinaryReader(data)));
  }

  ListChatGroupMembers(request: ListChatGroupMembersRequest): Promise<ListChatGroupMembersResponse> {
    const data = ListChatGroupMembersRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ListChatGroupMembers", data);
    return promise.then((data) => ListChatGroupMembersResponse.decode(new BinaryReader(data)));
  }

  UpdateMessagingPreferences(request: UpdateMessagingPreferencesRequest): Promise<UpdateMessagingPreferencesResponse> {
    const data = UpdateMessagingPreferencesRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateMessagingPreferences", data);
    return promise.then((data) => UpdateMessagingPreferencesResponse.decode(new BinaryReader(data)));
  }

  ListMessageEvents(request: ListMessageEventsRequest): Promise<ListMessageEventsResponse> {
    const data = ListMessageEventsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ListMessageEvents", data);
    return promise.then((data) => ListMessageEventsResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
  clientStreamingRequest(service: string, method: string, data: Observable<Uint8Array>): Promise<Uint8Array>;
  serverStreamingRequest(service: string, method: string, data: Uint8Array): Observable<Uint8Array>;
  bidirectionalStreamingRequest(service: string, method: string, data: Observable<Uint8Array>): Observable<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000).toString();
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (globalThis.Number(t.seconds) || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
