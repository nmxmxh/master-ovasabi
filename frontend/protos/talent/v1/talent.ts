// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v5.29.3
// source: talent/v1/talent.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Metadata } from "../../common/v1/metadata";

export const protobufPackage = "talent.v1";

export interface TalentProfile {
  id: string;
  /** Internal integer ID reference to master table */
  masterId: string;
  /** Global UUID reference to master table */
  masterUuid: string;
  userId: string;
  displayName: string;
  bio: string;
  skills: string[];
  tags: string[];
  location: string;
  avatarUrl: string;
  experiences: Experience[];
  educations: Education[];
  createdAt: string;
  updatedAt: string;
  metadata?:
    | Metadata
    | undefined;
  /** campaign/tenant context */
  campaignId: string;
}

export interface Experience {
  company: string;
  title: string;
  description: string;
  startDate: string;
  endDate: string;
  metadata?: Metadata | undefined;
}

export interface Education {
  institution: string;
  degree: string;
  fieldOfStudy: string;
  startDate: string;
  endDate: string;
  metadata?: Metadata | undefined;
}

export interface Booking {
  id: string;
  talentId: string;
  userId: string;
  status: string;
  startTime: string;
  endTime: string;
  notes: string;
  createdAt: string;
  metadata?: Metadata | undefined;
  campaignId: string;
}

export interface CreateTalentProfileRequest {
  profile?: TalentProfile | undefined;
  campaignId: string;
}

export interface CreateTalentProfileResponse {
  profile?: TalentProfile | undefined;
  campaignId: string;
}

export interface UpdateTalentProfileRequest {
  profile?: TalentProfile | undefined;
  campaignId: string;
}

export interface UpdateTalentProfileResponse {
  profile?: TalentProfile | undefined;
  campaignId: string;
}

export interface DeleteTalentProfileRequest {
  profileId: string;
  campaignId: string;
}

export interface DeleteTalentProfileResponse {
  success: boolean;
  campaignId: string;
}

export interface GetTalentProfileRequest {
  profileId: string;
  campaignId: string;
}

export interface GetTalentProfileResponse {
  profile?: TalentProfile | undefined;
  campaignId: string;
}

export interface ListTalentProfilesRequest {
  page: number;
  pageSize: number;
  skills: string[];
  tags: string[];
  location: string;
  campaignId: string;
}

export interface ListTalentProfilesResponse {
  profiles: TalentProfile[];
  totalCount: number;
  page: number;
  totalPages: number;
  campaignId: string;
}

export interface SearchTalentProfilesRequest {
  query: string;
  page: number;
  pageSize: number;
  skills: string[];
  tags: string[];
  location: string;
  campaignId: string;
}

export interface SearchTalentProfilesResponse {
  profiles: TalentProfile[];
  totalCount: number;
  page: number;
  totalPages: number;
  campaignId: string;
}

export interface BookTalentRequest {
  talentId: string;
  userId: string;
  startTime: string;
  endTime: string;
  notes: string;
  metadata?: Metadata | undefined;
  campaignId: string;
}

export interface BookTalentResponse {
  booking?: Booking | undefined;
  campaignId: string;
}

export interface ListBookingsRequest {
  userId: string;
  page: number;
  pageSize: number;
  campaignId: string;
}

export interface ListBookingsResponse {
  bookings: Booking[];
  totalCount: number;
  page: number;
  totalPages: number;
  campaignId: string;
}

function createBaseTalentProfile(): TalentProfile {
  return {
    id: "",
    masterId: "0",
    masterUuid: "",
    userId: "",
    displayName: "",
    bio: "",
    skills: [],
    tags: [],
    location: "",
    avatarUrl: "",
    experiences: [],
    educations: [],
    createdAt: "0",
    updatedAt: "0",
    metadata: undefined,
    campaignId: "0",
  };
}

export const TalentProfile: MessageFns<TalentProfile> = {
  encode(message: TalentProfile, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.masterId !== "0") {
      writer.uint32(16).int64(message.masterId);
    }
    if (message.masterUuid !== "") {
      writer.uint32(74).string(message.masterUuid);
    }
    if (message.userId !== "") {
      writer.uint32(26).string(message.userId);
    }
    if (message.displayName !== "") {
      writer.uint32(34).string(message.displayName);
    }
    if (message.bio !== "") {
      writer.uint32(42).string(message.bio);
    }
    for (const v of message.skills) {
      writer.uint32(50).string(v!);
    }
    for (const v of message.tags) {
      writer.uint32(58).string(v!);
    }
    if (message.location !== "") {
      writer.uint32(66).string(message.location);
    }
    if (message.avatarUrl !== "") {
      writer.uint32(82).string(message.avatarUrl);
    }
    for (const v of message.experiences) {
      Experience.encode(v!, writer.uint32(90).fork()).join();
    }
    for (const v of message.educations) {
      Education.encode(v!, writer.uint32(98).fork()).join();
    }
    if (message.createdAt !== "0") {
      writer.uint32(104).int64(message.createdAt);
    }
    if (message.updatedAt !== "0") {
      writer.uint32(112).int64(message.updatedAt);
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(122).fork()).join();
    }
    if (message.campaignId !== "0") {
      writer.uint32(128).int64(message.campaignId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TalentProfile {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTalentProfile();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.masterId = reader.int64().toString();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.masterUuid = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.displayName = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.bio = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.skills.push(reader.string());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.tags.push(reader.string());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.location = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.avatarUrl = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.experiences.push(Experience.decode(reader, reader.uint32()));
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.educations.push(Education.decode(reader, reader.uint32()));
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.createdAt = reader.int64().toString();
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.updatedAt = reader.int64().toString();
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.campaignId = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TalentProfile {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      masterId: isSet(object.masterId) ? globalThis.String(object.masterId) : "0",
      masterUuid: isSet(object.masterUuid) ? globalThis.String(object.masterUuid) : "",
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      bio: isSet(object.bio) ? globalThis.String(object.bio) : "",
      skills: globalThis.Array.isArray(object?.skills) ? object.skills.map((e: any) => globalThis.String(e)) : [],
      tags: globalThis.Array.isArray(object?.tags) ? object.tags.map((e: any) => globalThis.String(e)) : [],
      location: isSet(object.location) ? globalThis.String(object.location) : "",
      avatarUrl: isSet(object.avatarUrl) ? globalThis.String(object.avatarUrl) : "",
      experiences: globalThis.Array.isArray(object?.experiences)
        ? object.experiences.map((e: any) => Experience.fromJSON(e))
        : [],
      educations: globalThis.Array.isArray(object?.educations)
        ? object.educations.map((e: any) => Education.fromJSON(e))
        : [],
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "0",
      updatedAt: isSet(object.updatedAt) ? globalThis.String(object.updatedAt) : "0",
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
      campaignId: isSet(object.campaignId) ? globalThis.String(object.campaignId) : "0",
    };
  },

  toJSON(message: TalentProfile): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.masterId !== "0") {
      obj.masterId = message.masterId;
    }
    if (message.masterUuid !== "") {
      obj.masterUuid = message.masterUuid;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.bio !== "") {
      obj.bio = message.bio;
    }
    if (message.skills?.length) {
      obj.skills = message.skills;
    }
    if (message.tags?.length) {
      obj.tags = message.tags;
    }
    if (message.location !== "") {
      obj.location = message.location;
    }
    if (message.avatarUrl !== "") {
      obj.avatarUrl = message.avatarUrl;
    }
    if (message.experiences?.length) {
      obj.experiences = message.experiences.map((e) => Experience.toJSON(e));
    }
    if (message.educations?.length) {
      obj.educations = message.educations.map((e) => Education.toJSON(e));
    }
    if (message.createdAt !== "0") {
      obj.createdAt = message.createdAt;
    }
    if (message.updatedAt !== "0") {
      obj.updatedAt = message.updatedAt;
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    if (message.campaignId !== "0") {
      obj.campaignId = message.campaignId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TalentProfile>, I>>(base?: I): TalentProfile {
    return TalentProfile.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TalentProfile>, I>>(object: I): TalentProfile {
    const message = createBaseTalentProfile();
    message.id = object.id ?? "";
    message.masterId = object.masterId ?? "0";
    message.masterUuid = object.masterUuid ?? "";
    message.userId = object.userId ?? "";
    message.displayName = object.displayName ?? "";
    message.bio = object.bio ?? "";
    message.skills = object.skills?.map((e) => e) || [];
    message.tags = object.tags?.map((e) => e) || [];
    message.location = object.location ?? "";
    message.avatarUrl = object.avatarUrl ?? "";
    message.experiences = object.experiences?.map((e) => Experience.fromPartial(e)) || [];
    message.educations = object.educations?.map((e) => Education.fromPartial(e)) || [];
    message.createdAt = object.createdAt ?? "0";
    message.updatedAt = object.updatedAt ?? "0";
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    message.campaignId = object.campaignId ?? "0";
    return message;
  },
};

function createBaseExperience(): Experience {
  return { company: "", title: "", description: "", startDate: "0", endDate: "0", metadata: undefined };
}

export const Experience: MessageFns<Experience> = {
  encode(message: Experience, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.company !== "") {
      writer.uint32(10).string(message.company);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.startDate !== "0") {
      writer.uint32(32).int64(message.startDate);
    }
    if (message.endDate !== "0") {
      writer.uint32(40).int64(message.endDate);
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Experience {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExperience();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.company = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.startDate = reader.int64().toString();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.endDate = reader.int64().toString();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Experience {
    return {
      company: isSet(object.company) ? globalThis.String(object.company) : "",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      startDate: isSet(object.startDate) ? globalThis.String(object.startDate) : "0",
      endDate: isSet(object.endDate) ? globalThis.String(object.endDate) : "0",
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
    };
  },

  toJSON(message: Experience): unknown {
    const obj: any = {};
    if (message.company !== "") {
      obj.company = message.company;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.startDate !== "0") {
      obj.startDate = message.startDate;
    }
    if (message.endDate !== "0") {
      obj.endDate = message.endDate;
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Experience>, I>>(base?: I): Experience {
    return Experience.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Experience>, I>>(object: I): Experience {
    const message = createBaseExperience();
    message.company = object.company ?? "";
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.startDate = object.startDate ?? "0";
    message.endDate = object.endDate ?? "0";
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    return message;
  },
};

function createBaseEducation(): Education {
  return { institution: "", degree: "", fieldOfStudy: "", startDate: "0", endDate: "0", metadata: undefined };
}

export const Education: MessageFns<Education> = {
  encode(message: Education, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.institution !== "") {
      writer.uint32(10).string(message.institution);
    }
    if (message.degree !== "") {
      writer.uint32(18).string(message.degree);
    }
    if (message.fieldOfStudy !== "") {
      writer.uint32(26).string(message.fieldOfStudy);
    }
    if (message.startDate !== "0") {
      writer.uint32(32).int64(message.startDate);
    }
    if (message.endDate !== "0") {
      writer.uint32(40).int64(message.endDate);
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Education {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEducation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.institution = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.degree = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.fieldOfStudy = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.startDate = reader.int64().toString();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.endDate = reader.int64().toString();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Education {
    return {
      institution: isSet(object.institution) ? globalThis.String(object.institution) : "",
      degree: isSet(object.degree) ? globalThis.String(object.degree) : "",
      fieldOfStudy: isSet(object.fieldOfStudy) ? globalThis.String(object.fieldOfStudy) : "",
      startDate: isSet(object.startDate) ? globalThis.String(object.startDate) : "0",
      endDate: isSet(object.endDate) ? globalThis.String(object.endDate) : "0",
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
    };
  },

  toJSON(message: Education): unknown {
    const obj: any = {};
    if (message.institution !== "") {
      obj.institution = message.institution;
    }
    if (message.degree !== "") {
      obj.degree = message.degree;
    }
    if (message.fieldOfStudy !== "") {
      obj.fieldOfStudy = message.fieldOfStudy;
    }
    if (message.startDate !== "0") {
      obj.startDate = message.startDate;
    }
    if (message.endDate !== "0") {
      obj.endDate = message.endDate;
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Education>, I>>(base?: I): Education {
    return Education.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Education>, I>>(object: I): Education {
    const message = createBaseEducation();
    message.institution = object.institution ?? "";
    message.degree = object.degree ?? "";
    message.fieldOfStudy = object.fieldOfStudy ?? "";
    message.startDate = object.startDate ?? "0";
    message.endDate = object.endDate ?? "0";
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    return message;
  },
};

function createBaseBooking(): Booking {
  return {
    id: "",
    talentId: "",
    userId: "",
    status: "",
    startTime: "0",
    endTime: "0",
    notes: "",
    createdAt: "0",
    metadata: undefined,
    campaignId: "0",
  };
}

export const Booking: MessageFns<Booking> = {
  encode(message: Booking, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.talentId !== "") {
      writer.uint32(18).string(message.talentId);
    }
    if (message.userId !== "") {
      writer.uint32(26).string(message.userId);
    }
    if (message.status !== "") {
      writer.uint32(34).string(message.status);
    }
    if (message.startTime !== "0") {
      writer.uint32(40).int64(message.startTime);
    }
    if (message.endTime !== "0") {
      writer.uint32(48).int64(message.endTime);
    }
    if (message.notes !== "") {
      writer.uint32(58).string(message.notes);
    }
    if (message.createdAt !== "0") {
      writer.uint32(64).int64(message.createdAt);
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(74).fork()).join();
    }
    if (message.campaignId !== "0") {
      writer.uint32(80).int64(message.campaignId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Booking {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBooking();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.talentId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.startTime = reader.int64().toString();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.endTime = reader.int64().toString();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.notes = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.createdAt = reader.int64().toString();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.campaignId = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Booking {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      talentId: isSet(object.talentId) ? globalThis.String(object.talentId) : "",
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      startTime: isSet(object.startTime) ? globalThis.String(object.startTime) : "0",
      endTime: isSet(object.endTime) ? globalThis.String(object.endTime) : "0",
      notes: isSet(object.notes) ? globalThis.String(object.notes) : "",
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "0",
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
      campaignId: isSet(object.campaignId) ? globalThis.String(object.campaignId) : "0",
    };
  },

  toJSON(message: Booking): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.talentId !== "") {
      obj.talentId = message.talentId;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.startTime !== "0") {
      obj.startTime = message.startTime;
    }
    if (message.endTime !== "0") {
      obj.endTime = message.endTime;
    }
    if (message.notes !== "") {
      obj.notes = message.notes;
    }
    if (message.createdAt !== "0") {
      obj.createdAt = message.createdAt;
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    if (message.campaignId !== "0") {
      obj.campaignId = message.campaignId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Booking>, I>>(base?: I): Booking {
    return Booking.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Booking>, I>>(object: I): Booking {
    const message = createBaseBooking();
    message.id = object.id ?? "";
    message.talentId = object.talentId ?? "";
    message.userId = object.userId ?? "";
    message.status = object.status ?? "";
    message.startTime = object.startTime ?? "0";
    message.endTime = object.endTime ?? "0";
    message.notes = object.notes ?? "";
    message.createdAt = object.createdAt ?? "0";
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    message.campaignId = object.campaignId ?? "0";
    return message;
  },
};

function createBaseCreateTalentProfileRequest(): CreateTalentProfileRequest {
  return { profile: undefined, campaignId: "0" };
}

export const CreateTalentProfileRequest: MessageFns<CreateTalentProfileRequest> = {
  encode(message: CreateTalentProfileRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.profile !== undefined) {
      TalentProfile.encode(message.profile, writer.uint32(10).fork()).join();
    }
    if (message.campaignId !== "0") {
      writer.uint32(16).int64(message.campaignId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateTalentProfileRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateTalentProfileRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.profile = TalentProfile.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.campaignId = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateTalentProfileRequest {
    return {
      profile: isSet(object.profile) ? TalentProfile.fromJSON(object.profile) : undefined,
      campaignId: isSet(object.campaignId) ? globalThis.String(object.campaignId) : "0",
    };
  },

  toJSON(message: CreateTalentProfileRequest): unknown {
    const obj: any = {};
    if (message.profile !== undefined) {
      obj.profile = TalentProfile.toJSON(message.profile);
    }
    if (message.campaignId !== "0") {
      obj.campaignId = message.campaignId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateTalentProfileRequest>, I>>(base?: I): CreateTalentProfileRequest {
    return CreateTalentProfileRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateTalentProfileRequest>, I>>(object: I): CreateTalentProfileRequest {
    const message = createBaseCreateTalentProfileRequest();
    message.profile = (object.profile !== undefined && object.profile !== null)
      ? TalentProfile.fromPartial(object.profile)
      : undefined;
    message.campaignId = object.campaignId ?? "0";
    return message;
  },
};

function createBaseCreateTalentProfileResponse(): CreateTalentProfileResponse {
  return { profile: undefined, campaignId: "0" };
}

export const CreateTalentProfileResponse: MessageFns<CreateTalentProfileResponse> = {
  encode(message: CreateTalentProfileResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.profile !== undefined) {
      TalentProfile.encode(message.profile, writer.uint32(10).fork()).join();
    }
    if (message.campaignId !== "0") {
      writer.uint32(16).int64(message.campaignId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateTalentProfileResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateTalentProfileResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.profile = TalentProfile.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.campaignId = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateTalentProfileResponse {
    return {
      profile: isSet(object.profile) ? TalentProfile.fromJSON(object.profile) : undefined,
      campaignId: isSet(object.campaignId) ? globalThis.String(object.campaignId) : "0",
    };
  },

  toJSON(message: CreateTalentProfileResponse): unknown {
    const obj: any = {};
    if (message.profile !== undefined) {
      obj.profile = TalentProfile.toJSON(message.profile);
    }
    if (message.campaignId !== "0") {
      obj.campaignId = message.campaignId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateTalentProfileResponse>, I>>(base?: I): CreateTalentProfileResponse {
    return CreateTalentProfileResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateTalentProfileResponse>, I>>(object: I): CreateTalentProfileResponse {
    const message = createBaseCreateTalentProfileResponse();
    message.profile = (object.profile !== undefined && object.profile !== null)
      ? TalentProfile.fromPartial(object.profile)
      : undefined;
    message.campaignId = object.campaignId ?? "0";
    return message;
  },
};

function createBaseUpdateTalentProfileRequest(): UpdateTalentProfileRequest {
  return { profile: undefined, campaignId: "0" };
}

export const UpdateTalentProfileRequest: MessageFns<UpdateTalentProfileRequest> = {
  encode(message: UpdateTalentProfileRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.profile !== undefined) {
      TalentProfile.encode(message.profile, writer.uint32(10).fork()).join();
    }
    if (message.campaignId !== "0") {
      writer.uint32(16).int64(message.campaignId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateTalentProfileRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateTalentProfileRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.profile = TalentProfile.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.campaignId = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateTalentProfileRequest {
    return {
      profile: isSet(object.profile) ? TalentProfile.fromJSON(object.profile) : undefined,
      campaignId: isSet(object.campaignId) ? globalThis.String(object.campaignId) : "0",
    };
  },

  toJSON(message: UpdateTalentProfileRequest): unknown {
    const obj: any = {};
    if (message.profile !== undefined) {
      obj.profile = TalentProfile.toJSON(message.profile);
    }
    if (message.campaignId !== "0") {
      obj.campaignId = message.campaignId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateTalentProfileRequest>, I>>(base?: I): UpdateTalentProfileRequest {
    return UpdateTalentProfileRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateTalentProfileRequest>, I>>(object: I): UpdateTalentProfileRequest {
    const message = createBaseUpdateTalentProfileRequest();
    message.profile = (object.profile !== undefined && object.profile !== null)
      ? TalentProfile.fromPartial(object.profile)
      : undefined;
    message.campaignId = object.campaignId ?? "0";
    return message;
  },
};

function createBaseUpdateTalentProfileResponse(): UpdateTalentProfileResponse {
  return { profile: undefined, campaignId: "0" };
}

export const UpdateTalentProfileResponse: MessageFns<UpdateTalentProfileResponse> = {
  encode(message: UpdateTalentProfileResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.profile !== undefined) {
      TalentProfile.encode(message.profile, writer.uint32(10).fork()).join();
    }
    if (message.campaignId !== "0") {
      writer.uint32(16).int64(message.campaignId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateTalentProfileResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateTalentProfileResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.profile = TalentProfile.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.campaignId = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateTalentProfileResponse {
    return {
      profile: isSet(object.profile) ? TalentProfile.fromJSON(object.profile) : undefined,
      campaignId: isSet(object.campaignId) ? globalThis.String(object.campaignId) : "0",
    };
  },

  toJSON(message: UpdateTalentProfileResponse): unknown {
    const obj: any = {};
    if (message.profile !== undefined) {
      obj.profile = TalentProfile.toJSON(message.profile);
    }
    if (message.campaignId !== "0") {
      obj.campaignId = message.campaignId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateTalentProfileResponse>, I>>(base?: I): UpdateTalentProfileResponse {
    return UpdateTalentProfileResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateTalentProfileResponse>, I>>(object: I): UpdateTalentProfileResponse {
    const message = createBaseUpdateTalentProfileResponse();
    message.profile = (object.profile !== undefined && object.profile !== null)
      ? TalentProfile.fromPartial(object.profile)
      : undefined;
    message.campaignId = object.campaignId ?? "0";
    return message;
  },
};

function createBaseDeleteTalentProfileRequest(): DeleteTalentProfileRequest {
  return { profileId: "", campaignId: "0" };
}

export const DeleteTalentProfileRequest: MessageFns<DeleteTalentProfileRequest> = {
  encode(message: DeleteTalentProfileRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.profileId !== "") {
      writer.uint32(10).string(message.profileId);
    }
    if (message.campaignId !== "0") {
      writer.uint32(16).int64(message.campaignId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteTalentProfileRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteTalentProfileRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.profileId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.campaignId = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteTalentProfileRequest {
    return {
      profileId: isSet(object.profileId) ? globalThis.String(object.profileId) : "",
      campaignId: isSet(object.campaignId) ? globalThis.String(object.campaignId) : "0",
    };
  },

  toJSON(message: DeleteTalentProfileRequest): unknown {
    const obj: any = {};
    if (message.profileId !== "") {
      obj.profileId = message.profileId;
    }
    if (message.campaignId !== "0") {
      obj.campaignId = message.campaignId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteTalentProfileRequest>, I>>(base?: I): DeleteTalentProfileRequest {
    return DeleteTalentProfileRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteTalentProfileRequest>, I>>(object: I): DeleteTalentProfileRequest {
    const message = createBaseDeleteTalentProfileRequest();
    message.profileId = object.profileId ?? "";
    message.campaignId = object.campaignId ?? "0";
    return message;
  },
};

function createBaseDeleteTalentProfileResponse(): DeleteTalentProfileResponse {
  return { success: false, campaignId: "0" };
}

export const DeleteTalentProfileResponse: MessageFns<DeleteTalentProfileResponse> = {
  encode(message: DeleteTalentProfileResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.campaignId !== "0") {
      writer.uint32(16).int64(message.campaignId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteTalentProfileResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteTalentProfileResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.campaignId = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteTalentProfileResponse {
    return {
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
      campaignId: isSet(object.campaignId) ? globalThis.String(object.campaignId) : "0",
    };
  },

  toJSON(message: DeleteTalentProfileResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.campaignId !== "0") {
      obj.campaignId = message.campaignId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteTalentProfileResponse>, I>>(base?: I): DeleteTalentProfileResponse {
    return DeleteTalentProfileResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteTalentProfileResponse>, I>>(object: I): DeleteTalentProfileResponse {
    const message = createBaseDeleteTalentProfileResponse();
    message.success = object.success ?? false;
    message.campaignId = object.campaignId ?? "0";
    return message;
  },
};

function createBaseGetTalentProfileRequest(): GetTalentProfileRequest {
  return { profileId: "", campaignId: "0" };
}

export const GetTalentProfileRequest: MessageFns<GetTalentProfileRequest> = {
  encode(message: GetTalentProfileRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.profileId !== "") {
      writer.uint32(10).string(message.profileId);
    }
    if (message.campaignId !== "0") {
      writer.uint32(16).int64(message.campaignId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetTalentProfileRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTalentProfileRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.profileId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.campaignId = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetTalentProfileRequest {
    return {
      profileId: isSet(object.profileId) ? globalThis.String(object.profileId) : "",
      campaignId: isSet(object.campaignId) ? globalThis.String(object.campaignId) : "0",
    };
  },

  toJSON(message: GetTalentProfileRequest): unknown {
    const obj: any = {};
    if (message.profileId !== "") {
      obj.profileId = message.profileId;
    }
    if (message.campaignId !== "0") {
      obj.campaignId = message.campaignId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetTalentProfileRequest>, I>>(base?: I): GetTalentProfileRequest {
    return GetTalentProfileRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetTalentProfileRequest>, I>>(object: I): GetTalentProfileRequest {
    const message = createBaseGetTalentProfileRequest();
    message.profileId = object.profileId ?? "";
    message.campaignId = object.campaignId ?? "0";
    return message;
  },
};

function createBaseGetTalentProfileResponse(): GetTalentProfileResponse {
  return { profile: undefined, campaignId: "0" };
}

export const GetTalentProfileResponse: MessageFns<GetTalentProfileResponse> = {
  encode(message: GetTalentProfileResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.profile !== undefined) {
      TalentProfile.encode(message.profile, writer.uint32(10).fork()).join();
    }
    if (message.campaignId !== "0") {
      writer.uint32(16).int64(message.campaignId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetTalentProfileResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTalentProfileResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.profile = TalentProfile.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.campaignId = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetTalentProfileResponse {
    return {
      profile: isSet(object.profile) ? TalentProfile.fromJSON(object.profile) : undefined,
      campaignId: isSet(object.campaignId) ? globalThis.String(object.campaignId) : "0",
    };
  },

  toJSON(message: GetTalentProfileResponse): unknown {
    const obj: any = {};
    if (message.profile !== undefined) {
      obj.profile = TalentProfile.toJSON(message.profile);
    }
    if (message.campaignId !== "0") {
      obj.campaignId = message.campaignId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetTalentProfileResponse>, I>>(base?: I): GetTalentProfileResponse {
    return GetTalentProfileResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetTalentProfileResponse>, I>>(object: I): GetTalentProfileResponse {
    const message = createBaseGetTalentProfileResponse();
    message.profile = (object.profile !== undefined && object.profile !== null)
      ? TalentProfile.fromPartial(object.profile)
      : undefined;
    message.campaignId = object.campaignId ?? "0";
    return message;
  },
};

function createBaseListTalentProfilesRequest(): ListTalentProfilesRequest {
  return { page: 0, pageSize: 0, skills: [], tags: [], location: "", campaignId: "0" };
}

export const ListTalentProfilesRequest: MessageFns<ListTalentProfilesRequest> = {
  encode(message: ListTalentProfilesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.page !== 0) {
      writer.uint32(8).int32(message.page);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    for (const v of message.skills) {
      writer.uint32(26).string(v!);
    }
    for (const v of message.tags) {
      writer.uint32(34).string(v!);
    }
    if (message.location !== "") {
      writer.uint32(42).string(message.location);
    }
    if (message.campaignId !== "0") {
      writer.uint32(48).int64(message.campaignId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListTalentProfilesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListTalentProfilesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.page = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.skills.push(reader.string());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.tags.push(reader.string());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.location = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.campaignId = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListTalentProfilesRequest {
    return {
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      skills: globalThis.Array.isArray(object?.skills) ? object.skills.map((e: any) => globalThis.String(e)) : [],
      tags: globalThis.Array.isArray(object?.tags) ? object.tags.map((e: any) => globalThis.String(e)) : [],
      location: isSet(object.location) ? globalThis.String(object.location) : "",
      campaignId: isSet(object.campaignId) ? globalThis.String(object.campaignId) : "0",
    };
  },

  toJSON(message: ListTalentProfilesRequest): unknown {
    const obj: any = {};
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.skills?.length) {
      obj.skills = message.skills;
    }
    if (message.tags?.length) {
      obj.tags = message.tags;
    }
    if (message.location !== "") {
      obj.location = message.location;
    }
    if (message.campaignId !== "0") {
      obj.campaignId = message.campaignId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListTalentProfilesRequest>, I>>(base?: I): ListTalentProfilesRequest {
    return ListTalentProfilesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListTalentProfilesRequest>, I>>(object: I): ListTalentProfilesRequest {
    const message = createBaseListTalentProfilesRequest();
    message.page = object.page ?? 0;
    message.pageSize = object.pageSize ?? 0;
    message.skills = object.skills?.map((e) => e) || [];
    message.tags = object.tags?.map((e) => e) || [];
    message.location = object.location ?? "";
    message.campaignId = object.campaignId ?? "0";
    return message;
  },
};

function createBaseListTalentProfilesResponse(): ListTalentProfilesResponse {
  return { profiles: [], totalCount: 0, page: 0, totalPages: 0, campaignId: "0" };
}

export const ListTalentProfilesResponse: MessageFns<ListTalentProfilesResponse> = {
  encode(message: ListTalentProfilesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.profiles) {
      TalentProfile.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.totalCount !== 0) {
      writer.uint32(16).int32(message.totalCount);
    }
    if (message.page !== 0) {
      writer.uint32(24).int32(message.page);
    }
    if (message.totalPages !== 0) {
      writer.uint32(32).int32(message.totalPages);
    }
    if (message.campaignId !== "0") {
      writer.uint32(40).int64(message.campaignId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListTalentProfilesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListTalentProfilesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.profiles.push(TalentProfile.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.totalCount = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.page = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.totalPages = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.campaignId = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListTalentProfilesResponse {
    return {
      profiles: globalThis.Array.isArray(object?.profiles)
        ? object.profiles.map((e: any) => TalentProfile.fromJSON(e))
        : [],
      totalCount: isSet(object.totalCount) ? globalThis.Number(object.totalCount) : 0,
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      totalPages: isSet(object.totalPages) ? globalThis.Number(object.totalPages) : 0,
      campaignId: isSet(object.campaignId) ? globalThis.String(object.campaignId) : "0",
    };
  },

  toJSON(message: ListTalentProfilesResponse): unknown {
    const obj: any = {};
    if (message.profiles?.length) {
      obj.profiles = message.profiles.map((e) => TalentProfile.toJSON(e));
    }
    if (message.totalCount !== 0) {
      obj.totalCount = Math.round(message.totalCount);
    }
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.totalPages !== 0) {
      obj.totalPages = Math.round(message.totalPages);
    }
    if (message.campaignId !== "0") {
      obj.campaignId = message.campaignId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListTalentProfilesResponse>, I>>(base?: I): ListTalentProfilesResponse {
    return ListTalentProfilesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListTalentProfilesResponse>, I>>(object: I): ListTalentProfilesResponse {
    const message = createBaseListTalentProfilesResponse();
    message.profiles = object.profiles?.map((e) => TalentProfile.fromPartial(e)) || [];
    message.totalCount = object.totalCount ?? 0;
    message.page = object.page ?? 0;
    message.totalPages = object.totalPages ?? 0;
    message.campaignId = object.campaignId ?? "0";
    return message;
  },
};

function createBaseSearchTalentProfilesRequest(): SearchTalentProfilesRequest {
  return { query: "", page: 0, pageSize: 0, skills: [], tags: [], location: "", campaignId: "0" };
}

export const SearchTalentProfilesRequest: MessageFns<SearchTalentProfilesRequest> = {
  encode(message: SearchTalentProfilesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.query !== "") {
      writer.uint32(10).string(message.query);
    }
    if (message.page !== 0) {
      writer.uint32(16).int32(message.page);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    for (const v of message.skills) {
      writer.uint32(34).string(v!);
    }
    for (const v of message.tags) {
      writer.uint32(42).string(v!);
    }
    if (message.location !== "") {
      writer.uint32(50).string(message.location);
    }
    if (message.campaignId !== "0") {
      writer.uint32(56).int64(message.campaignId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchTalentProfilesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchTalentProfilesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.query = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.page = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.skills.push(reader.string());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.tags.push(reader.string());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.location = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.campaignId = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchTalentProfilesRequest {
    return {
      query: isSet(object.query) ? globalThis.String(object.query) : "",
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      skills: globalThis.Array.isArray(object?.skills) ? object.skills.map((e: any) => globalThis.String(e)) : [],
      tags: globalThis.Array.isArray(object?.tags) ? object.tags.map((e: any) => globalThis.String(e)) : [],
      location: isSet(object.location) ? globalThis.String(object.location) : "",
      campaignId: isSet(object.campaignId) ? globalThis.String(object.campaignId) : "0",
    };
  },

  toJSON(message: SearchTalentProfilesRequest): unknown {
    const obj: any = {};
    if (message.query !== "") {
      obj.query = message.query;
    }
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.skills?.length) {
      obj.skills = message.skills;
    }
    if (message.tags?.length) {
      obj.tags = message.tags;
    }
    if (message.location !== "") {
      obj.location = message.location;
    }
    if (message.campaignId !== "0") {
      obj.campaignId = message.campaignId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SearchTalentProfilesRequest>, I>>(base?: I): SearchTalentProfilesRequest {
    return SearchTalentProfilesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SearchTalentProfilesRequest>, I>>(object: I): SearchTalentProfilesRequest {
    const message = createBaseSearchTalentProfilesRequest();
    message.query = object.query ?? "";
    message.page = object.page ?? 0;
    message.pageSize = object.pageSize ?? 0;
    message.skills = object.skills?.map((e) => e) || [];
    message.tags = object.tags?.map((e) => e) || [];
    message.location = object.location ?? "";
    message.campaignId = object.campaignId ?? "0";
    return message;
  },
};

function createBaseSearchTalentProfilesResponse(): SearchTalentProfilesResponse {
  return { profiles: [], totalCount: 0, page: 0, totalPages: 0, campaignId: "0" };
}

export const SearchTalentProfilesResponse: MessageFns<SearchTalentProfilesResponse> = {
  encode(message: SearchTalentProfilesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.profiles) {
      TalentProfile.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.totalCount !== 0) {
      writer.uint32(16).int32(message.totalCount);
    }
    if (message.page !== 0) {
      writer.uint32(24).int32(message.page);
    }
    if (message.totalPages !== 0) {
      writer.uint32(32).int32(message.totalPages);
    }
    if (message.campaignId !== "0") {
      writer.uint32(40).int64(message.campaignId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SearchTalentProfilesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchTalentProfilesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.profiles.push(TalentProfile.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.totalCount = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.page = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.totalPages = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.campaignId = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchTalentProfilesResponse {
    return {
      profiles: globalThis.Array.isArray(object?.profiles)
        ? object.profiles.map((e: any) => TalentProfile.fromJSON(e))
        : [],
      totalCount: isSet(object.totalCount) ? globalThis.Number(object.totalCount) : 0,
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      totalPages: isSet(object.totalPages) ? globalThis.Number(object.totalPages) : 0,
      campaignId: isSet(object.campaignId) ? globalThis.String(object.campaignId) : "0",
    };
  },

  toJSON(message: SearchTalentProfilesResponse): unknown {
    const obj: any = {};
    if (message.profiles?.length) {
      obj.profiles = message.profiles.map((e) => TalentProfile.toJSON(e));
    }
    if (message.totalCount !== 0) {
      obj.totalCount = Math.round(message.totalCount);
    }
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.totalPages !== 0) {
      obj.totalPages = Math.round(message.totalPages);
    }
    if (message.campaignId !== "0") {
      obj.campaignId = message.campaignId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SearchTalentProfilesResponse>, I>>(base?: I): SearchTalentProfilesResponse {
    return SearchTalentProfilesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SearchTalentProfilesResponse>, I>>(object: I): SearchTalentProfilesResponse {
    const message = createBaseSearchTalentProfilesResponse();
    message.profiles = object.profiles?.map((e) => TalentProfile.fromPartial(e)) || [];
    message.totalCount = object.totalCount ?? 0;
    message.page = object.page ?? 0;
    message.totalPages = object.totalPages ?? 0;
    message.campaignId = object.campaignId ?? "0";
    return message;
  },
};

function createBaseBookTalentRequest(): BookTalentRequest {
  return { talentId: "", userId: "", startTime: "0", endTime: "0", notes: "", metadata: undefined, campaignId: "0" };
}

export const BookTalentRequest: MessageFns<BookTalentRequest> = {
  encode(message: BookTalentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.talentId !== "") {
      writer.uint32(10).string(message.talentId);
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    if (message.startTime !== "0") {
      writer.uint32(24).int64(message.startTime);
    }
    if (message.endTime !== "0") {
      writer.uint32(32).int64(message.endTime);
    }
    if (message.notes !== "") {
      writer.uint32(42).string(message.notes);
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(50).fork()).join();
    }
    if (message.campaignId !== "0") {
      writer.uint32(56).int64(message.campaignId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BookTalentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBookTalentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.talentId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.startTime = reader.int64().toString();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.endTime = reader.int64().toString();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.notes = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.campaignId = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BookTalentRequest {
    return {
      talentId: isSet(object.talentId) ? globalThis.String(object.talentId) : "",
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      startTime: isSet(object.startTime) ? globalThis.String(object.startTime) : "0",
      endTime: isSet(object.endTime) ? globalThis.String(object.endTime) : "0",
      notes: isSet(object.notes) ? globalThis.String(object.notes) : "",
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
      campaignId: isSet(object.campaignId) ? globalThis.String(object.campaignId) : "0",
    };
  },

  toJSON(message: BookTalentRequest): unknown {
    const obj: any = {};
    if (message.talentId !== "") {
      obj.talentId = message.talentId;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.startTime !== "0") {
      obj.startTime = message.startTime;
    }
    if (message.endTime !== "0") {
      obj.endTime = message.endTime;
    }
    if (message.notes !== "") {
      obj.notes = message.notes;
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    if (message.campaignId !== "0") {
      obj.campaignId = message.campaignId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BookTalentRequest>, I>>(base?: I): BookTalentRequest {
    return BookTalentRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BookTalentRequest>, I>>(object: I): BookTalentRequest {
    const message = createBaseBookTalentRequest();
    message.talentId = object.talentId ?? "";
    message.userId = object.userId ?? "";
    message.startTime = object.startTime ?? "0";
    message.endTime = object.endTime ?? "0";
    message.notes = object.notes ?? "";
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    message.campaignId = object.campaignId ?? "0";
    return message;
  },
};

function createBaseBookTalentResponse(): BookTalentResponse {
  return { booking: undefined, campaignId: "0" };
}

export const BookTalentResponse: MessageFns<BookTalentResponse> = {
  encode(message: BookTalentResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.booking !== undefined) {
      Booking.encode(message.booking, writer.uint32(10).fork()).join();
    }
    if (message.campaignId !== "0") {
      writer.uint32(16).int64(message.campaignId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BookTalentResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBookTalentResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.booking = Booking.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.campaignId = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BookTalentResponse {
    return {
      booking: isSet(object.booking) ? Booking.fromJSON(object.booking) : undefined,
      campaignId: isSet(object.campaignId) ? globalThis.String(object.campaignId) : "0",
    };
  },

  toJSON(message: BookTalentResponse): unknown {
    const obj: any = {};
    if (message.booking !== undefined) {
      obj.booking = Booking.toJSON(message.booking);
    }
    if (message.campaignId !== "0") {
      obj.campaignId = message.campaignId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BookTalentResponse>, I>>(base?: I): BookTalentResponse {
    return BookTalentResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BookTalentResponse>, I>>(object: I): BookTalentResponse {
    const message = createBaseBookTalentResponse();
    message.booking = (object.booking !== undefined && object.booking !== null)
      ? Booking.fromPartial(object.booking)
      : undefined;
    message.campaignId = object.campaignId ?? "0";
    return message;
  },
};

function createBaseListBookingsRequest(): ListBookingsRequest {
  return { userId: "", page: 0, pageSize: 0, campaignId: "0" };
}

export const ListBookingsRequest: MessageFns<ListBookingsRequest> = {
  encode(message: ListBookingsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.page !== 0) {
      writer.uint32(16).int32(message.page);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.campaignId !== "0") {
      writer.uint32(32).int64(message.campaignId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListBookingsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListBookingsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.page = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.campaignId = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListBookingsRequest {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      campaignId: isSet(object.campaignId) ? globalThis.String(object.campaignId) : "0",
    };
  },

  toJSON(message: ListBookingsRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.campaignId !== "0") {
      obj.campaignId = message.campaignId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListBookingsRequest>, I>>(base?: I): ListBookingsRequest {
    return ListBookingsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListBookingsRequest>, I>>(object: I): ListBookingsRequest {
    const message = createBaseListBookingsRequest();
    message.userId = object.userId ?? "";
    message.page = object.page ?? 0;
    message.pageSize = object.pageSize ?? 0;
    message.campaignId = object.campaignId ?? "0";
    return message;
  },
};

function createBaseListBookingsResponse(): ListBookingsResponse {
  return { bookings: [], totalCount: 0, page: 0, totalPages: 0, campaignId: "0" };
}

export const ListBookingsResponse: MessageFns<ListBookingsResponse> = {
  encode(message: ListBookingsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.bookings) {
      Booking.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.totalCount !== 0) {
      writer.uint32(16).int32(message.totalCount);
    }
    if (message.page !== 0) {
      writer.uint32(24).int32(message.page);
    }
    if (message.totalPages !== 0) {
      writer.uint32(32).int32(message.totalPages);
    }
    if (message.campaignId !== "0") {
      writer.uint32(40).int64(message.campaignId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListBookingsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListBookingsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.bookings.push(Booking.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.totalCount = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.page = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.totalPages = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.campaignId = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListBookingsResponse {
    return {
      bookings: globalThis.Array.isArray(object?.bookings) ? object.bookings.map((e: any) => Booking.fromJSON(e)) : [],
      totalCount: isSet(object.totalCount) ? globalThis.Number(object.totalCount) : 0,
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      totalPages: isSet(object.totalPages) ? globalThis.Number(object.totalPages) : 0,
      campaignId: isSet(object.campaignId) ? globalThis.String(object.campaignId) : "0",
    };
  },

  toJSON(message: ListBookingsResponse): unknown {
    const obj: any = {};
    if (message.bookings?.length) {
      obj.bookings = message.bookings.map((e) => Booking.toJSON(e));
    }
    if (message.totalCount !== 0) {
      obj.totalCount = Math.round(message.totalCount);
    }
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.totalPages !== 0) {
      obj.totalPages = Math.round(message.totalPages);
    }
    if (message.campaignId !== "0") {
      obj.campaignId = message.campaignId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListBookingsResponse>, I>>(base?: I): ListBookingsResponse {
    return ListBookingsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListBookingsResponse>, I>>(object: I): ListBookingsResponse {
    const message = createBaseListBookingsResponse();
    message.bookings = object.bookings?.map((e) => Booking.fromPartial(e)) || [];
    message.totalCount = object.totalCount ?? 0;
    message.page = object.page ?? 0;
    message.totalPages = object.totalPages ?? 0;
    message.campaignId = object.campaignId ?? "0";
    return message;
  },
};

export interface TalentService {
  CreateTalentProfile(request: CreateTalentProfileRequest): Promise<CreateTalentProfileResponse>;
  UpdateTalentProfile(request: UpdateTalentProfileRequest): Promise<UpdateTalentProfileResponse>;
  DeleteTalentProfile(request: DeleteTalentProfileRequest): Promise<DeleteTalentProfileResponse>;
  GetTalentProfile(request: GetTalentProfileRequest): Promise<GetTalentProfileResponse>;
  ListTalentProfiles(request: ListTalentProfilesRequest): Promise<ListTalentProfilesResponse>;
  SearchTalentProfiles(request: SearchTalentProfilesRequest): Promise<SearchTalentProfilesResponse>;
  BookTalent(request: BookTalentRequest): Promise<BookTalentResponse>;
  ListBookings(request: ListBookingsRequest): Promise<ListBookingsResponse>;
}

export const TalentServiceServiceName = "talent.v1.TalentService";
export class TalentServiceClientImpl implements TalentService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || TalentServiceServiceName;
    this.rpc = rpc;
    this.CreateTalentProfile = this.CreateTalentProfile.bind(this);
    this.UpdateTalentProfile = this.UpdateTalentProfile.bind(this);
    this.DeleteTalentProfile = this.DeleteTalentProfile.bind(this);
    this.GetTalentProfile = this.GetTalentProfile.bind(this);
    this.ListTalentProfiles = this.ListTalentProfiles.bind(this);
    this.SearchTalentProfiles = this.SearchTalentProfiles.bind(this);
    this.BookTalent = this.BookTalent.bind(this);
    this.ListBookings = this.ListBookings.bind(this);
  }
  CreateTalentProfile(request: CreateTalentProfileRequest): Promise<CreateTalentProfileResponse> {
    const data = CreateTalentProfileRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateTalentProfile", data);
    return promise.then((data) => CreateTalentProfileResponse.decode(new BinaryReader(data)));
  }

  UpdateTalentProfile(request: UpdateTalentProfileRequest): Promise<UpdateTalentProfileResponse> {
    const data = UpdateTalentProfileRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateTalentProfile", data);
    return promise.then((data) => UpdateTalentProfileResponse.decode(new BinaryReader(data)));
  }

  DeleteTalentProfile(request: DeleteTalentProfileRequest): Promise<DeleteTalentProfileResponse> {
    const data = DeleteTalentProfileRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "DeleteTalentProfile", data);
    return promise.then((data) => DeleteTalentProfileResponse.decode(new BinaryReader(data)));
  }

  GetTalentProfile(request: GetTalentProfileRequest): Promise<GetTalentProfileResponse> {
    const data = GetTalentProfileRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetTalentProfile", data);
    return promise.then((data) => GetTalentProfileResponse.decode(new BinaryReader(data)));
  }

  ListTalentProfiles(request: ListTalentProfilesRequest): Promise<ListTalentProfilesResponse> {
    const data = ListTalentProfilesRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ListTalentProfiles", data);
    return promise.then((data) => ListTalentProfilesResponse.decode(new BinaryReader(data)));
  }

  SearchTalentProfiles(request: SearchTalentProfilesRequest): Promise<SearchTalentProfilesResponse> {
    const data = SearchTalentProfilesRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "SearchTalentProfiles", data);
    return promise.then((data) => SearchTalentProfilesResponse.decode(new BinaryReader(data)));
  }

  BookTalent(request: BookTalentRequest): Promise<BookTalentResponse> {
    const data = BookTalentRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "BookTalent", data);
    return promise.then((data) => BookTalentResponse.decode(new BinaryReader(data)));
  }

  ListBookings(request: ListBookingsRequest): Promise<ListBookingsResponse> {
    const data = ListBookingsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ListBookings", data);
    return promise.then((data) => ListBookingsResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
