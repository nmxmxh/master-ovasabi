// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v5.29.3
// source: campaign/v1/campaign.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Metadata } from "../../common/v1/metadata";
import { Timestamp } from "../../google/protobuf/timestamp";

export const protobufPackage = "campaign.v1";

export interface Campaign {
  id: number;
  slug: string;
  title: string;
  description: string;
  rankingFormula: string;
  startDate?: Date | undefined;
  endDate?: Date | undefined;
  status: string;
  /** Robust, extensible metadata */
  metadata?: Metadata | undefined;
  createdAt?: Date | undefined;
  updatedAt?:
    | Date
    | undefined;
  /** Global UUID reference to master table */
  masterUuid: string;
  /** Internal integer ID reference to master table */
  masterId: string;
  /** User ID of the campaign owner */
  ownerId: string;
}

export interface CreateCampaignRequest {
  slug: string;
  title: string;
  description: string;
  rankingFormula: string;
  startDate?: Date | undefined;
  endDate?: Date | undefined;
  metadata?:
    | Metadata
    | undefined;
  /** User ID of the campaign owner */
  ownerId: string;
}

export interface CreateCampaignResponse {
  campaign?: Campaign | undefined;
}

export interface GetCampaignRequest {
  slug: string;
}

export interface GetCampaignResponse {
  campaign?: Campaign | undefined;
}

export interface UpdateCampaignRequest {
  campaign?: Campaign | undefined;
}

export interface UpdateCampaignResponse {
  campaign?: Campaign | undefined;
}

export interface DeleteCampaignRequest {
  id: number;
  slug: string;
}

export interface DeleteCampaignResponse {
  success: boolean;
}

export interface ListCampaignsRequest {
  page: number;
  pageSize: number;
}

export interface ListCampaignsResponse {
  campaigns: Campaign[];
}

function createBaseCampaign(): Campaign {
  return {
    id: 0,
    slug: "",
    title: "",
    description: "",
    rankingFormula: "",
    startDate: undefined,
    endDate: undefined,
    status: "",
    metadata: undefined,
    createdAt: undefined,
    updatedAt: undefined,
    masterUuid: "",
    masterId: "0",
    ownerId: "",
  };
}

export const Campaign: MessageFns<Campaign> = {
  encode(message: Campaign, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.slug !== "") {
      writer.uint32(18).string(message.slug);
    }
    if (message.title !== "") {
      writer.uint32(26).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(34).string(message.description);
    }
    if (message.rankingFormula !== "") {
      writer.uint32(42).string(message.rankingFormula);
    }
    if (message.startDate !== undefined) {
      Timestamp.encode(toTimestamp(message.startDate), writer.uint32(50).fork()).join();
    }
    if (message.endDate !== undefined) {
      Timestamp.encode(toTimestamp(message.endDate), writer.uint32(58).fork()).join();
    }
    if (message.status !== "") {
      writer.uint32(66).string(message.status);
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(74).fork()).join();
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(82).fork()).join();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.updatedAt), writer.uint32(90).fork()).join();
    }
    if (message.masterUuid !== "") {
      writer.uint32(98).string(message.masterUuid);
    }
    if (message.masterId !== "0") {
      writer.uint32(104).int64(message.masterId);
    }
    if (message.ownerId !== "") {
      writer.uint32(114).string(message.ownerId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Campaign {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCampaign();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.slug = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.rankingFormula = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.startDate = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.endDate = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.updatedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.masterUuid = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.masterId = reader.int64().toString();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.ownerId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Campaign {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      slug: isSet(object.slug) ? globalThis.String(object.slug) : "",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      rankingFormula: isSet(object.rankingFormula) ? globalThis.String(object.rankingFormula) : "",
      startDate: isSet(object.startDate) ? fromJsonTimestamp(object.startDate) : undefined,
      endDate: isSet(object.endDate) ? fromJsonTimestamp(object.endDate) : undefined,
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
      masterUuid: isSet(object.masterUuid) ? globalThis.String(object.masterUuid) : "",
      masterId: isSet(object.masterId) ? globalThis.String(object.masterId) : "0",
      ownerId: isSet(object.ownerId) ? globalThis.String(object.ownerId) : "",
    };
  },

  toJSON(message: Campaign): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.slug !== "") {
      obj.slug = message.slug;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.rankingFormula !== "") {
      obj.rankingFormula = message.rankingFormula;
    }
    if (message.startDate !== undefined) {
      obj.startDate = message.startDate.toISOString();
    }
    if (message.endDate !== undefined) {
      obj.endDate = message.endDate.toISOString();
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = message.updatedAt.toISOString();
    }
    if (message.masterUuid !== "") {
      obj.masterUuid = message.masterUuid;
    }
    if (message.masterId !== "0") {
      obj.masterId = message.masterId;
    }
    if (message.ownerId !== "") {
      obj.ownerId = message.ownerId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Campaign>, I>>(base?: I): Campaign {
    return Campaign.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Campaign>, I>>(object: I): Campaign {
    const message = createBaseCampaign();
    message.id = object.id ?? 0;
    message.slug = object.slug ?? "";
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.rankingFormula = object.rankingFormula ?? "";
    message.startDate = object.startDate ?? undefined;
    message.endDate = object.endDate ?? undefined;
    message.status = object.status ?? "";
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    message.createdAt = object.createdAt ?? undefined;
    message.updatedAt = object.updatedAt ?? undefined;
    message.masterUuid = object.masterUuid ?? "";
    message.masterId = object.masterId ?? "0";
    message.ownerId = object.ownerId ?? "";
    return message;
  },
};

function createBaseCreateCampaignRequest(): CreateCampaignRequest {
  return {
    slug: "",
    title: "",
    description: "",
    rankingFormula: "",
    startDate: undefined,
    endDate: undefined,
    metadata: undefined,
    ownerId: "",
  };
}

export const CreateCampaignRequest: MessageFns<CreateCampaignRequest> = {
  encode(message: CreateCampaignRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.slug !== "") {
      writer.uint32(10).string(message.slug);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.rankingFormula !== "") {
      writer.uint32(34).string(message.rankingFormula);
    }
    if (message.startDate !== undefined) {
      Timestamp.encode(toTimestamp(message.startDate), writer.uint32(42).fork()).join();
    }
    if (message.endDate !== undefined) {
      Timestamp.encode(toTimestamp(message.endDate), writer.uint32(50).fork()).join();
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(58).fork()).join();
    }
    if (message.ownerId !== "") {
      writer.uint32(66).string(message.ownerId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateCampaignRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateCampaignRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.slug = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.rankingFormula = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.startDate = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.endDate = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.ownerId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateCampaignRequest {
    return {
      slug: isSet(object.slug) ? globalThis.String(object.slug) : "",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      rankingFormula: isSet(object.rankingFormula) ? globalThis.String(object.rankingFormula) : "",
      startDate: isSet(object.startDate) ? fromJsonTimestamp(object.startDate) : undefined,
      endDate: isSet(object.endDate) ? fromJsonTimestamp(object.endDate) : undefined,
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
      ownerId: isSet(object.ownerId) ? globalThis.String(object.ownerId) : "",
    };
  },

  toJSON(message: CreateCampaignRequest): unknown {
    const obj: any = {};
    if (message.slug !== "") {
      obj.slug = message.slug;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.rankingFormula !== "") {
      obj.rankingFormula = message.rankingFormula;
    }
    if (message.startDate !== undefined) {
      obj.startDate = message.startDate.toISOString();
    }
    if (message.endDate !== undefined) {
      obj.endDate = message.endDate.toISOString();
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    if (message.ownerId !== "") {
      obj.ownerId = message.ownerId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateCampaignRequest>, I>>(base?: I): CreateCampaignRequest {
    return CreateCampaignRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateCampaignRequest>, I>>(object: I): CreateCampaignRequest {
    const message = createBaseCreateCampaignRequest();
    message.slug = object.slug ?? "";
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.rankingFormula = object.rankingFormula ?? "";
    message.startDate = object.startDate ?? undefined;
    message.endDate = object.endDate ?? undefined;
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    message.ownerId = object.ownerId ?? "";
    return message;
  },
};

function createBaseCreateCampaignResponse(): CreateCampaignResponse {
  return { campaign: undefined };
}

export const CreateCampaignResponse: MessageFns<CreateCampaignResponse> = {
  encode(message: CreateCampaignResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.campaign !== undefined) {
      Campaign.encode(message.campaign, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateCampaignResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateCampaignResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.campaign = Campaign.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateCampaignResponse {
    return { campaign: isSet(object.campaign) ? Campaign.fromJSON(object.campaign) : undefined };
  },

  toJSON(message: CreateCampaignResponse): unknown {
    const obj: any = {};
    if (message.campaign !== undefined) {
      obj.campaign = Campaign.toJSON(message.campaign);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateCampaignResponse>, I>>(base?: I): CreateCampaignResponse {
    return CreateCampaignResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateCampaignResponse>, I>>(object: I): CreateCampaignResponse {
    const message = createBaseCreateCampaignResponse();
    message.campaign = (object.campaign !== undefined && object.campaign !== null)
      ? Campaign.fromPartial(object.campaign)
      : undefined;
    return message;
  },
};

function createBaseGetCampaignRequest(): GetCampaignRequest {
  return { slug: "" };
}

export const GetCampaignRequest: MessageFns<GetCampaignRequest> = {
  encode(message: GetCampaignRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.slug !== "") {
      writer.uint32(10).string(message.slug);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCampaignRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCampaignRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.slug = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCampaignRequest {
    return { slug: isSet(object.slug) ? globalThis.String(object.slug) : "" };
  },

  toJSON(message: GetCampaignRequest): unknown {
    const obj: any = {};
    if (message.slug !== "") {
      obj.slug = message.slug;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetCampaignRequest>, I>>(base?: I): GetCampaignRequest {
    return GetCampaignRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetCampaignRequest>, I>>(object: I): GetCampaignRequest {
    const message = createBaseGetCampaignRequest();
    message.slug = object.slug ?? "";
    return message;
  },
};

function createBaseGetCampaignResponse(): GetCampaignResponse {
  return { campaign: undefined };
}

export const GetCampaignResponse: MessageFns<GetCampaignResponse> = {
  encode(message: GetCampaignResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.campaign !== undefined) {
      Campaign.encode(message.campaign, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCampaignResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCampaignResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.campaign = Campaign.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCampaignResponse {
    return { campaign: isSet(object.campaign) ? Campaign.fromJSON(object.campaign) : undefined };
  },

  toJSON(message: GetCampaignResponse): unknown {
    const obj: any = {};
    if (message.campaign !== undefined) {
      obj.campaign = Campaign.toJSON(message.campaign);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetCampaignResponse>, I>>(base?: I): GetCampaignResponse {
    return GetCampaignResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetCampaignResponse>, I>>(object: I): GetCampaignResponse {
    const message = createBaseGetCampaignResponse();
    message.campaign = (object.campaign !== undefined && object.campaign !== null)
      ? Campaign.fromPartial(object.campaign)
      : undefined;
    return message;
  },
};

function createBaseUpdateCampaignRequest(): UpdateCampaignRequest {
  return { campaign: undefined };
}

export const UpdateCampaignRequest: MessageFns<UpdateCampaignRequest> = {
  encode(message: UpdateCampaignRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.campaign !== undefined) {
      Campaign.encode(message.campaign, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateCampaignRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateCampaignRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.campaign = Campaign.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateCampaignRequest {
    return { campaign: isSet(object.campaign) ? Campaign.fromJSON(object.campaign) : undefined };
  },

  toJSON(message: UpdateCampaignRequest): unknown {
    const obj: any = {};
    if (message.campaign !== undefined) {
      obj.campaign = Campaign.toJSON(message.campaign);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateCampaignRequest>, I>>(base?: I): UpdateCampaignRequest {
    return UpdateCampaignRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateCampaignRequest>, I>>(object: I): UpdateCampaignRequest {
    const message = createBaseUpdateCampaignRequest();
    message.campaign = (object.campaign !== undefined && object.campaign !== null)
      ? Campaign.fromPartial(object.campaign)
      : undefined;
    return message;
  },
};

function createBaseUpdateCampaignResponse(): UpdateCampaignResponse {
  return { campaign: undefined };
}

export const UpdateCampaignResponse: MessageFns<UpdateCampaignResponse> = {
  encode(message: UpdateCampaignResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.campaign !== undefined) {
      Campaign.encode(message.campaign, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateCampaignResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateCampaignResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.campaign = Campaign.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateCampaignResponse {
    return { campaign: isSet(object.campaign) ? Campaign.fromJSON(object.campaign) : undefined };
  },

  toJSON(message: UpdateCampaignResponse): unknown {
    const obj: any = {};
    if (message.campaign !== undefined) {
      obj.campaign = Campaign.toJSON(message.campaign);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateCampaignResponse>, I>>(base?: I): UpdateCampaignResponse {
    return UpdateCampaignResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateCampaignResponse>, I>>(object: I): UpdateCampaignResponse {
    const message = createBaseUpdateCampaignResponse();
    message.campaign = (object.campaign !== undefined && object.campaign !== null)
      ? Campaign.fromPartial(object.campaign)
      : undefined;
    return message;
  },
};

function createBaseDeleteCampaignRequest(): DeleteCampaignRequest {
  return { id: 0, slug: "" };
}

export const DeleteCampaignRequest: MessageFns<DeleteCampaignRequest> = {
  encode(message: DeleteCampaignRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.slug !== "") {
      writer.uint32(18).string(message.slug);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteCampaignRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteCampaignRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.slug = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteCampaignRequest {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      slug: isSet(object.slug) ? globalThis.String(object.slug) : "",
    };
  },

  toJSON(message: DeleteCampaignRequest): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.slug !== "") {
      obj.slug = message.slug;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteCampaignRequest>, I>>(base?: I): DeleteCampaignRequest {
    return DeleteCampaignRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteCampaignRequest>, I>>(object: I): DeleteCampaignRequest {
    const message = createBaseDeleteCampaignRequest();
    message.id = object.id ?? 0;
    message.slug = object.slug ?? "";
    return message;
  },
};

function createBaseDeleteCampaignResponse(): DeleteCampaignResponse {
  return { success: false };
}

export const DeleteCampaignResponse: MessageFns<DeleteCampaignResponse> = {
  encode(message: DeleteCampaignResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteCampaignResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteCampaignResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteCampaignResponse {
    return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
  },

  toJSON(message: DeleteCampaignResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteCampaignResponse>, I>>(base?: I): DeleteCampaignResponse {
    return DeleteCampaignResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteCampaignResponse>, I>>(object: I): DeleteCampaignResponse {
    const message = createBaseDeleteCampaignResponse();
    message.success = object.success ?? false;
    return message;
  },
};

function createBaseListCampaignsRequest(): ListCampaignsRequest {
  return { page: 0, pageSize: 0 };
}

export const ListCampaignsRequest: MessageFns<ListCampaignsRequest> = {
  encode(message: ListCampaignsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.page !== 0) {
      writer.uint32(8).int32(message.page);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListCampaignsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListCampaignsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.page = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListCampaignsRequest {
    return {
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
    };
  },

  toJSON(message: ListCampaignsRequest): unknown {
    const obj: any = {};
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListCampaignsRequest>, I>>(base?: I): ListCampaignsRequest {
    return ListCampaignsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListCampaignsRequest>, I>>(object: I): ListCampaignsRequest {
    const message = createBaseListCampaignsRequest();
    message.page = object.page ?? 0;
    message.pageSize = object.pageSize ?? 0;
    return message;
  },
};

function createBaseListCampaignsResponse(): ListCampaignsResponse {
  return { campaigns: [] };
}

export const ListCampaignsResponse: MessageFns<ListCampaignsResponse> = {
  encode(message: ListCampaignsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.campaigns) {
      Campaign.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListCampaignsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListCampaignsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.campaigns.push(Campaign.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListCampaignsResponse {
    return {
      campaigns: globalThis.Array.isArray(object?.campaigns)
        ? object.campaigns.map((e: any) => Campaign.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ListCampaignsResponse): unknown {
    const obj: any = {};
    if (message.campaigns?.length) {
      obj.campaigns = message.campaigns.map((e) => Campaign.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListCampaignsResponse>, I>>(base?: I): ListCampaignsResponse {
    return ListCampaignsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListCampaignsResponse>, I>>(object: I): ListCampaignsResponse {
    const message = createBaseListCampaignsResponse();
    message.campaigns = object.campaigns?.map((e) => Campaign.fromPartial(e)) || [];
    return message;
  },
};

export interface CampaignService {
  CreateCampaign(request: CreateCampaignRequest): Promise<CreateCampaignResponse>;
  GetCampaign(request: GetCampaignRequest): Promise<GetCampaignResponse>;
  UpdateCampaign(request: UpdateCampaignRequest): Promise<UpdateCampaignResponse>;
  DeleteCampaign(request: DeleteCampaignRequest): Promise<DeleteCampaignResponse>;
  ListCampaigns(request: ListCampaignsRequest): Promise<ListCampaignsResponse>;
}

export const CampaignServiceServiceName = "campaign.v1.CampaignService";
export class CampaignServiceClientImpl implements CampaignService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || CampaignServiceServiceName;
    this.rpc = rpc;
    this.CreateCampaign = this.CreateCampaign.bind(this);
    this.GetCampaign = this.GetCampaign.bind(this);
    this.UpdateCampaign = this.UpdateCampaign.bind(this);
    this.DeleteCampaign = this.DeleteCampaign.bind(this);
    this.ListCampaigns = this.ListCampaigns.bind(this);
  }
  CreateCampaign(request: CreateCampaignRequest): Promise<CreateCampaignResponse> {
    const data = CreateCampaignRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateCampaign", data);
    return promise.then((data) => CreateCampaignResponse.decode(new BinaryReader(data)));
  }

  GetCampaign(request: GetCampaignRequest): Promise<GetCampaignResponse> {
    const data = GetCampaignRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetCampaign", data);
    return promise.then((data) => GetCampaignResponse.decode(new BinaryReader(data)));
  }

  UpdateCampaign(request: UpdateCampaignRequest): Promise<UpdateCampaignResponse> {
    const data = UpdateCampaignRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateCampaign", data);
    return promise.then((data) => UpdateCampaignResponse.decode(new BinaryReader(data)));
  }

  DeleteCampaign(request: DeleteCampaignRequest): Promise<DeleteCampaignResponse> {
    const data = DeleteCampaignRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "DeleteCampaign", data);
    return promise.then((data) => DeleteCampaignResponse.decode(new BinaryReader(data)));
  }

  ListCampaigns(request: ListCampaignsRequest): Promise<ListCampaignsResponse> {
    const data = ListCampaignsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ListCampaigns", data);
    return promise.then((data) => ListCampaignsResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000).toString();
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (globalThis.Number(t.seconds) || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
