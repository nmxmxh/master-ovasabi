// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v5.29.3
// source: localization/v1/localization.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Metadata } from "../../common/v1/metadata";
import { Timestamp } from "../../google/protobuf/timestamp";

export const protobufPackage = "localization.v1";

export interface TranslateRequest {
  key: string;
  locale: string;
}

export interface TranslateResponse {
  value: string;
}

export interface BatchTranslateRequest {
  keys: string[];
  locale: string;
}

export interface BatchTranslateResponse {
  values: { [key: string]: string };
  metadata?: Metadata | undefined;
}

export interface BatchTranslateResponse_ValuesEntry {
  key: string;
  value: string;
}

export interface CreateTranslationRequest {
  key: string;
  language: string;
  value: string;
  metadata?: Metadata | undefined;
  campaignId: string;
}

export interface CreateTranslationResponse {
  translation?: Translation | undefined;
  success: boolean;
}

export interface GetTranslationRequest {
  translationId: string;
}

export interface GetTranslationResponse {
  translation?: Translation | undefined;
}

export interface ListTranslationsRequest {
  language: string;
  page: number;
  pageSize: number;
  campaignId: string;
}

export interface ListTranslationsResponse {
  translations: Translation[];
  totalCount: number;
  page: number;
  totalPages: number;
}

export interface Translation {
  id: string;
  key: string;
  language: string;
  value: string;
  metadata?: Metadata | undefined;
  createdAt?: Date | undefined;
  campaignId: string;
}

export interface GetPricingRuleRequest {
  countryCode: string;
  region: string;
  city: string;
}

export interface GetPricingRuleResponse {
  rule?: PricingRule | undefined;
}

export interface SetPricingRuleRequest {
  rule?: PricingRule | undefined;
}

export interface SetPricingRuleResponse {
  success: boolean;
}

export interface ListPricingRulesRequest {
  countryCode: string;
  region: string;
  page: number;
  pageSize: number;
}

export interface ListPricingRulesResponse {
  rules: PricingRule[];
  totalCount: number;
  page: number;
  totalPages: number;
}

export interface PricingRule {
  id: string;
  countryCode: string;
  region: string;
  city: string;
  currencyCode: string;
  affluenceTier: string;
  demandLevel: string;
  multiplier: number;
  basePrice: number;
  effectiveFrom?: Date | undefined;
  effectiveTo?: Date | undefined;
  notes: string;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
}

export interface ListLocalesRequest {
}

export interface ListLocalesResponse {
  locales: Locale[];
}

export interface GetLocaleMetadataRequest {
  locale: string;
}

export interface GetLocaleMetadataResponse {
  locale?: Locale | undefined;
}

export interface Locale {
  code: string;
  language: string;
  country: string;
  currency: string;
  regions: string[];
  metadata?: Metadata | undefined;
}

export interface Localization {
  id: string;
  key: string;
  language: string;
  value: string;
  metadata?: Metadata | undefined;
  createdAt?: Date | undefined;
  campaignId: string;
}

function createBaseTranslateRequest(): TranslateRequest {
  return { key: "", locale: "" };
}

export const TranslateRequest: MessageFns<TranslateRequest> = {
  encode(message: TranslateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.locale !== "") {
      writer.uint32(18).string(message.locale);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TranslateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTranslateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.locale = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TranslateRequest {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      locale: isSet(object.locale) ? globalThis.String(object.locale) : "",
    };
  },

  toJSON(message: TranslateRequest): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.locale !== "") {
      obj.locale = message.locale;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TranslateRequest>, I>>(base?: I): TranslateRequest {
    return TranslateRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TranslateRequest>, I>>(object: I): TranslateRequest {
    const message = createBaseTranslateRequest();
    message.key = object.key ?? "";
    message.locale = object.locale ?? "";
    return message;
  },
};

function createBaseTranslateResponse(): TranslateResponse {
  return { value: "" };
}

export const TranslateResponse: MessageFns<TranslateResponse> = {
  encode(message: TranslateResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.value !== "") {
      writer.uint32(10).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TranslateResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTranslateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TranslateResponse {
    return { value: isSet(object.value) ? globalThis.String(object.value) : "" };
  },

  toJSON(message: TranslateResponse): unknown {
    const obj: any = {};
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TranslateResponse>, I>>(base?: I): TranslateResponse {
    return TranslateResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TranslateResponse>, I>>(object: I): TranslateResponse {
    const message = createBaseTranslateResponse();
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseBatchTranslateRequest(): BatchTranslateRequest {
  return { keys: [], locale: "" };
}

export const BatchTranslateRequest: MessageFns<BatchTranslateRequest> = {
  encode(message: BatchTranslateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.keys) {
      writer.uint32(10).string(v!);
    }
    if (message.locale !== "") {
      writer.uint32(18).string(message.locale);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BatchTranslateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBatchTranslateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.keys.push(reader.string());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.locale = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BatchTranslateRequest {
    return {
      keys: globalThis.Array.isArray(object?.keys) ? object.keys.map((e: any) => globalThis.String(e)) : [],
      locale: isSet(object.locale) ? globalThis.String(object.locale) : "",
    };
  },

  toJSON(message: BatchTranslateRequest): unknown {
    const obj: any = {};
    if (message.keys?.length) {
      obj.keys = message.keys;
    }
    if (message.locale !== "") {
      obj.locale = message.locale;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BatchTranslateRequest>, I>>(base?: I): BatchTranslateRequest {
    return BatchTranslateRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BatchTranslateRequest>, I>>(object: I): BatchTranslateRequest {
    const message = createBaseBatchTranslateRequest();
    message.keys = object.keys?.map((e) => e) || [];
    message.locale = object.locale ?? "";
    return message;
  },
};

function createBaseBatchTranslateResponse(): BatchTranslateResponse {
  return { values: {}, metadata: undefined };
}

export const BatchTranslateResponse: MessageFns<BatchTranslateResponse> = {
  encode(message: BatchTranslateResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    Object.entries(message.values).forEach(([key, value]) => {
      BatchTranslateResponse_ValuesEntry.encode({ key: key as any, value }, writer.uint32(10).fork()).join();
    });
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BatchTranslateResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBatchTranslateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          const entry1 = BatchTranslateResponse_ValuesEntry.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            message.values[entry1.key] = entry1.value;
          }
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BatchTranslateResponse {
    return {
      values: isObject(object.values)
        ? Object.entries(object.values).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
    };
  },

  toJSON(message: BatchTranslateResponse): unknown {
    const obj: any = {};
    if (message.values) {
      const entries = Object.entries(message.values);
      if (entries.length > 0) {
        obj.values = {};
        entries.forEach(([k, v]) => {
          obj.values[k] = v;
        });
      }
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BatchTranslateResponse>, I>>(base?: I): BatchTranslateResponse {
    return BatchTranslateResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BatchTranslateResponse>, I>>(object: I): BatchTranslateResponse {
    const message = createBaseBatchTranslateResponse();
    message.values = Object.entries(object.values ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    return message;
  },
};

function createBaseBatchTranslateResponse_ValuesEntry(): BatchTranslateResponse_ValuesEntry {
  return { key: "", value: "" };
}

export const BatchTranslateResponse_ValuesEntry: MessageFns<BatchTranslateResponse_ValuesEntry> = {
  encode(message: BatchTranslateResponse_ValuesEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BatchTranslateResponse_ValuesEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBatchTranslateResponse_ValuesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BatchTranslateResponse_ValuesEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: BatchTranslateResponse_ValuesEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BatchTranslateResponse_ValuesEntry>, I>>(
    base?: I,
  ): BatchTranslateResponse_ValuesEntry {
    return BatchTranslateResponse_ValuesEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BatchTranslateResponse_ValuesEntry>, I>>(
    object: I,
  ): BatchTranslateResponse_ValuesEntry {
    const message = createBaseBatchTranslateResponse_ValuesEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseCreateTranslationRequest(): CreateTranslationRequest {
  return { key: "", language: "", value: "", metadata: undefined, campaignId: "0" };
}

export const CreateTranslationRequest: MessageFns<CreateTranslationRequest> = {
  encode(message: CreateTranslationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.language !== "") {
      writer.uint32(18).string(message.language);
    }
    if (message.value !== "") {
      writer.uint32(26).string(message.value);
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(34).fork()).join();
    }
    if (message.campaignId !== "0") {
      writer.uint32(40).int64(message.campaignId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateTranslationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateTranslationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.language = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.value = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.campaignId = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateTranslationRequest {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      language: isSet(object.language) ? globalThis.String(object.language) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
      campaignId: isSet(object.campaignId) ? globalThis.String(object.campaignId) : "0",
    };
  },

  toJSON(message: CreateTranslationRequest): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.language !== "") {
      obj.language = message.language;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    if (message.campaignId !== "0") {
      obj.campaignId = message.campaignId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateTranslationRequest>, I>>(base?: I): CreateTranslationRequest {
    return CreateTranslationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateTranslationRequest>, I>>(object: I): CreateTranslationRequest {
    const message = createBaseCreateTranslationRequest();
    message.key = object.key ?? "";
    message.language = object.language ?? "";
    message.value = object.value ?? "";
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    message.campaignId = object.campaignId ?? "0";
    return message;
  },
};

function createBaseCreateTranslationResponse(): CreateTranslationResponse {
  return { translation: undefined, success: false };
}

export const CreateTranslationResponse: MessageFns<CreateTranslationResponse> = {
  encode(message: CreateTranslationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.translation !== undefined) {
      Translation.encode(message.translation, writer.uint32(10).fork()).join();
    }
    if (message.success !== false) {
      writer.uint32(16).bool(message.success);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateTranslationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateTranslationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.translation = Translation.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateTranslationResponse {
    return {
      translation: isSet(object.translation) ? Translation.fromJSON(object.translation) : undefined,
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
    };
  },

  toJSON(message: CreateTranslationResponse): unknown {
    const obj: any = {};
    if (message.translation !== undefined) {
      obj.translation = Translation.toJSON(message.translation);
    }
    if (message.success !== false) {
      obj.success = message.success;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateTranslationResponse>, I>>(base?: I): CreateTranslationResponse {
    return CreateTranslationResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateTranslationResponse>, I>>(object: I): CreateTranslationResponse {
    const message = createBaseCreateTranslationResponse();
    message.translation = (object.translation !== undefined && object.translation !== null)
      ? Translation.fromPartial(object.translation)
      : undefined;
    message.success = object.success ?? false;
    return message;
  },
};

function createBaseGetTranslationRequest(): GetTranslationRequest {
  return { translationId: "" };
}

export const GetTranslationRequest: MessageFns<GetTranslationRequest> = {
  encode(message: GetTranslationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.translationId !== "") {
      writer.uint32(10).string(message.translationId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetTranslationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTranslationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.translationId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetTranslationRequest {
    return { translationId: isSet(object.translationId) ? globalThis.String(object.translationId) : "" };
  },

  toJSON(message: GetTranslationRequest): unknown {
    const obj: any = {};
    if (message.translationId !== "") {
      obj.translationId = message.translationId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetTranslationRequest>, I>>(base?: I): GetTranslationRequest {
    return GetTranslationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetTranslationRequest>, I>>(object: I): GetTranslationRequest {
    const message = createBaseGetTranslationRequest();
    message.translationId = object.translationId ?? "";
    return message;
  },
};

function createBaseGetTranslationResponse(): GetTranslationResponse {
  return { translation: undefined };
}

export const GetTranslationResponse: MessageFns<GetTranslationResponse> = {
  encode(message: GetTranslationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.translation !== undefined) {
      Translation.encode(message.translation, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetTranslationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTranslationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.translation = Translation.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetTranslationResponse {
    return { translation: isSet(object.translation) ? Translation.fromJSON(object.translation) : undefined };
  },

  toJSON(message: GetTranslationResponse): unknown {
    const obj: any = {};
    if (message.translation !== undefined) {
      obj.translation = Translation.toJSON(message.translation);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetTranslationResponse>, I>>(base?: I): GetTranslationResponse {
    return GetTranslationResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetTranslationResponse>, I>>(object: I): GetTranslationResponse {
    const message = createBaseGetTranslationResponse();
    message.translation = (object.translation !== undefined && object.translation !== null)
      ? Translation.fromPartial(object.translation)
      : undefined;
    return message;
  },
};

function createBaseListTranslationsRequest(): ListTranslationsRequest {
  return { language: "", page: 0, pageSize: 0, campaignId: "0" };
}

export const ListTranslationsRequest: MessageFns<ListTranslationsRequest> = {
  encode(message: ListTranslationsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    if (message.page !== 0) {
      writer.uint32(16).int32(message.page);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.campaignId !== "0") {
      writer.uint32(32).int64(message.campaignId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListTranslationsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListTranslationsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.page = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.campaignId = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListTranslationsRequest {
    return {
      language: isSet(object.language) ? globalThis.String(object.language) : "",
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      campaignId: isSet(object.campaignId) ? globalThis.String(object.campaignId) : "0",
    };
  },

  toJSON(message: ListTranslationsRequest): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.campaignId !== "0") {
      obj.campaignId = message.campaignId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListTranslationsRequest>, I>>(base?: I): ListTranslationsRequest {
    return ListTranslationsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListTranslationsRequest>, I>>(object: I): ListTranslationsRequest {
    const message = createBaseListTranslationsRequest();
    message.language = object.language ?? "";
    message.page = object.page ?? 0;
    message.pageSize = object.pageSize ?? 0;
    message.campaignId = object.campaignId ?? "0";
    return message;
  },
};

function createBaseListTranslationsResponse(): ListTranslationsResponse {
  return { translations: [], totalCount: 0, page: 0, totalPages: 0 };
}

export const ListTranslationsResponse: MessageFns<ListTranslationsResponse> = {
  encode(message: ListTranslationsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.translations) {
      Translation.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.totalCount !== 0) {
      writer.uint32(16).int32(message.totalCount);
    }
    if (message.page !== 0) {
      writer.uint32(24).int32(message.page);
    }
    if (message.totalPages !== 0) {
      writer.uint32(32).int32(message.totalPages);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListTranslationsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListTranslationsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.translations.push(Translation.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.totalCount = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.page = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.totalPages = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListTranslationsResponse {
    return {
      translations: globalThis.Array.isArray(object?.translations)
        ? object.translations.map((e: any) => Translation.fromJSON(e))
        : [],
      totalCount: isSet(object.totalCount) ? globalThis.Number(object.totalCount) : 0,
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      totalPages: isSet(object.totalPages) ? globalThis.Number(object.totalPages) : 0,
    };
  },

  toJSON(message: ListTranslationsResponse): unknown {
    const obj: any = {};
    if (message.translations?.length) {
      obj.translations = message.translations.map((e) => Translation.toJSON(e));
    }
    if (message.totalCount !== 0) {
      obj.totalCount = Math.round(message.totalCount);
    }
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.totalPages !== 0) {
      obj.totalPages = Math.round(message.totalPages);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListTranslationsResponse>, I>>(base?: I): ListTranslationsResponse {
    return ListTranslationsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListTranslationsResponse>, I>>(object: I): ListTranslationsResponse {
    const message = createBaseListTranslationsResponse();
    message.translations = object.translations?.map((e) => Translation.fromPartial(e)) || [];
    message.totalCount = object.totalCount ?? 0;
    message.page = object.page ?? 0;
    message.totalPages = object.totalPages ?? 0;
    return message;
  },
};

function createBaseTranslation(): Translation {
  return { id: "", key: "", language: "", value: "", metadata: undefined, createdAt: undefined, campaignId: "0" };
}

export const Translation: MessageFns<Translation> = {
  encode(message: Translation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.key !== "") {
      writer.uint32(18).string(message.key);
    }
    if (message.language !== "") {
      writer.uint32(26).string(message.language);
    }
    if (message.value !== "") {
      writer.uint32(34).string(message.value);
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(42).fork()).join();
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(50).fork()).join();
    }
    if (message.campaignId !== "0") {
      writer.uint32(56).int64(message.campaignId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Translation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTranslation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.language = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.value = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.campaignId = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Translation {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      language: isSet(object.language) ? globalThis.String(object.language) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      campaignId: isSet(object.campaignId) ? globalThis.String(object.campaignId) : "0",
    };
  },

  toJSON(message: Translation): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.language !== "") {
      obj.language = message.language;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.campaignId !== "0") {
      obj.campaignId = message.campaignId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Translation>, I>>(base?: I): Translation {
    return Translation.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Translation>, I>>(object: I): Translation {
    const message = createBaseTranslation();
    message.id = object.id ?? "";
    message.key = object.key ?? "";
    message.language = object.language ?? "";
    message.value = object.value ?? "";
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    message.createdAt = object.createdAt ?? undefined;
    message.campaignId = object.campaignId ?? "0";
    return message;
  },
};

function createBaseGetPricingRuleRequest(): GetPricingRuleRequest {
  return { countryCode: "", region: "", city: "" };
}

export const GetPricingRuleRequest: MessageFns<GetPricingRuleRequest> = {
  encode(message: GetPricingRuleRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.countryCode !== "") {
      writer.uint32(10).string(message.countryCode);
    }
    if (message.region !== "") {
      writer.uint32(18).string(message.region);
    }
    if (message.city !== "") {
      writer.uint32(26).string(message.city);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetPricingRuleRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPricingRuleRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.countryCode = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.region = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.city = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetPricingRuleRequest {
    return {
      countryCode: isSet(object.countryCode) ? globalThis.String(object.countryCode) : "",
      region: isSet(object.region) ? globalThis.String(object.region) : "",
      city: isSet(object.city) ? globalThis.String(object.city) : "",
    };
  },

  toJSON(message: GetPricingRuleRequest): unknown {
    const obj: any = {};
    if (message.countryCode !== "") {
      obj.countryCode = message.countryCode;
    }
    if (message.region !== "") {
      obj.region = message.region;
    }
    if (message.city !== "") {
      obj.city = message.city;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetPricingRuleRequest>, I>>(base?: I): GetPricingRuleRequest {
    return GetPricingRuleRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetPricingRuleRequest>, I>>(object: I): GetPricingRuleRequest {
    const message = createBaseGetPricingRuleRequest();
    message.countryCode = object.countryCode ?? "";
    message.region = object.region ?? "";
    message.city = object.city ?? "";
    return message;
  },
};

function createBaseGetPricingRuleResponse(): GetPricingRuleResponse {
  return { rule: undefined };
}

export const GetPricingRuleResponse: MessageFns<GetPricingRuleResponse> = {
  encode(message: GetPricingRuleResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.rule !== undefined) {
      PricingRule.encode(message.rule, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetPricingRuleResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPricingRuleResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.rule = PricingRule.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetPricingRuleResponse {
    return { rule: isSet(object.rule) ? PricingRule.fromJSON(object.rule) : undefined };
  },

  toJSON(message: GetPricingRuleResponse): unknown {
    const obj: any = {};
    if (message.rule !== undefined) {
      obj.rule = PricingRule.toJSON(message.rule);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetPricingRuleResponse>, I>>(base?: I): GetPricingRuleResponse {
    return GetPricingRuleResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetPricingRuleResponse>, I>>(object: I): GetPricingRuleResponse {
    const message = createBaseGetPricingRuleResponse();
    message.rule = (object.rule !== undefined && object.rule !== null)
      ? PricingRule.fromPartial(object.rule)
      : undefined;
    return message;
  },
};

function createBaseSetPricingRuleRequest(): SetPricingRuleRequest {
  return { rule: undefined };
}

export const SetPricingRuleRequest: MessageFns<SetPricingRuleRequest> = {
  encode(message: SetPricingRuleRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.rule !== undefined) {
      PricingRule.encode(message.rule, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetPricingRuleRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetPricingRuleRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.rule = PricingRule.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetPricingRuleRequest {
    return { rule: isSet(object.rule) ? PricingRule.fromJSON(object.rule) : undefined };
  },

  toJSON(message: SetPricingRuleRequest): unknown {
    const obj: any = {};
    if (message.rule !== undefined) {
      obj.rule = PricingRule.toJSON(message.rule);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetPricingRuleRequest>, I>>(base?: I): SetPricingRuleRequest {
    return SetPricingRuleRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetPricingRuleRequest>, I>>(object: I): SetPricingRuleRequest {
    const message = createBaseSetPricingRuleRequest();
    message.rule = (object.rule !== undefined && object.rule !== null)
      ? PricingRule.fromPartial(object.rule)
      : undefined;
    return message;
  },
};

function createBaseSetPricingRuleResponse(): SetPricingRuleResponse {
  return { success: false };
}

export const SetPricingRuleResponse: MessageFns<SetPricingRuleResponse> = {
  encode(message: SetPricingRuleResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetPricingRuleResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetPricingRuleResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetPricingRuleResponse {
    return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
  },

  toJSON(message: SetPricingRuleResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetPricingRuleResponse>, I>>(base?: I): SetPricingRuleResponse {
    return SetPricingRuleResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetPricingRuleResponse>, I>>(object: I): SetPricingRuleResponse {
    const message = createBaseSetPricingRuleResponse();
    message.success = object.success ?? false;
    return message;
  },
};

function createBaseListPricingRulesRequest(): ListPricingRulesRequest {
  return { countryCode: "", region: "", page: 0, pageSize: 0 };
}

export const ListPricingRulesRequest: MessageFns<ListPricingRulesRequest> = {
  encode(message: ListPricingRulesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.countryCode !== "") {
      writer.uint32(10).string(message.countryCode);
    }
    if (message.region !== "") {
      writer.uint32(18).string(message.region);
    }
    if (message.page !== 0) {
      writer.uint32(24).int32(message.page);
    }
    if (message.pageSize !== 0) {
      writer.uint32(32).int32(message.pageSize);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListPricingRulesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListPricingRulesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.countryCode = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.region = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.page = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListPricingRulesRequest {
    return {
      countryCode: isSet(object.countryCode) ? globalThis.String(object.countryCode) : "",
      region: isSet(object.region) ? globalThis.String(object.region) : "",
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
    };
  },

  toJSON(message: ListPricingRulesRequest): unknown {
    const obj: any = {};
    if (message.countryCode !== "") {
      obj.countryCode = message.countryCode;
    }
    if (message.region !== "") {
      obj.region = message.region;
    }
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListPricingRulesRequest>, I>>(base?: I): ListPricingRulesRequest {
    return ListPricingRulesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListPricingRulesRequest>, I>>(object: I): ListPricingRulesRequest {
    const message = createBaseListPricingRulesRequest();
    message.countryCode = object.countryCode ?? "";
    message.region = object.region ?? "";
    message.page = object.page ?? 0;
    message.pageSize = object.pageSize ?? 0;
    return message;
  },
};

function createBaseListPricingRulesResponse(): ListPricingRulesResponse {
  return { rules: [], totalCount: 0, page: 0, totalPages: 0 };
}

export const ListPricingRulesResponse: MessageFns<ListPricingRulesResponse> = {
  encode(message: ListPricingRulesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.rules) {
      PricingRule.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.totalCount !== 0) {
      writer.uint32(16).int32(message.totalCount);
    }
    if (message.page !== 0) {
      writer.uint32(24).int32(message.page);
    }
    if (message.totalPages !== 0) {
      writer.uint32(32).int32(message.totalPages);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListPricingRulesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListPricingRulesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.rules.push(PricingRule.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.totalCount = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.page = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.totalPages = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListPricingRulesResponse {
    return {
      rules: globalThis.Array.isArray(object?.rules) ? object.rules.map((e: any) => PricingRule.fromJSON(e)) : [],
      totalCount: isSet(object.totalCount) ? globalThis.Number(object.totalCount) : 0,
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      totalPages: isSet(object.totalPages) ? globalThis.Number(object.totalPages) : 0,
    };
  },

  toJSON(message: ListPricingRulesResponse): unknown {
    const obj: any = {};
    if (message.rules?.length) {
      obj.rules = message.rules.map((e) => PricingRule.toJSON(e));
    }
    if (message.totalCount !== 0) {
      obj.totalCount = Math.round(message.totalCount);
    }
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.totalPages !== 0) {
      obj.totalPages = Math.round(message.totalPages);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListPricingRulesResponse>, I>>(base?: I): ListPricingRulesResponse {
    return ListPricingRulesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListPricingRulesResponse>, I>>(object: I): ListPricingRulesResponse {
    const message = createBaseListPricingRulesResponse();
    message.rules = object.rules?.map((e) => PricingRule.fromPartial(e)) || [];
    message.totalCount = object.totalCount ?? 0;
    message.page = object.page ?? 0;
    message.totalPages = object.totalPages ?? 0;
    return message;
  },
};

function createBasePricingRule(): PricingRule {
  return {
    id: "",
    countryCode: "",
    region: "",
    city: "",
    currencyCode: "",
    affluenceTier: "",
    demandLevel: "",
    multiplier: 0,
    basePrice: 0,
    effectiveFrom: undefined,
    effectiveTo: undefined,
    notes: "",
    createdAt: undefined,
    updatedAt: undefined,
  };
}

export const PricingRule: MessageFns<PricingRule> = {
  encode(message: PricingRule, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.countryCode !== "") {
      writer.uint32(18).string(message.countryCode);
    }
    if (message.region !== "") {
      writer.uint32(26).string(message.region);
    }
    if (message.city !== "") {
      writer.uint32(34).string(message.city);
    }
    if (message.currencyCode !== "") {
      writer.uint32(42).string(message.currencyCode);
    }
    if (message.affluenceTier !== "") {
      writer.uint32(50).string(message.affluenceTier);
    }
    if (message.demandLevel !== "") {
      writer.uint32(58).string(message.demandLevel);
    }
    if (message.multiplier !== 0) {
      writer.uint32(65).double(message.multiplier);
    }
    if (message.basePrice !== 0) {
      writer.uint32(73).double(message.basePrice);
    }
    if (message.effectiveFrom !== undefined) {
      Timestamp.encode(toTimestamp(message.effectiveFrom), writer.uint32(82).fork()).join();
    }
    if (message.effectiveTo !== undefined) {
      Timestamp.encode(toTimestamp(message.effectiveTo), writer.uint32(90).fork()).join();
    }
    if (message.notes !== "") {
      writer.uint32(98).string(message.notes);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(106).fork()).join();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.updatedAt), writer.uint32(114).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PricingRule {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePricingRule();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.countryCode = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.region = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.city = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.currencyCode = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.affluenceTier = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.demandLevel = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 65) {
            break;
          }

          message.multiplier = reader.double();
          continue;
        }
        case 9: {
          if (tag !== 73) {
            break;
          }

          message.basePrice = reader.double();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.effectiveFrom = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.effectiveTo = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.notes = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.updatedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PricingRule {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      countryCode: isSet(object.countryCode) ? globalThis.String(object.countryCode) : "",
      region: isSet(object.region) ? globalThis.String(object.region) : "",
      city: isSet(object.city) ? globalThis.String(object.city) : "",
      currencyCode: isSet(object.currencyCode) ? globalThis.String(object.currencyCode) : "",
      affluenceTier: isSet(object.affluenceTier) ? globalThis.String(object.affluenceTier) : "",
      demandLevel: isSet(object.demandLevel) ? globalThis.String(object.demandLevel) : "",
      multiplier: isSet(object.multiplier) ? globalThis.Number(object.multiplier) : 0,
      basePrice: isSet(object.basePrice) ? globalThis.Number(object.basePrice) : 0,
      effectiveFrom: isSet(object.effectiveFrom) ? fromJsonTimestamp(object.effectiveFrom) : undefined,
      effectiveTo: isSet(object.effectiveTo) ? fromJsonTimestamp(object.effectiveTo) : undefined,
      notes: isSet(object.notes) ? globalThis.String(object.notes) : "",
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
    };
  },

  toJSON(message: PricingRule): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.countryCode !== "") {
      obj.countryCode = message.countryCode;
    }
    if (message.region !== "") {
      obj.region = message.region;
    }
    if (message.city !== "") {
      obj.city = message.city;
    }
    if (message.currencyCode !== "") {
      obj.currencyCode = message.currencyCode;
    }
    if (message.affluenceTier !== "") {
      obj.affluenceTier = message.affluenceTier;
    }
    if (message.demandLevel !== "") {
      obj.demandLevel = message.demandLevel;
    }
    if (message.multiplier !== 0) {
      obj.multiplier = message.multiplier;
    }
    if (message.basePrice !== 0) {
      obj.basePrice = message.basePrice;
    }
    if (message.effectiveFrom !== undefined) {
      obj.effectiveFrom = message.effectiveFrom.toISOString();
    }
    if (message.effectiveTo !== undefined) {
      obj.effectiveTo = message.effectiveTo.toISOString();
    }
    if (message.notes !== "") {
      obj.notes = message.notes;
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = message.updatedAt.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PricingRule>, I>>(base?: I): PricingRule {
    return PricingRule.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PricingRule>, I>>(object: I): PricingRule {
    const message = createBasePricingRule();
    message.id = object.id ?? "";
    message.countryCode = object.countryCode ?? "";
    message.region = object.region ?? "";
    message.city = object.city ?? "";
    message.currencyCode = object.currencyCode ?? "";
    message.affluenceTier = object.affluenceTier ?? "";
    message.demandLevel = object.demandLevel ?? "";
    message.multiplier = object.multiplier ?? 0;
    message.basePrice = object.basePrice ?? 0;
    message.effectiveFrom = object.effectiveFrom ?? undefined;
    message.effectiveTo = object.effectiveTo ?? undefined;
    message.notes = object.notes ?? "";
    message.createdAt = object.createdAt ?? undefined;
    message.updatedAt = object.updatedAt ?? undefined;
    return message;
  },
};

function createBaseListLocalesRequest(): ListLocalesRequest {
  return {};
}

export const ListLocalesRequest: MessageFns<ListLocalesRequest> = {
  encode(_: ListLocalesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListLocalesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListLocalesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ListLocalesRequest {
    return {};
  },

  toJSON(_: ListLocalesRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ListLocalesRequest>, I>>(base?: I): ListLocalesRequest {
    return ListLocalesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListLocalesRequest>, I>>(_: I): ListLocalesRequest {
    const message = createBaseListLocalesRequest();
    return message;
  },
};

function createBaseListLocalesResponse(): ListLocalesResponse {
  return { locales: [] };
}

export const ListLocalesResponse: MessageFns<ListLocalesResponse> = {
  encode(message: ListLocalesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.locales) {
      Locale.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListLocalesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListLocalesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.locales.push(Locale.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListLocalesResponse {
    return {
      locales: globalThis.Array.isArray(object?.locales) ? object.locales.map((e: any) => Locale.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListLocalesResponse): unknown {
    const obj: any = {};
    if (message.locales?.length) {
      obj.locales = message.locales.map((e) => Locale.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListLocalesResponse>, I>>(base?: I): ListLocalesResponse {
    return ListLocalesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListLocalesResponse>, I>>(object: I): ListLocalesResponse {
    const message = createBaseListLocalesResponse();
    message.locales = object.locales?.map((e) => Locale.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetLocaleMetadataRequest(): GetLocaleMetadataRequest {
  return { locale: "" };
}

export const GetLocaleMetadataRequest: MessageFns<GetLocaleMetadataRequest> = {
  encode(message: GetLocaleMetadataRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.locale !== "") {
      writer.uint32(10).string(message.locale);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetLocaleMetadataRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetLocaleMetadataRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.locale = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetLocaleMetadataRequest {
    return { locale: isSet(object.locale) ? globalThis.String(object.locale) : "" };
  },

  toJSON(message: GetLocaleMetadataRequest): unknown {
    const obj: any = {};
    if (message.locale !== "") {
      obj.locale = message.locale;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetLocaleMetadataRequest>, I>>(base?: I): GetLocaleMetadataRequest {
    return GetLocaleMetadataRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetLocaleMetadataRequest>, I>>(object: I): GetLocaleMetadataRequest {
    const message = createBaseGetLocaleMetadataRequest();
    message.locale = object.locale ?? "";
    return message;
  },
};

function createBaseGetLocaleMetadataResponse(): GetLocaleMetadataResponse {
  return { locale: undefined };
}

export const GetLocaleMetadataResponse: MessageFns<GetLocaleMetadataResponse> = {
  encode(message: GetLocaleMetadataResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.locale !== undefined) {
      Locale.encode(message.locale, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetLocaleMetadataResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetLocaleMetadataResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.locale = Locale.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetLocaleMetadataResponse {
    return { locale: isSet(object.locale) ? Locale.fromJSON(object.locale) : undefined };
  },

  toJSON(message: GetLocaleMetadataResponse): unknown {
    const obj: any = {};
    if (message.locale !== undefined) {
      obj.locale = Locale.toJSON(message.locale);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetLocaleMetadataResponse>, I>>(base?: I): GetLocaleMetadataResponse {
    return GetLocaleMetadataResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetLocaleMetadataResponse>, I>>(object: I): GetLocaleMetadataResponse {
    const message = createBaseGetLocaleMetadataResponse();
    message.locale = (object.locale !== undefined && object.locale !== null)
      ? Locale.fromPartial(object.locale)
      : undefined;
    return message;
  },
};

function createBaseLocale(): Locale {
  return { code: "", language: "", country: "", currency: "", regions: [], metadata: undefined };
}

export const Locale: MessageFns<Locale> = {
  encode(message: Locale, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== "") {
      writer.uint32(10).string(message.code);
    }
    if (message.language !== "") {
      writer.uint32(18).string(message.language);
    }
    if (message.country !== "") {
      writer.uint32(26).string(message.country);
    }
    if (message.currency !== "") {
      writer.uint32(34).string(message.currency);
    }
    for (const v of message.regions) {
      writer.uint32(42).string(v!);
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Locale {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLocale();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.code = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.language = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.country = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.currency = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.regions.push(reader.string());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Locale {
    return {
      code: isSet(object.code) ? globalThis.String(object.code) : "",
      language: isSet(object.language) ? globalThis.String(object.language) : "",
      country: isSet(object.country) ? globalThis.String(object.country) : "",
      currency: isSet(object.currency) ? globalThis.String(object.currency) : "",
      regions: globalThis.Array.isArray(object?.regions) ? object.regions.map((e: any) => globalThis.String(e)) : [],
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
    };
  },

  toJSON(message: Locale): unknown {
    const obj: any = {};
    if (message.code !== "") {
      obj.code = message.code;
    }
    if (message.language !== "") {
      obj.language = message.language;
    }
    if (message.country !== "") {
      obj.country = message.country;
    }
    if (message.currency !== "") {
      obj.currency = message.currency;
    }
    if (message.regions?.length) {
      obj.regions = message.regions;
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Locale>, I>>(base?: I): Locale {
    return Locale.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Locale>, I>>(object: I): Locale {
    const message = createBaseLocale();
    message.code = object.code ?? "";
    message.language = object.language ?? "";
    message.country = object.country ?? "";
    message.currency = object.currency ?? "";
    message.regions = object.regions?.map((e) => e) || [];
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    return message;
  },
};

function createBaseLocalization(): Localization {
  return { id: "", key: "", language: "", value: "", metadata: undefined, createdAt: undefined, campaignId: "0" };
}

export const Localization: MessageFns<Localization> = {
  encode(message: Localization, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.key !== "") {
      writer.uint32(18).string(message.key);
    }
    if (message.language !== "") {
      writer.uint32(26).string(message.language);
    }
    if (message.value !== "") {
      writer.uint32(34).string(message.value);
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(42).fork()).join();
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(50).fork()).join();
    }
    if (message.campaignId !== "0") {
      writer.uint32(56).int64(message.campaignId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Localization {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLocalization();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.language = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.value = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.campaignId = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Localization {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      language: isSet(object.language) ? globalThis.String(object.language) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      campaignId: isSet(object.campaignId) ? globalThis.String(object.campaignId) : "0",
    };
  },

  toJSON(message: Localization): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.language !== "") {
      obj.language = message.language;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.campaignId !== "0") {
      obj.campaignId = message.campaignId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Localization>, I>>(base?: I): Localization {
    return Localization.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Localization>, I>>(object: I): Localization {
    const message = createBaseLocalization();
    message.id = object.id ?? "";
    message.key = object.key ?? "";
    message.language = object.language ?? "";
    message.value = object.value ?? "";
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    message.createdAt = object.createdAt ?? undefined;
    message.campaignId = object.campaignId ?? "0";
    return message;
  },
};

export interface LocalizationService {
  /** Translation */
  Translate(request: TranslateRequest): Promise<TranslateResponse>;
  BatchTranslate(request: BatchTranslateRequest): Promise<BatchTranslateResponse>;
  CreateTranslation(request: CreateTranslationRequest): Promise<CreateTranslationResponse>;
  GetTranslation(request: GetTranslationRequest): Promise<GetTranslationResponse>;
  ListTranslations(request: ListTranslationsRequest): Promise<ListTranslationsResponse>;
  /** Pricing */
  GetPricingRule(request: GetPricingRuleRequest): Promise<GetPricingRuleResponse>;
  SetPricingRule(request: SetPricingRuleRequest): Promise<SetPricingRuleResponse>;
  ListPricingRules(request: ListPricingRulesRequest): Promise<ListPricingRulesResponse>;
  /** Locale metadata */
  ListLocales(request: ListLocalesRequest): Promise<ListLocalesResponse>;
  GetLocaleMetadata(request: GetLocaleMetadataRequest): Promise<GetLocaleMetadataResponse>;
}

export const LocalizationServiceServiceName = "localization.v1.LocalizationService";
export class LocalizationServiceClientImpl implements LocalizationService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || LocalizationServiceServiceName;
    this.rpc = rpc;
    this.Translate = this.Translate.bind(this);
    this.BatchTranslate = this.BatchTranslate.bind(this);
    this.CreateTranslation = this.CreateTranslation.bind(this);
    this.GetTranslation = this.GetTranslation.bind(this);
    this.ListTranslations = this.ListTranslations.bind(this);
    this.GetPricingRule = this.GetPricingRule.bind(this);
    this.SetPricingRule = this.SetPricingRule.bind(this);
    this.ListPricingRules = this.ListPricingRules.bind(this);
    this.ListLocales = this.ListLocales.bind(this);
    this.GetLocaleMetadata = this.GetLocaleMetadata.bind(this);
  }
  Translate(request: TranslateRequest): Promise<TranslateResponse> {
    const data = TranslateRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Translate", data);
    return promise.then((data) => TranslateResponse.decode(new BinaryReader(data)));
  }

  BatchTranslate(request: BatchTranslateRequest): Promise<BatchTranslateResponse> {
    const data = BatchTranslateRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "BatchTranslate", data);
    return promise.then((data) => BatchTranslateResponse.decode(new BinaryReader(data)));
  }

  CreateTranslation(request: CreateTranslationRequest): Promise<CreateTranslationResponse> {
    const data = CreateTranslationRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateTranslation", data);
    return promise.then((data) => CreateTranslationResponse.decode(new BinaryReader(data)));
  }

  GetTranslation(request: GetTranslationRequest): Promise<GetTranslationResponse> {
    const data = GetTranslationRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetTranslation", data);
    return promise.then((data) => GetTranslationResponse.decode(new BinaryReader(data)));
  }

  ListTranslations(request: ListTranslationsRequest): Promise<ListTranslationsResponse> {
    const data = ListTranslationsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ListTranslations", data);
    return promise.then((data) => ListTranslationsResponse.decode(new BinaryReader(data)));
  }

  GetPricingRule(request: GetPricingRuleRequest): Promise<GetPricingRuleResponse> {
    const data = GetPricingRuleRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetPricingRule", data);
    return promise.then((data) => GetPricingRuleResponse.decode(new BinaryReader(data)));
  }

  SetPricingRule(request: SetPricingRuleRequest): Promise<SetPricingRuleResponse> {
    const data = SetPricingRuleRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "SetPricingRule", data);
    return promise.then((data) => SetPricingRuleResponse.decode(new BinaryReader(data)));
  }

  ListPricingRules(request: ListPricingRulesRequest): Promise<ListPricingRulesResponse> {
    const data = ListPricingRulesRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ListPricingRules", data);
    return promise.then((data) => ListPricingRulesResponse.decode(new BinaryReader(data)));
  }

  ListLocales(request: ListLocalesRequest): Promise<ListLocalesResponse> {
    const data = ListLocalesRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ListLocales", data);
    return promise.then((data) => ListLocalesResponse.decode(new BinaryReader(data)));
  }

  GetLocaleMetadata(request: GetLocaleMetadataRequest): Promise<GetLocaleMetadataResponse> {
    const data = GetLocaleMetadataRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetLocaleMetadata", data);
    return promise.then((data) => GetLocaleMetadataResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000).toString();
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (globalThis.Number(t.seconds) || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
