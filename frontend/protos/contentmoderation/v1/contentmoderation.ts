// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v5.29.3
// source: contentmoderation/v1/contentmoderation.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Metadata } from "../../common/v1/metadata";

export const protobufPackage = "contentmoderation.v1";

export enum ModerationStatus {
  MODERATION_STATUS_UNSPECIFIED = 0,
  MODERATION_STATUS_PENDING = 1,
  MODERATION_STATUS_APPROVED = 2,
  MODERATION_STATUS_REJECTED = 3,
  MODERATION_STATUS_FLAGGED = 4,
  UNRECOGNIZED = -1,
}

export function moderationStatusFromJSON(object: any): ModerationStatus {
  switch (object) {
    case 0:
    case "MODERATION_STATUS_UNSPECIFIED":
      return ModerationStatus.MODERATION_STATUS_UNSPECIFIED;
    case 1:
    case "MODERATION_STATUS_PENDING":
      return ModerationStatus.MODERATION_STATUS_PENDING;
    case 2:
    case "MODERATION_STATUS_APPROVED":
      return ModerationStatus.MODERATION_STATUS_APPROVED;
    case 3:
    case "MODERATION_STATUS_REJECTED":
      return ModerationStatus.MODERATION_STATUS_REJECTED;
    case 4:
    case "MODERATION_STATUS_FLAGGED":
      return ModerationStatus.MODERATION_STATUS_FLAGGED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ModerationStatus.UNRECOGNIZED;
  }
}

export function moderationStatusToJSON(object: ModerationStatus): string {
  switch (object) {
    case ModerationStatus.MODERATION_STATUS_UNSPECIFIED:
      return "MODERATION_STATUS_UNSPECIFIED";
    case ModerationStatus.MODERATION_STATUS_PENDING:
      return "MODERATION_STATUS_PENDING";
    case ModerationStatus.MODERATION_STATUS_APPROVED:
      return "MODERATION_STATUS_APPROVED";
    case ModerationStatus.MODERATION_STATUS_REJECTED:
      return "MODERATION_STATUS_REJECTED";
    case ModerationStatus.MODERATION_STATUS_FLAGGED:
      return "MODERATION_STATUS_FLAGGED";
    case ModerationStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface ModerationResult {
  id: string;
  contentId: string;
  userId: string;
  status: ModerationStatus;
  reason: string;
  /** e.g., toxicity, spam, etc. */
  scores: { [key: string]: number };
  createdAt: string;
  updatedAt: string;
  metadata?: Metadata | undefined;
}

export interface ModerationResult_ScoresEntry {
  key: string;
  value: number;
}

export interface SubmitContentForModerationRequest {
  contentId: string;
  userId: string;
  contentType: string;
  content: string;
  metadata?: Metadata | undefined;
  campaignId: string;
}

export interface SubmitContentForModerationResponse {
  result?: ModerationResult | undefined;
}

export interface GetModerationResultRequest {
  contentId: string;
  campaignId: string;
}

export interface GetModerationResultResponse {
  result?: ModerationResult | undefined;
}

export interface ListFlaggedContentRequest {
  page: number;
  pageSize: number;
  status: string;
  campaignId: string;
}

export interface ListFlaggedContentResponse {
  results: ModerationResult[];
  totalCount: number;
  page: number;
  totalPages: number;
}

export interface ApproveContentRequest {
  contentId: string;
  metadata?: Metadata | undefined;
  campaignId: string;
}

export interface ApproveContentResponse {
  result?: ModerationResult | undefined;
}

export interface RejectContentRequest {
  contentId: string;
  reason: string;
  metadata?: Metadata | undefined;
  campaignId: string;
}

export interface RejectContentResponse {
  result?: ModerationResult | undefined;
}

export interface ContentModeration {
  id: string;
  contentId: string;
  userId: string;
  status: ModerationStatus;
  reason: string;
  /** e.g., toxicity, spam, etc. */
  scores: { [key: string]: number };
  createdAt: string;
  updatedAt: string;
  metadata?:
    | Metadata
    | undefined;
  /** campaign/tenant context */
  campaignId: string;
}

export interface ContentModeration_ScoresEntry {
  key: string;
  value: number;
}

function createBaseModerationResult(): ModerationResult {
  return {
    id: "",
    contentId: "",
    userId: "",
    status: 0,
    reason: "",
    scores: {},
    createdAt: "0",
    updatedAt: "0",
    metadata: undefined,
  };
}

export const ModerationResult: MessageFns<ModerationResult> = {
  encode(message: ModerationResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.contentId !== "") {
      writer.uint32(18).string(message.contentId);
    }
    if (message.userId !== "") {
      writer.uint32(26).string(message.userId);
    }
    if (message.status !== 0) {
      writer.uint32(32).int32(message.status);
    }
    if (message.reason !== "") {
      writer.uint32(42).string(message.reason);
    }
    Object.entries(message.scores).forEach(([key, value]) => {
      ModerationResult_ScoresEntry.encode({ key: key as any, value }, writer.uint32(50).fork()).join();
    });
    if (message.createdAt !== "0") {
      writer.uint32(56).int64(message.createdAt);
    }
    if (message.updatedAt !== "0") {
      writer.uint32(64).int64(message.updatedAt);
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(74).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ModerationResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseModerationResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.contentId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.reason = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          const entry6 = ModerationResult_ScoresEntry.decode(reader, reader.uint32());
          if (entry6.value !== undefined) {
            message.scores[entry6.key] = entry6.value;
          }
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.createdAt = reader.int64().toString();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.updatedAt = reader.int64().toString();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ModerationResult {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      contentId: isSet(object.contentId) ? globalThis.String(object.contentId) : "",
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      status: isSet(object.status) ? moderationStatusFromJSON(object.status) : 0,
      reason: isSet(object.reason) ? globalThis.String(object.reason) : "",
      scores: isObject(object.scores)
        ? Object.entries(object.scores).reduce<{ [key: string]: number }>((acc, [key, value]) => {
          acc[key] = Number(value);
          return acc;
        }, {})
        : {},
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "0",
      updatedAt: isSet(object.updatedAt) ? globalThis.String(object.updatedAt) : "0",
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
    };
  },

  toJSON(message: ModerationResult): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.contentId !== "") {
      obj.contentId = message.contentId;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.status !== 0) {
      obj.status = moderationStatusToJSON(message.status);
    }
    if (message.reason !== "") {
      obj.reason = message.reason;
    }
    if (message.scores) {
      const entries = Object.entries(message.scores);
      if (entries.length > 0) {
        obj.scores = {};
        entries.forEach(([k, v]) => {
          obj.scores[k] = v;
        });
      }
    }
    if (message.createdAt !== "0") {
      obj.createdAt = message.createdAt;
    }
    if (message.updatedAt !== "0") {
      obj.updatedAt = message.updatedAt;
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ModerationResult>, I>>(base?: I): ModerationResult {
    return ModerationResult.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ModerationResult>, I>>(object: I): ModerationResult {
    const message = createBaseModerationResult();
    message.id = object.id ?? "";
    message.contentId = object.contentId ?? "";
    message.userId = object.userId ?? "";
    message.status = object.status ?? 0;
    message.reason = object.reason ?? "";
    message.scores = Object.entries(object.scores ?? {}).reduce<{ [key: string]: number }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.Number(value);
      }
      return acc;
    }, {});
    message.createdAt = object.createdAt ?? "0";
    message.updatedAt = object.updatedAt ?? "0";
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    return message;
  },
};

function createBaseModerationResult_ScoresEntry(): ModerationResult_ScoresEntry {
  return { key: "", value: 0 };
}

export const ModerationResult_ScoresEntry: MessageFns<ModerationResult_ScoresEntry> = {
  encode(message: ModerationResult_ScoresEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== 0) {
      writer.uint32(21).float(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ModerationResult_ScoresEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseModerationResult_ScoresEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 21) {
            break;
          }

          message.value = reader.float();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ModerationResult_ScoresEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.Number(object.value) : 0,
    };
  },

  toJSON(message: ModerationResult_ScoresEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== 0) {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ModerationResult_ScoresEntry>, I>>(base?: I): ModerationResult_ScoresEntry {
    return ModerationResult_ScoresEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ModerationResult_ScoresEntry>, I>>(object: I): ModerationResult_ScoresEntry {
    const message = createBaseModerationResult_ScoresEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? 0;
    return message;
  },
};

function createBaseSubmitContentForModerationRequest(): SubmitContentForModerationRequest {
  return { contentId: "", userId: "", contentType: "", content: "", metadata: undefined, campaignId: "0" };
}

export const SubmitContentForModerationRequest: MessageFns<SubmitContentForModerationRequest> = {
  encode(message: SubmitContentForModerationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.contentId !== "") {
      writer.uint32(10).string(message.contentId);
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    if (message.contentType !== "") {
      writer.uint32(26).string(message.contentType);
    }
    if (message.content !== "") {
      writer.uint32(34).string(message.content);
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(42).fork()).join();
    }
    if (message.campaignId !== "0") {
      writer.uint32(48).int64(message.campaignId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SubmitContentForModerationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubmitContentForModerationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.contentId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.contentType = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.content = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.campaignId = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SubmitContentForModerationRequest {
    return {
      contentId: isSet(object.contentId) ? globalThis.String(object.contentId) : "",
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      contentType: isSet(object.contentType) ? globalThis.String(object.contentType) : "",
      content: isSet(object.content) ? globalThis.String(object.content) : "",
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
      campaignId: isSet(object.campaignId) ? globalThis.String(object.campaignId) : "0",
    };
  },

  toJSON(message: SubmitContentForModerationRequest): unknown {
    const obj: any = {};
    if (message.contentId !== "") {
      obj.contentId = message.contentId;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.contentType !== "") {
      obj.contentType = message.contentType;
    }
    if (message.content !== "") {
      obj.content = message.content;
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    if (message.campaignId !== "0") {
      obj.campaignId = message.campaignId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SubmitContentForModerationRequest>, I>>(
    base?: I,
  ): SubmitContentForModerationRequest {
    return SubmitContentForModerationRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SubmitContentForModerationRequest>, I>>(
    object: I,
  ): SubmitContentForModerationRequest {
    const message = createBaseSubmitContentForModerationRequest();
    message.contentId = object.contentId ?? "";
    message.userId = object.userId ?? "";
    message.contentType = object.contentType ?? "";
    message.content = object.content ?? "";
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    message.campaignId = object.campaignId ?? "0";
    return message;
  },
};

function createBaseSubmitContentForModerationResponse(): SubmitContentForModerationResponse {
  return { result: undefined };
}

export const SubmitContentForModerationResponse: MessageFns<SubmitContentForModerationResponse> = {
  encode(message: SubmitContentForModerationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.result !== undefined) {
      ModerationResult.encode(message.result, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SubmitContentForModerationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubmitContentForModerationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.result = ModerationResult.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SubmitContentForModerationResponse {
    return { result: isSet(object.result) ? ModerationResult.fromJSON(object.result) : undefined };
  },

  toJSON(message: SubmitContentForModerationResponse): unknown {
    const obj: any = {};
    if (message.result !== undefined) {
      obj.result = ModerationResult.toJSON(message.result);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SubmitContentForModerationResponse>, I>>(
    base?: I,
  ): SubmitContentForModerationResponse {
    return SubmitContentForModerationResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SubmitContentForModerationResponse>, I>>(
    object: I,
  ): SubmitContentForModerationResponse {
    const message = createBaseSubmitContentForModerationResponse();
    message.result = (object.result !== undefined && object.result !== null)
      ? ModerationResult.fromPartial(object.result)
      : undefined;
    return message;
  },
};

function createBaseGetModerationResultRequest(): GetModerationResultRequest {
  return { contentId: "", campaignId: "0" };
}

export const GetModerationResultRequest: MessageFns<GetModerationResultRequest> = {
  encode(message: GetModerationResultRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.contentId !== "") {
      writer.uint32(10).string(message.contentId);
    }
    if (message.campaignId !== "0") {
      writer.uint32(16).int64(message.campaignId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetModerationResultRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetModerationResultRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.contentId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.campaignId = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetModerationResultRequest {
    return {
      contentId: isSet(object.contentId) ? globalThis.String(object.contentId) : "",
      campaignId: isSet(object.campaignId) ? globalThis.String(object.campaignId) : "0",
    };
  },

  toJSON(message: GetModerationResultRequest): unknown {
    const obj: any = {};
    if (message.contentId !== "") {
      obj.contentId = message.contentId;
    }
    if (message.campaignId !== "0") {
      obj.campaignId = message.campaignId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetModerationResultRequest>, I>>(base?: I): GetModerationResultRequest {
    return GetModerationResultRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetModerationResultRequest>, I>>(object: I): GetModerationResultRequest {
    const message = createBaseGetModerationResultRequest();
    message.contentId = object.contentId ?? "";
    message.campaignId = object.campaignId ?? "0";
    return message;
  },
};

function createBaseGetModerationResultResponse(): GetModerationResultResponse {
  return { result: undefined };
}

export const GetModerationResultResponse: MessageFns<GetModerationResultResponse> = {
  encode(message: GetModerationResultResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.result !== undefined) {
      ModerationResult.encode(message.result, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetModerationResultResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetModerationResultResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.result = ModerationResult.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetModerationResultResponse {
    return { result: isSet(object.result) ? ModerationResult.fromJSON(object.result) : undefined };
  },

  toJSON(message: GetModerationResultResponse): unknown {
    const obj: any = {};
    if (message.result !== undefined) {
      obj.result = ModerationResult.toJSON(message.result);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetModerationResultResponse>, I>>(base?: I): GetModerationResultResponse {
    return GetModerationResultResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetModerationResultResponse>, I>>(object: I): GetModerationResultResponse {
    const message = createBaseGetModerationResultResponse();
    message.result = (object.result !== undefined && object.result !== null)
      ? ModerationResult.fromPartial(object.result)
      : undefined;
    return message;
  },
};

function createBaseListFlaggedContentRequest(): ListFlaggedContentRequest {
  return { page: 0, pageSize: 0, status: "", campaignId: "0" };
}

export const ListFlaggedContentRequest: MessageFns<ListFlaggedContentRequest> = {
  encode(message: ListFlaggedContentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.page !== 0) {
      writer.uint32(8).int32(message.page);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.status !== "") {
      writer.uint32(26).string(message.status);
    }
    if (message.campaignId !== "0") {
      writer.uint32(32).int64(message.campaignId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListFlaggedContentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListFlaggedContentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.page = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.campaignId = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListFlaggedContentRequest {
    return {
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      campaignId: isSet(object.campaignId) ? globalThis.String(object.campaignId) : "0",
    };
  },

  toJSON(message: ListFlaggedContentRequest): unknown {
    const obj: any = {};
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.campaignId !== "0") {
      obj.campaignId = message.campaignId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListFlaggedContentRequest>, I>>(base?: I): ListFlaggedContentRequest {
    return ListFlaggedContentRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListFlaggedContentRequest>, I>>(object: I): ListFlaggedContentRequest {
    const message = createBaseListFlaggedContentRequest();
    message.page = object.page ?? 0;
    message.pageSize = object.pageSize ?? 0;
    message.status = object.status ?? "";
    message.campaignId = object.campaignId ?? "0";
    return message;
  },
};

function createBaseListFlaggedContentResponse(): ListFlaggedContentResponse {
  return { results: [], totalCount: 0, page: 0, totalPages: 0 };
}

export const ListFlaggedContentResponse: MessageFns<ListFlaggedContentResponse> = {
  encode(message: ListFlaggedContentResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.results) {
      ModerationResult.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.totalCount !== 0) {
      writer.uint32(16).int32(message.totalCount);
    }
    if (message.page !== 0) {
      writer.uint32(24).int32(message.page);
    }
    if (message.totalPages !== 0) {
      writer.uint32(32).int32(message.totalPages);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListFlaggedContentResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListFlaggedContentResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.results.push(ModerationResult.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.totalCount = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.page = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.totalPages = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListFlaggedContentResponse {
    return {
      results: globalThis.Array.isArray(object?.results)
        ? object.results.map((e: any) => ModerationResult.fromJSON(e))
        : [],
      totalCount: isSet(object.totalCount) ? globalThis.Number(object.totalCount) : 0,
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      totalPages: isSet(object.totalPages) ? globalThis.Number(object.totalPages) : 0,
    };
  },

  toJSON(message: ListFlaggedContentResponse): unknown {
    const obj: any = {};
    if (message.results?.length) {
      obj.results = message.results.map((e) => ModerationResult.toJSON(e));
    }
    if (message.totalCount !== 0) {
      obj.totalCount = Math.round(message.totalCount);
    }
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.totalPages !== 0) {
      obj.totalPages = Math.round(message.totalPages);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListFlaggedContentResponse>, I>>(base?: I): ListFlaggedContentResponse {
    return ListFlaggedContentResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListFlaggedContentResponse>, I>>(object: I): ListFlaggedContentResponse {
    const message = createBaseListFlaggedContentResponse();
    message.results = object.results?.map((e) => ModerationResult.fromPartial(e)) || [];
    message.totalCount = object.totalCount ?? 0;
    message.page = object.page ?? 0;
    message.totalPages = object.totalPages ?? 0;
    return message;
  },
};

function createBaseApproveContentRequest(): ApproveContentRequest {
  return { contentId: "", metadata: undefined, campaignId: "0" };
}

export const ApproveContentRequest: MessageFns<ApproveContentRequest> = {
  encode(message: ApproveContentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.contentId !== "") {
      writer.uint32(10).string(message.contentId);
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(18).fork()).join();
    }
    if (message.campaignId !== "0") {
      writer.uint32(24).int64(message.campaignId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ApproveContentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseApproveContentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.contentId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.campaignId = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ApproveContentRequest {
    return {
      contentId: isSet(object.contentId) ? globalThis.String(object.contentId) : "",
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
      campaignId: isSet(object.campaignId) ? globalThis.String(object.campaignId) : "0",
    };
  },

  toJSON(message: ApproveContentRequest): unknown {
    const obj: any = {};
    if (message.contentId !== "") {
      obj.contentId = message.contentId;
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    if (message.campaignId !== "0") {
      obj.campaignId = message.campaignId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ApproveContentRequest>, I>>(base?: I): ApproveContentRequest {
    return ApproveContentRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ApproveContentRequest>, I>>(object: I): ApproveContentRequest {
    const message = createBaseApproveContentRequest();
    message.contentId = object.contentId ?? "";
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    message.campaignId = object.campaignId ?? "0";
    return message;
  },
};

function createBaseApproveContentResponse(): ApproveContentResponse {
  return { result: undefined };
}

export const ApproveContentResponse: MessageFns<ApproveContentResponse> = {
  encode(message: ApproveContentResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.result !== undefined) {
      ModerationResult.encode(message.result, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ApproveContentResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseApproveContentResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.result = ModerationResult.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ApproveContentResponse {
    return { result: isSet(object.result) ? ModerationResult.fromJSON(object.result) : undefined };
  },

  toJSON(message: ApproveContentResponse): unknown {
    const obj: any = {};
    if (message.result !== undefined) {
      obj.result = ModerationResult.toJSON(message.result);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ApproveContentResponse>, I>>(base?: I): ApproveContentResponse {
    return ApproveContentResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ApproveContentResponse>, I>>(object: I): ApproveContentResponse {
    const message = createBaseApproveContentResponse();
    message.result = (object.result !== undefined && object.result !== null)
      ? ModerationResult.fromPartial(object.result)
      : undefined;
    return message;
  },
};

function createBaseRejectContentRequest(): RejectContentRequest {
  return { contentId: "", reason: "", metadata: undefined, campaignId: "0" };
}

export const RejectContentRequest: MessageFns<RejectContentRequest> = {
  encode(message: RejectContentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.contentId !== "") {
      writer.uint32(10).string(message.contentId);
    }
    if (message.reason !== "") {
      writer.uint32(18).string(message.reason);
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(26).fork()).join();
    }
    if (message.campaignId !== "0") {
      writer.uint32(32).int64(message.campaignId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RejectContentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRejectContentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.contentId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.reason = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.campaignId = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RejectContentRequest {
    return {
      contentId: isSet(object.contentId) ? globalThis.String(object.contentId) : "",
      reason: isSet(object.reason) ? globalThis.String(object.reason) : "",
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
      campaignId: isSet(object.campaignId) ? globalThis.String(object.campaignId) : "0",
    };
  },

  toJSON(message: RejectContentRequest): unknown {
    const obj: any = {};
    if (message.contentId !== "") {
      obj.contentId = message.contentId;
    }
    if (message.reason !== "") {
      obj.reason = message.reason;
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    if (message.campaignId !== "0") {
      obj.campaignId = message.campaignId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RejectContentRequest>, I>>(base?: I): RejectContentRequest {
    return RejectContentRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RejectContentRequest>, I>>(object: I): RejectContentRequest {
    const message = createBaseRejectContentRequest();
    message.contentId = object.contentId ?? "";
    message.reason = object.reason ?? "";
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    message.campaignId = object.campaignId ?? "0";
    return message;
  },
};

function createBaseRejectContentResponse(): RejectContentResponse {
  return { result: undefined };
}

export const RejectContentResponse: MessageFns<RejectContentResponse> = {
  encode(message: RejectContentResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.result !== undefined) {
      ModerationResult.encode(message.result, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RejectContentResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRejectContentResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.result = ModerationResult.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RejectContentResponse {
    return { result: isSet(object.result) ? ModerationResult.fromJSON(object.result) : undefined };
  },

  toJSON(message: RejectContentResponse): unknown {
    const obj: any = {};
    if (message.result !== undefined) {
      obj.result = ModerationResult.toJSON(message.result);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RejectContentResponse>, I>>(base?: I): RejectContentResponse {
    return RejectContentResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RejectContentResponse>, I>>(object: I): RejectContentResponse {
    const message = createBaseRejectContentResponse();
    message.result = (object.result !== undefined && object.result !== null)
      ? ModerationResult.fromPartial(object.result)
      : undefined;
    return message;
  },
};

function createBaseContentModeration(): ContentModeration {
  return {
    id: "",
    contentId: "",
    userId: "",
    status: 0,
    reason: "",
    scores: {},
    createdAt: "0",
    updatedAt: "0",
    metadata: undefined,
    campaignId: "0",
  };
}

export const ContentModeration: MessageFns<ContentModeration> = {
  encode(message: ContentModeration, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.contentId !== "") {
      writer.uint32(18).string(message.contentId);
    }
    if (message.userId !== "") {
      writer.uint32(26).string(message.userId);
    }
    if (message.status !== 0) {
      writer.uint32(32).int32(message.status);
    }
    if (message.reason !== "") {
      writer.uint32(42).string(message.reason);
    }
    Object.entries(message.scores).forEach(([key, value]) => {
      ContentModeration_ScoresEntry.encode({ key: key as any, value }, writer.uint32(50).fork()).join();
    });
    if (message.createdAt !== "0") {
      writer.uint32(56).int64(message.createdAt);
    }
    if (message.updatedAt !== "0") {
      writer.uint32(64).int64(message.updatedAt);
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(74).fork()).join();
    }
    if (message.campaignId !== "0") {
      writer.uint32(80).int64(message.campaignId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ContentModeration {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseContentModeration();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.contentId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.reason = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          const entry6 = ContentModeration_ScoresEntry.decode(reader, reader.uint32());
          if (entry6.value !== undefined) {
            message.scores[entry6.key] = entry6.value;
          }
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.createdAt = reader.int64().toString();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.updatedAt = reader.int64().toString();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.campaignId = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ContentModeration {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      contentId: isSet(object.contentId) ? globalThis.String(object.contentId) : "",
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      status: isSet(object.status) ? moderationStatusFromJSON(object.status) : 0,
      reason: isSet(object.reason) ? globalThis.String(object.reason) : "",
      scores: isObject(object.scores)
        ? Object.entries(object.scores).reduce<{ [key: string]: number }>((acc, [key, value]) => {
          acc[key] = Number(value);
          return acc;
        }, {})
        : {},
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "0",
      updatedAt: isSet(object.updatedAt) ? globalThis.String(object.updatedAt) : "0",
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
      campaignId: isSet(object.campaignId) ? globalThis.String(object.campaignId) : "0",
    };
  },

  toJSON(message: ContentModeration): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.contentId !== "") {
      obj.contentId = message.contentId;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.status !== 0) {
      obj.status = moderationStatusToJSON(message.status);
    }
    if (message.reason !== "") {
      obj.reason = message.reason;
    }
    if (message.scores) {
      const entries = Object.entries(message.scores);
      if (entries.length > 0) {
        obj.scores = {};
        entries.forEach(([k, v]) => {
          obj.scores[k] = v;
        });
      }
    }
    if (message.createdAt !== "0") {
      obj.createdAt = message.createdAt;
    }
    if (message.updatedAt !== "0") {
      obj.updatedAt = message.updatedAt;
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    if (message.campaignId !== "0") {
      obj.campaignId = message.campaignId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ContentModeration>, I>>(base?: I): ContentModeration {
    return ContentModeration.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ContentModeration>, I>>(object: I): ContentModeration {
    const message = createBaseContentModeration();
    message.id = object.id ?? "";
    message.contentId = object.contentId ?? "";
    message.userId = object.userId ?? "";
    message.status = object.status ?? 0;
    message.reason = object.reason ?? "";
    message.scores = Object.entries(object.scores ?? {}).reduce<{ [key: string]: number }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.Number(value);
      }
      return acc;
    }, {});
    message.createdAt = object.createdAt ?? "0";
    message.updatedAt = object.updatedAt ?? "0";
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    message.campaignId = object.campaignId ?? "0";
    return message;
  },
};

function createBaseContentModeration_ScoresEntry(): ContentModeration_ScoresEntry {
  return { key: "", value: 0 };
}

export const ContentModeration_ScoresEntry: MessageFns<ContentModeration_ScoresEntry> = {
  encode(message: ContentModeration_ScoresEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== 0) {
      writer.uint32(21).float(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ContentModeration_ScoresEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseContentModeration_ScoresEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 21) {
            break;
          }

          message.value = reader.float();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ContentModeration_ScoresEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.Number(object.value) : 0,
    };
  },

  toJSON(message: ContentModeration_ScoresEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== 0) {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ContentModeration_ScoresEntry>, I>>(base?: I): ContentModeration_ScoresEntry {
    return ContentModeration_ScoresEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ContentModeration_ScoresEntry>, I>>(
    object: I,
  ): ContentModeration_ScoresEntry {
    const message = createBaseContentModeration_ScoresEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? 0;
    return message;
  },
};

export interface ContentModerationService {
  SubmitContentForModeration(request: SubmitContentForModerationRequest): Promise<SubmitContentForModerationResponse>;
  GetModerationResult(request: GetModerationResultRequest): Promise<GetModerationResultResponse>;
  ListFlaggedContent(request: ListFlaggedContentRequest): Promise<ListFlaggedContentResponse>;
  ApproveContent(request: ApproveContentRequest): Promise<ApproveContentResponse>;
  RejectContent(request: RejectContentRequest): Promise<RejectContentResponse>;
}

export const ContentModerationServiceServiceName = "contentmoderation.v1.ContentModerationService";
export class ContentModerationServiceClientImpl implements ContentModerationService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || ContentModerationServiceServiceName;
    this.rpc = rpc;
    this.SubmitContentForModeration = this.SubmitContentForModeration.bind(this);
    this.GetModerationResult = this.GetModerationResult.bind(this);
    this.ListFlaggedContent = this.ListFlaggedContent.bind(this);
    this.ApproveContent = this.ApproveContent.bind(this);
    this.RejectContent = this.RejectContent.bind(this);
  }
  SubmitContentForModeration(request: SubmitContentForModerationRequest): Promise<SubmitContentForModerationResponse> {
    const data = SubmitContentForModerationRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "SubmitContentForModeration", data);
    return promise.then((data) => SubmitContentForModerationResponse.decode(new BinaryReader(data)));
  }

  GetModerationResult(request: GetModerationResultRequest): Promise<GetModerationResultResponse> {
    const data = GetModerationResultRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetModerationResult", data);
    return promise.then((data) => GetModerationResultResponse.decode(new BinaryReader(data)));
  }

  ListFlaggedContent(request: ListFlaggedContentRequest): Promise<ListFlaggedContentResponse> {
    const data = ListFlaggedContentRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ListFlaggedContent", data);
    return promise.then((data) => ListFlaggedContentResponse.decode(new BinaryReader(data)));
  }

  ApproveContent(request: ApproveContentRequest): Promise<ApproveContentResponse> {
    const data = ApproveContentRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ApproveContent", data);
    return promise.then((data) => ApproveContentResponse.decode(new BinaryReader(data)));
  }

  RejectContent(request: RejectContentRequest): Promise<RejectContentResponse> {
    const data = RejectContentRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "RejectContent", data);
    return promise.then((data) => RejectContentResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
