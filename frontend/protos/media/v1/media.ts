// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v5.29.3
// source: media/v1/media.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Metadata } from "../../common/v1/metadata";
import { Timestamp } from "../../google/protobuf/timestamp";

export const protobufPackage = "media.v1";

/** Media types */
export enum MediaType {
  MEDIA_TYPE_UNSPECIFIED = 0,
  /** MEDIA_TYPE_LIGHT - < 500KB, stored in DB */
  MEDIA_TYPE_LIGHT = 1,
  /** MEDIA_TYPE_HEAVY - >= 500KB, stored externally */
  MEDIA_TYPE_HEAVY = 2,
  UNRECOGNIZED = -1,
}

export function mediaTypeFromJSON(object: any): MediaType {
  switch (object) {
    case 0:
    case "MEDIA_TYPE_UNSPECIFIED":
      return MediaType.MEDIA_TYPE_UNSPECIFIED;
    case 1:
    case "MEDIA_TYPE_LIGHT":
      return MediaType.MEDIA_TYPE_LIGHT;
    case 2:
    case "MEDIA_TYPE_HEAVY":
      return MediaType.MEDIA_TYPE_HEAVY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return MediaType.UNRECOGNIZED;
  }
}

export function mediaTypeToJSON(object: MediaType): string {
  switch (object) {
    case MediaType.MEDIA_TYPE_UNSPECIFIED:
      return "MEDIA_TYPE_UNSPECIFIED";
    case MediaType.MEDIA_TYPE_LIGHT:
      return "MEDIA_TYPE_LIGHT";
    case MediaType.MEDIA_TYPE_HEAVY:
      return "MEDIA_TYPE_HEAVY";
    case MediaType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Media represents a media file and its metadata */
export interface Media {
  id: string;
  masterId: string;
  masterUuid: string;
  userId: string;
  type: MediaType;
  name: string;
  mimeType: string;
  size: string;
  data: Uint8Array;
  url: string;
  isSystem: boolean;
  createdAt?: Date | undefined;
  updatedAt?: Date | undefined;
  deletedAt?: Date | undefined;
  metadata?: Metadata | undefined;
}

/** Request to upload a light media */
export interface UploadLightMediaRequest {
  userId: string;
  name: string;
  mimeType: string;
  size: string;
  data: Uint8Array;
  metadata?: Metadata | undefined;
}

/** Response for uploading a light media */
export interface UploadLightMediaResponse {
  media?: Media | undefined;
  status: string;
  error: string;
}

/** Request to start a heavy media upload */
export interface StartHeavyMediaUploadRequest {
  userId: string;
  name: string;
  mimeType: string;
  size: string;
  metadata?: Metadata | undefined;
}

/** Response for starting a heavy media upload */
export interface StartHeavyMediaUploadResponse {
  uploadId: string;
  chunkSize: number;
  chunksTotal: number;
  status: string;
  error: string;
}

/** Chunk of media data for streaming */
export interface MediaChunk {
  uploadId: string;
  data: Uint8Array;
  sequence: number;
  checksum: string;
}

/** Request to stream media chunks */
export interface StreamMediaChunkRequest {
  uploadId: string;
  chunk?: MediaChunk | undefined;
}

/** Response for streaming media chunks */
export interface StreamMediaChunkResponse {
  uploadId: string;
  sequence: number;
  status: string;
  error: string;
}

/** Request to complete an media upload */
export interface CompleteMediaUploadRequest {
  uploadId: string;
  userId: string;
}

/** Response for completing an media upload */
export interface CompleteMediaUploadResponse {
  media?: Media | undefined;
  status: string;
  error: string;
}

/** Request to get an media */
export interface GetMediaRequest {
  id: string;
  userId: string;
}

/** Response for getting an media */
export interface GetMediaResponse {
  media?: Media | undefined;
  status: string;
  error: string;
}

/** Request to stream media content */
export interface StreamMediaContentRequest {
  id: string;
  userId: string;
  offset: string;
  length: string;
}

/** Response for streaming media content */
export interface StreamMediaContentResponse {
  data: Uint8Array;
  offset: string;
  length: string;
  endOfStream: boolean;
  status: string;
  error: string;
}

/** Request to delete an media */
export interface DeleteMediaRequest {
  id: string;
  userId: string;
}

/** Response for deleting an media */
export interface DeleteMediaResponse {
  id: string;
  status: string;
  error: string;
}

/** Request to list user media */
export interface ListUserMediaRequest {
  userId: string;
  pageSize: number;
  pageToken: string;
  filters?: Metadata | undefined;
}

/** Response for listing user media */
export interface ListUserMediaResponse {
  media: Media[];
  nextPageToken: string;
  totalCount: number;
  status: string;
  error: string;
}

/** Request to list system media */
export interface ListSystemMediaRequest {
  pageSize: number;
  pageToken: string;
  filters?: Metadata | undefined;
}

/** Response for listing system media */
export interface ListSystemMediaResponse {
  media: Media[];
  nextPageToken: string;
  totalCount: number;
  status: string;
  error: string;
}

/** Request to subscribe to user media updates */
export interface SubscribeToUserMediaRequest {
  userId: string;
}

/** Response for subscribing to user media updates */
export interface SubscribeToUserMediaResponse {
  media: Media[];
  status: string;
  error: string;
}

/** Request to subscribe to system media updates */
export interface SubscribeToSystemMediaRequest {
}

/** Response for subscribing to system media updates */
export interface SubscribeToSystemMediaResponse {
  media: Media[];
  status: string;
  error: string;
}

/** Request to broadcast a system media */
export interface BroadcastSystemMediaRequest {
  id: string;
  userId: string;
}

/** Response for broadcasting a system media */
export interface BroadcastSystemMediaResponse {
  status: string;
  error: string;
}

function createBaseMedia(): Media {
  return {
    id: "",
    masterId: "0",
    masterUuid: "",
    userId: "",
    type: 0,
    name: "",
    mimeType: "",
    size: "0",
    data: new Uint8Array(0),
    url: "",
    isSystem: false,
    createdAt: undefined,
    updatedAt: undefined,
    deletedAt: undefined,
    metadata: undefined,
  };
}

export const Media: MessageFns<Media> = {
  encode(message: Media, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.masterId !== "0") {
      writer.uint32(16).int64(message.masterId);
    }
    if (message.masterUuid !== "") {
      writer.uint32(122).string(message.masterUuid);
    }
    if (message.userId !== "") {
      writer.uint32(26).string(message.userId);
    }
    if (message.type !== 0) {
      writer.uint32(32).int32(message.type);
    }
    if (message.name !== "") {
      writer.uint32(42).string(message.name);
    }
    if (message.mimeType !== "") {
      writer.uint32(50).string(message.mimeType);
    }
    if (message.size !== "0") {
      writer.uint32(56).int64(message.size);
    }
    if (message.data.length !== 0) {
      writer.uint32(66).bytes(message.data);
    }
    if (message.url !== "") {
      writer.uint32(74).string(message.url);
    }
    if (message.isSystem !== false) {
      writer.uint32(80).bool(message.isSystem);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(90).fork()).join();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.updatedAt), writer.uint32(98).fork()).join();
    }
    if (message.deletedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.deletedAt), writer.uint32(106).fork()).join();
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(114).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Media {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMedia();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.masterId = reader.int64().toString();
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.masterUuid = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.mimeType = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.size = reader.int64().toString();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.data = reader.bytes();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.url = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.isSystem = reader.bool();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.updatedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.deletedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Media {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      masterId: isSet(object.masterId) ? globalThis.String(object.masterId) : "0",
      masterUuid: isSet(object.masterUuid) ? globalThis.String(object.masterUuid) : "",
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      type: isSet(object.type) ? mediaTypeFromJSON(object.type) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      mimeType: isSet(object.mimeType) ? globalThis.String(object.mimeType) : "",
      size: isSet(object.size) ? globalThis.String(object.size) : "0",
      data: isSet(object.data) ? bytesFromBase64(object.data) : new Uint8Array(0),
      url: isSet(object.url) ? globalThis.String(object.url) : "",
      isSystem: isSet(object.isSystem) ? globalThis.Boolean(object.isSystem) : false,
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
      deletedAt: isSet(object.deletedAt) ? fromJsonTimestamp(object.deletedAt) : undefined,
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
    };
  },

  toJSON(message: Media): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.masterId !== "0") {
      obj.masterId = message.masterId;
    }
    if (message.masterUuid !== "") {
      obj.masterUuid = message.masterUuid;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.type !== 0) {
      obj.type = mediaTypeToJSON(message.type);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.mimeType !== "") {
      obj.mimeType = message.mimeType;
    }
    if (message.size !== "0") {
      obj.size = message.size;
    }
    if (message.data.length !== 0) {
      obj.data = base64FromBytes(message.data);
    }
    if (message.url !== "") {
      obj.url = message.url;
    }
    if (message.isSystem !== false) {
      obj.isSystem = message.isSystem;
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = message.updatedAt.toISOString();
    }
    if (message.deletedAt !== undefined) {
      obj.deletedAt = message.deletedAt.toISOString();
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Media>, I>>(base?: I): Media {
    return Media.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Media>, I>>(object: I): Media {
    const message = createBaseMedia();
    message.id = object.id ?? "";
    message.masterId = object.masterId ?? "0";
    message.masterUuid = object.masterUuid ?? "";
    message.userId = object.userId ?? "";
    message.type = object.type ?? 0;
    message.name = object.name ?? "";
    message.mimeType = object.mimeType ?? "";
    message.size = object.size ?? "0";
    message.data = object.data ?? new Uint8Array(0);
    message.url = object.url ?? "";
    message.isSystem = object.isSystem ?? false;
    message.createdAt = object.createdAt ?? undefined;
    message.updatedAt = object.updatedAt ?? undefined;
    message.deletedAt = object.deletedAt ?? undefined;
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    return message;
  },
};

function createBaseUploadLightMediaRequest(): UploadLightMediaRequest {
  return { userId: "", name: "", mimeType: "", size: "0", data: new Uint8Array(0), metadata: undefined };
}

export const UploadLightMediaRequest: MessageFns<UploadLightMediaRequest> = {
  encode(message: UploadLightMediaRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.mimeType !== "") {
      writer.uint32(26).string(message.mimeType);
    }
    if (message.size !== "0") {
      writer.uint32(32).int64(message.size);
    }
    if (message.data.length !== 0) {
      writer.uint32(42).bytes(message.data);
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UploadLightMediaRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUploadLightMediaRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.mimeType = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.size = reader.int64().toString();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.data = reader.bytes();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UploadLightMediaRequest {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      mimeType: isSet(object.mimeType) ? globalThis.String(object.mimeType) : "",
      size: isSet(object.size) ? globalThis.String(object.size) : "0",
      data: isSet(object.data) ? bytesFromBase64(object.data) : new Uint8Array(0),
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
    };
  },

  toJSON(message: UploadLightMediaRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.mimeType !== "") {
      obj.mimeType = message.mimeType;
    }
    if (message.size !== "0") {
      obj.size = message.size;
    }
    if (message.data.length !== 0) {
      obj.data = base64FromBytes(message.data);
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UploadLightMediaRequest>, I>>(base?: I): UploadLightMediaRequest {
    return UploadLightMediaRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UploadLightMediaRequest>, I>>(object: I): UploadLightMediaRequest {
    const message = createBaseUploadLightMediaRequest();
    message.userId = object.userId ?? "";
    message.name = object.name ?? "";
    message.mimeType = object.mimeType ?? "";
    message.size = object.size ?? "0";
    message.data = object.data ?? new Uint8Array(0);
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    return message;
  },
};

function createBaseUploadLightMediaResponse(): UploadLightMediaResponse {
  return { media: undefined, status: "", error: "" };
}

export const UploadLightMediaResponse: MessageFns<UploadLightMediaResponse> = {
  encode(message: UploadLightMediaResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.media !== undefined) {
      Media.encode(message.media, writer.uint32(10).fork()).join();
    }
    if (message.status !== "") {
      writer.uint32(18).string(message.status);
    }
    if (message.error !== "") {
      writer.uint32(26).string(message.error);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UploadLightMediaResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUploadLightMediaResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.media = Media.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.error = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UploadLightMediaResponse {
    return {
      media: isSet(object.media) ? Media.fromJSON(object.media) : undefined,
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      error: isSet(object.error) ? globalThis.String(object.error) : "",
    };
  },

  toJSON(message: UploadLightMediaResponse): unknown {
    const obj: any = {};
    if (message.media !== undefined) {
      obj.media = Media.toJSON(message.media);
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.error !== "") {
      obj.error = message.error;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UploadLightMediaResponse>, I>>(base?: I): UploadLightMediaResponse {
    return UploadLightMediaResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UploadLightMediaResponse>, I>>(object: I): UploadLightMediaResponse {
    const message = createBaseUploadLightMediaResponse();
    message.media = (object.media !== undefined && object.media !== null) ? Media.fromPartial(object.media) : undefined;
    message.status = object.status ?? "";
    message.error = object.error ?? "";
    return message;
  },
};

function createBaseStartHeavyMediaUploadRequest(): StartHeavyMediaUploadRequest {
  return { userId: "", name: "", mimeType: "", size: "0", metadata: undefined };
}

export const StartHeavyMediaUploadRequest: MessageFns<StartHeavyMediaUploadRequest> = {
  encode(message: StartHeavyMediaUploadRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.mimeType !== "") {
      writer.uint32(26).string(message.mimeType);
    }
    if (message.size !== "0") {
      writer.uint32(32).int64(message.size);
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StartHeavyMediaUploadRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStartHeavyMediaUploadRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.mimeType = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.size = reader.int64().toString();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StartHeavyMediaUploadRequest {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      mimeType: isSet(object.mimeType) ? globalThis.String(object.mimeType) : "",
      size: isSet(object.size) ? globalThis.String(object.size) : "0",
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
    };
  },

  toJSON(message: StartHeavyMediaUploadRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.mimeType !== "") {
      obj.mimeType = message.mimeType;
    }
    if (message.size !== "0") {
      obj.size = message.size;
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StartHeavyMediaUploadRequest>, I>>(base?: I): StartHeavyMediaUploadRequest {
    return StartHeavyMediaUploadRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StartHeavyMediaUploadRequest>, I>>(object: I): StartHeavyMediaUploadRequest {
    const message = createBaseStartHeavyMediaUploadRequest();
    message.userId = object.userId ?? "";
    message.name = object.name ?? "";
    message.mimeType = object.mimeType ?? "";
    message.size = object.size ?? "0";
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    return message;
  },
};

function createBaseStartHeavyMediaUploadResponse(): StartHeavyMediaUploadResponse {
  return { uploadId: "", chunkSize: 0, chunksTotal: 0, status: "", error: "" };
}

export const StartHeavyMediaUploadResponse: MessageFns<StartHeavyMediaUploadResponse> = {
  encode(message: StartHeavyMediaUploadResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.uploadId !== "") {
      writer.uint32(10).string(message.uploadId);
    }
    if (message.chunkSize !== 0) {
      writer.uint32(16).int32(message.chunkSize);
    }
    if (message.chunksTotal !== 0) {
      writer.uint32(24).int32(message.chunksTotal);
    }
    if (message.status !== "") {
      writer.uint32(34).string(message.status);
    }
    if (message.error !== "") {
      writer.uint32(42).string(message.error);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StartHeavyMediaUploadResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStartHeavyMediaUploadResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.uploadId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.chunkSize = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.chunksTotal = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.error = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StartHeavyMediaUploadResponse {
    return {
      uploadId: isSet(object.uploadId) ? globalThis.String(object.uploadId) : "",
      chunkSize: isSet(object.chunkSize) ? globalThis.Number(object.chunkSize) : 0,
      chunksTotal: isSet(object.chunksTotal) ? globalThis.Number(object.chunksTotal) : 0,
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      error: isSet(object.error) ? globalThis.String(object.error) : "",
    };
  },

  toJSON(message: StartHeavyMediaUploadResponse): unknown {
    const obj: any = {};
    if (message.uploadId !== "") {
      obj.uploadId = message.uploadId;
    }
    if (message.chunkSize !== 0) {
      obj.chunkSize = Math.round(message.chunkSize);
    }
    if (message.chunksTotal !== 0) {
      obj.chunksTotal = Math.round(message.chunksTotal);
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.error !== "") {
      obj.error = message.error;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StartHeavyMediaUploadResponse>, I>>(base?: I): StartHeavyMediaUploadResponse {
    return StartHeavyMediaUploadResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StartHeavyMediaUploadResponse>, I>>(
    object: I,
  ): StartHeavyMediaUploadResponse {
    const message = createBaseStartHeavyMediaUploadResponse();
    message.uploadId = object.uploadId ?? "";
    message.chunkSize = object.chunkSize ?? 0;
    message.chunksTotal = object.chunksTotal ?? 0;
    message.status = object.status ?? "";
    message.error = object.error ?? "";
    return message;
  },
};

function createBaseMediaChunk(): MediaChunk {
  return { uploadId: "", data: new Uint8Array(0), sequence: 0, checksum: "" };
}

export const MediaChunk: MessageFns<MediaChunk> = {
  encode(message: MediaChunk, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.uploadId !== "") {
      writer.uint32(10).string(message.uploadId);
    }
    if (message.data.length !== 0) {
      writer.uint32(18).bytes(message.data);
    }
    if (message.sequence !== 0) {
      writer.uint32(24).uint32(message.sequence);
    }
    if (message.checksum !== "") {
      writer.uint32(34).string(message.checksum);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MediaChunk {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMediaChunk();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.uploadId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.data = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.sequence = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.checksum = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MediaChunk {
    return {
      uploadId: isSet(object.uploadId) ? globalThis.String(object.uploadId) : "",
      data: isSet(object.data) ? bytesFromBase64(object.data) : new Uint8Array(0),
      sequence: isSet(object.sequence) ? globalThis.Number(object.sequence) : 0,
      checksum: isSet(object.checksum) ? globalThis.String(object.checksum) : "",
    };
  },

  toJSON(message: MediaChunk): unknown {
    const obj: any = {};
    if (message.uploadId !== "") {
      obj.uploadId = message.uploadId;
    }
    if (message.data.length !== 0) {
      obj.data = base64FromBytes(message.data);
    }
    if (message.sequence !== 0) {
      obj.sequence = Math.round(message.sequence);
    }
    if (message.checksum !== "") {
      obj.checksum = message.checksum;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MediaChunk>, I>>(base?: I): MediaChunk {
    return MediaChunk.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MediaChunk>, I>>(object: I): MediaChunk {
    const message = createBaseMediaChunk();
    message.uploadId = object.uploadId ?? "";
    message.data = object.data ?? new Uint8Array(0);
    message.sequence = object.sequence ?? 0;
    message.checksum = object.checksum ?? "";
    return message;
  },
};

function createBaseStreamMediaChunkRequest(): StreamMediaChunkRequest {
  return { uploadId: "", chunk: undefined };
}

export const StreamMediaChunkRequest: MessageFns<StreamMediaChunkRequest> = {
  encode(message: StreamMediaChunkRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.uploadId !== "") {
      writer.uint32(10).string(message.uploadId);
    }
    if (message.chunk !== undefined) {
      MediaChunk.encode(message.chunk, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StreamMediaChunkRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamMediaChunkRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.uploadId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.chunk = MediaChunk.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamMediaChunkRequest {
    return {
      uploadId: isSet(object.uploadId) ? globalThis.String(object.uploadId) : "",
      chunk: isSet(object.chunk) ? MediaChunk.fromJSON(object.chunk) : undefined,
    };
  },

  toJSON(message: StreamMediaChunkRequest): unknown {
    const obj: any = {};
    if (message.uploadId !== "") {
      obj.uploadId = message.uploadId;
    }
    if (message.chunk !== undefined) {
      obj.chunk = MediaChunk.toJSON(message.chunk);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StreamMediaChunkRequest>, I>>(base?: I): StreamMediaChunkRequest {
    return StreamMediaChunkRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StreamMediaChunkRequest>, I>>(object: I): StreamMediaChunkRequest {
    const message = createBaseStreamMediaChunkRequest();
    message.uploadId = object.uploadId ?? "";
    message.chunk = (object.chunk !== undefined && object.chunk !== null)
      ? MediaChunk.fromPartial(object.chunk)
      : undefined;
    return message;
  },
};

function createBaseStreamMediaChunkResponse(): StreamMediaChunkResponse {
  return { uploadId: "", sequence: 0, status: "", error: "" };
}

export const StreamMediaChunkResponse: MessageFns<StreamMediaChunkResponse> = {
  encode(message: StreamMediaChunkResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.uploadId !== "") {
      writer.uint32(10).string(message.uploadId);
    }
    if (message.sequence !== 0) {
      writer.uint32(16).uint32(message.sequence);
    }
    if (message.status !== "") {
      writer.uint32(26).string(message.status);
    }
    if (message.error !== "") {
      writer.uint32(34).string(message.error);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StreamMediaChunkResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamMediaChunkResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.uploadId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.sequence = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.error = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamMediaChunkResponse {
    return {
      uploadId: isSet(object.uploadId) ? globalThis.String(object.uploadId) : "",
      sequence: isSet(object.sequence) ? globalThis.Number(object.sequence) : 0,
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      error: isSet(object.error) ? globalThis.String(object.error) : "",
    };
  },

  toJSON(message: StreamMediaChunkResponse): unknown {
    const obj: any = {};
    if (message.uploadId !== "") {
      obj.uploadId = message.uploadId;
    }
    if (message.sequence !== 0) {
      obj.sequence = Math.round(message.sequence);
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.error !== "") {
      obj.error = message.error;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StreamMediaChunkResponse>, I>>(base?: I): StreamMediaChunkResponse {
    return StreamMediaChunkResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StreamMediaChunkResponse>, I>>(object: I): StreamMediaChunkResponse {
    const message = createBaseStreamMediaChunkResponse();
    message.uploadId = object.uploadId ?? "";
    message.sequence = object.sequence ?? 0;
    message.status = object.status ?? "";
    message.error = object.error ?? "";
    return message;
  },
};

function createBaseCompleteMediaUploadRequest(): CompleteMediaUploadRequest {
  return { uploadId: "", userId: "" };
}

export const CompleteMediaUploadRequest: MessageFns<CompleteMediaUploadRequest> = {
  encode(message: CompleteMediaUploadRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.uploadId !== "") {
      writer.uint32(10).string(message.uploadId);
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CompleteMediaUploadRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCompleteMediaUploadRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.uploadId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CompleteMediaUploadRequest {
    return {
      uploadId: isSet(object.uploadId) ? globalThis.String(object.uploadId) : "",
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
    };
  },

  toJSON(message: CompleteMediaUploadRequest): unknown {
    const obj: any = {};
    if (message.uploadId !== "") {
      obj.uploadId = message.uploadId;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CompleteMediaUploadRequest>, I>>(base?: I): CompleteMediaUploadRequest {
    return CompleteMediaUploadRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CompleteMediaUploadRequest>, I>>(object: I): CompleteMediaUploadRequest {
    const message = createBaseCompleteMediaUploadRequest();
    message.uploadId = object.uploadId ?? "";
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseCompleteMediaUploadResponse(): CompleteMediaUploadResponse {
  return { media: undefined, status: "", error: "" };
}

export const CompleteMediaUploadResponse: MessageFns<CompleteMediaUploadResponse> = {
  encode(message: CompleteMediaUploadResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.media !== undefined) {
      Media.encode(message.media, writer.uint32(10).fork()).join();
    }
    if (message.status !== "") {
      writer.uint32(18).string(message.status);
    }
    if (message.error !== "") {
      writer.uint32(26).string(message.error);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CompleteMediaUploadResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCompleteMediaUploadResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.media = Media.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.error = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CompleteMediaUploadResponse {
    return {
      media: isSet(object.media) ? Media.fromJSON(object.media) : undefined,
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      error: isSet(object.error) ? globalThis.String(object.error) : "",
    };
  },

  toJSON(message: CompleteMediaUploadResponse): unknown {
    const obj: any = {};
    if (message.media !== undefined) {
      obj.media = Media.toJSON(message.media);
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.error !== "") {
      obj.error = message.error;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CompleteMediaUploadResponse>, I>>(base?: I): CompleteMediaUploadResponse {
    return CompleteMediaUploadResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CompleteMediaUploadResponse>, I>>(object: I): CompleteMediaUploadResponse {
    const message = createBaseCompleteMediaUploadResponse();
    message.media = (object.media !== undefined && object.media !== null) ? Media.fromPartial(object.media) : undefined;
    message.status = object.status ?? "";
    message.error = object.error ?? "";
    return message;
  },
};

function createBaseGetMediaRequest(): GetMediaRequest {
  return { id: "", userId: "" };
}

export const GetMediaRequest: MessageFns<GetMediaRequest> = {
  encode(message: GetMediaRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetMediaRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetMediaRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetMediaRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
    };
  },

  toJSON(message: GetMediaRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetMediaRequest>, I>>(base?: I): GetMediaRequest {
    return GetMediaRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetMediaRequest>, I>>(object: I): GetMediaRequest {
    const message = createBaseGetMediaRequest();
    message.id = object.id ?? "";
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseGetMediaResponse(): GetMediaResponse {
  return { media: undefined, status: "", error: "" };
}

export const GetMediaResponse: MessageFns<GetMediaResponse> = {
  encode(message: GetMediaResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.media !== undefined) {
      Media.encode(message.media, writer.uint32(10).fork()).join();
    }
    if (message.status !== "") {
      writer.uint32(18).string(message.status);
    }
    if (message.error !== "") {
      writer.uint32(26).string(message.error);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetMediaResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetMediaResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.media = Media.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.error = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetMediaResponse {
    return {
      media: isSet(object.media) ? Media.fromJSON(object.media) : undefined,
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      error: isSet(object.error) ? globalThis.String(object.error) : "",
    };
  },

  toJSON(message: GetMediaResponse): unknown {
    const obj: any = {};
    if (message.media !== undefined) {
      obj.media = Media.toJSON(message.media);
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.error !== "") {
      obj.error = message.error;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetMediaResponse>, I>>(base?: I): GetMediaResponse {
    return GetMediaResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetMediaResponse>, I>>(object: I): GetMediaResponse {
    const message = createBaseGetMediaResponse();
    message.media = (object.media !== undefined && object.media !== null) ? Media.fromPartial(object.media) : undefined;
    message.status = object.status ?? "";
    message.error = object.error ?? "";
    return message;
  },
};

function createBaseStreamMediaContentRequest(): StreamMediaContentRequest {
  return { id: "", userId: "", offset: "0", length: "0" };
}

export const StreamMediaContentRequest: MessageFns<StreamMediaContentRequest> = {
  encode(message: StreamMediaContentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    if (message.offset !== "0") {
      writer.uint32(24).int64(message.offset);
    }
    if (message.length !== "0") {
      writer.uint32(32).int64(message.length);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StreamMediaContentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamMediaContentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.offset = reader.int64().toString();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.length = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamMediaContentRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      offset: isSet(object.offset) ? globalThis.String(object.offset) : "0",
      length: isSet(object.length) ? globalThis.String(object.length) : "0",
    };
  },

  toJSON(message: StreamMediaContentRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.offset !== "0") {
      obj.offset = message.offset;
    }
    if (message.length !== "0") {
      obj.length = message.length;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StreamMediaContentRequest>, I>>(base?: I): StreamMediaContentRequest {
    return StreamMediaContentRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StreamMediaContentRequest>, I>>(object: I): StreamMediaContentRequest {
    const message = createBaseStreamMediaContentRequest();
    message.id = object.id ?? "";
    message.userId = object.userId ?? "";
    message.offset = object.offset ?? "0";
    message.length = object.length ?? "0";
    return message;
  },
};

function createBaseStreamMediaContentResponse(): StreamMediaContentResponse {
  return { data: new Uint8Array(0), offset: "0", length: "0", endOfStream: false, status: "", error: "" };
}

export const StreamMediaContentResponse: MessageFns<StreamMediaContentResponse> = {
  encode(message: StreamMediaContentResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data.length !== 0) {
      writer.uint32(10).bytes(message.data);
    }
    if (message.offset !== "0") {
      writer.uint32(16).int64(message.offset);
    }
    if (message.length !== "0") {
      writer.uint32(24).int64(message.length);
    }
    if (message.endOfStream !== false) {
      writer.uint32(32).bool(message.endOfStream);
    }
    if (message.status !== "") {
      writer.uint32(42).string(message.status);
    }
    if (message.error !== "") {
      writer.uint32(50).string(message.error);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StreamMediaContentResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamMediaContentResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.offset = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.length = reader.int64().toString();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.endOfStream = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.error = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamMediaContentResponse {
    return {
      data: isSet(object.data) ? bytesFromBase64(object.data) : new Uint8Array(0),
      offset: isSet(object.offset) ? globalThis.String(object.offset) : "0",
      length: isSet(object.length) ? globalThis.String(object.length) : "0",
      endOfStream: isSet(object.endOfStream) ? globalThis.Boolean(object.endOfStream) : false,
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      error: isSet(object.error) ? globalThis.String(object.error) : "",
    };
  },

  toJSON(message: StreamMediaContentResponse): unknown {
    const obj: any = {};
    if (message.data.length !== 0) {
      obj.data = base64FromBytes(message.data);
    }
    if (message.offset !== "0") {
      obj.offset = message.offset;
    }
    if (message.length !== "0") {
      obj.length = message.length;
    }
    if (message.endOfStream !== false) {
      obj.endOfStream = message.endOfStream;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.error !== "") {
      obj.error = message.error;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StreamMediaContentResponse>, I>>(base?: I): StreamMediaContentResponse {
    return StreamMediaContentResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StreamMediaContentResponse>, I>>(object: I): StreamMediaContentResponse {
    const message = createBaseStreamMediaContentResponse();
    message.data = object.data ?? new Uint8Array(0);
    message.offset = object.offset ?? "0";
    message.length = object.length ?? "0";
    message.endOfStream = object.endOfStream ?? false;
    message.status = object.status ?? "";
    message.error = object.error ?? "";
    return message;
  },
};

function createBaseDeleteMediaRequest(): DeleteMediaRequest {
  return { id: "", userId: "" };
}

export const DeleteMediaRequest: MessageFns<DeleteMediaRequest> = {
  encode(message: DeleteMediaRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteMediaRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteMediaRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteMediaRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
    };
  },

  toJSON(message: DeleteMediaRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteMediaRequest>, I>>(base?: I): DeleteMediaRequest {
    return DeleteMediaRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteMediaRequest>, I>>(object: I): DeleteMediaRequest {
    const message = createBaseDeleteMediaRequest();
    message.id = object.id ?? "";
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseDeleteMediaResponse(): DeleteMediaResponse {
  return { id: "", status: "", error: "" };
}

export const DeleteMediaResponse: MessageFns<DeleteMediaResponse> = {
  encode(message: DeleteMediaResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.status !== "") {
      writer.uint32(18).string(message.status);
    }
    if (message.error !== "") {
      writer.uint32(26).string(message.error);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteMediaResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteMediaResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.error = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteMediaResponse {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      error: isSet(object.error) ? globalThis.String(object.error) : "",
    };
  },

  toJSON(message: DeleteMediaResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.error !== "") {
      obj.error = message.error;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteMediaResponse>, I>>(base?: I): DeleteMediaResponse {
    return DeleteMediaResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteMediaResponse>, I>>(object: I): DeleteMediaResponse {
    const message = createBaseDeleteMediaResponse();
    message.id = object.id ?? "";
    message.status = object.status ?? "";
    message.error = object.error ?? "";
    return message;
  },
};

function createBaseListUserMediaRequest(): ListUserMediaRequest {
  return { userId: "", pageSize: 0, pageToken: "", filters: undefined };
}

export const ListUserMediaRequest: MessageFns<ListUserMediaRequest> = {
  encode(message: ListUserMediaRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.filters !== undefined) {
      Metadata.encode(message.filters, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListUserMediaRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListUserMediaRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.filters = Metadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListUserMediaRequest {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filters: isSet(object.filters) ? Metadata.fromJSON(object.filters) : undefined,
    };
  },

  toJSON(message: ListUserMediaRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filters !== undefined) {
      obj.filters = Metadata.toJSON(message.filters);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListUserMediaRequest>, I>>(base?: I): ListUserMediaRequest {
    return ListUserMediaRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListUserMediaRequest>, I>>(object: I): ListUserMediaRequest {
    const message = createBaseListUserMediaRequest();
    message.userId = object.userId ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filters = (object.filters !== undefined && object.filters !== null)
      ? Metadata.fromPartial(object.filters)
      : undefined;
    return message;
  },
};

function createBaseListUserMediaResponse(): ListUserMediaResponse {
  return { media: [], nextPageToken: "", totalCount: 0, status: "", error: "" };
}

export const ListUserMediaResponse: MessageFns<ListUserMediaResponse> = {
  encode(message: ListUserMediaResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.media) {
      Media.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    if (message.totalCount !== 0) {
      writer.uint32(24).int32(message.totalCount);
    }
    if (message.status !== "") {
      writer.uint32(34).string(message.status);
    }
    if (message.error !== "") {
      writer.uint32(42).string(message.error);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListUserMediaResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListUserMediaResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.media.push(Media.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.totalCount = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.error = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListUserMediaResponse {
    return {
      media: globalThis.Array.isArray(object?.media) ? object.media.map((e: any) => Media.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      totalCount: isSet(object.totalCount) ? globalThis.Number(object.totalCount) : 0,
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      error: isSet(object.error) ? globalThis.String(object.error) : "",
    };
  },

  toJSON(message: ListUserMediaResponse): unknown {
    const obj: any = {};
    if (message.media?.length) {
      obj.media = message.media.map((e) => Media.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.totalCount !== 0) {
      obj.totalCount = Math.round(message.totalCount);
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.error !== "") {
      obj.error = message.error;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListUserMediaResponse>, I>>(base?: I): ListUserMediaResponse {
    return ListUserMediaResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListUserMediaResponse>, I>>(object: I): ListUserMediaResponse {
    const message = createBaseListUserMediaResponse();
    message.media = object.media?.map((e) => Media.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.totalCount = object.totalCount ?? 0;
    message.status = object.status ?? "";
    message.error = object.error ?? "";
    return message;
  },
};

function createBaseListSystemMediaRequest(): ListSystemMediaRequest {
  return { pageSize: 0, pageToken: "", filters: undefined };
}

export const ListSystemMediaRequest: MessageFns<ListSystemMediaRequest> = {
  encode(message: ListSystemMediaRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pageSize !== 0) {
      writer.uint32(8).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(18).string(message.pageToken);
    }
    if (message.filters !== undefined) {
      Metadata.encode(message.filters, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListSystemMediaRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSystemMediaRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.filters = Metadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSystemMediaRequest {
    return {
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      filters: isSet(object.filters) ? Metadata.fromJSON(object.filters) : undefined,
    };
  },

  toJSON(message: ListSystemMediaRequest): unknown {
    const obj: any = {};
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.filters !== undefined) {
      obj.filters = Metadata.toJSON(message.filters);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListSystemMediaRequest>, I>>(base?: I): ListSystemMediaRequest {
    return ListSystemMediaRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListSystemMediaRequest>, I>>(object: I): ListSystemMediaRequest {
    const message = createBaseListSystemMediaRequest();
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.filters = (object.filters !== undefined && object.filters !== null)
      ? Metadata.fromPartial(object.filters)
      : undefined;
    return message;
  },
};

function createBaseListSystemMediaResponse(): ListSystemMediaResponse {
  return { media: [], nextPageToken: "", totalCount: 0, status: "", error: "" };
}

export const ListSystemMediaResponse: MessageFns<ListSystemMediaResponse> = {
  encode(message: ListSystemMediaResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.media) {
      Media.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    if (message.totalCount !== 0) {
      writer.uint32(24).int32(message.totalCount);
    }
    if (message.status !== "") {
      writer.uint32(34).string(message.status);
    }
    if (message.error !== "") {
      writer.uint32(42).string(message.error);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListSystemMediaResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListSystemMediaResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.media.push(Media.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.totalCount = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.error = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListSystemMediaResponse {
    return {
      media: globalThis.Array.isArray(object?.media) ? object.media.map((e: any) => Media.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
      totalCount: isSet(object.totalCount) ? globalThis.Number(object.totalCount) : 0,
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      error: isSet(object.error) ? globalThis.String(object.error) : "",
    };
  },

  toJSON(message: ListSystemMediaResponse): unknown {
    const obj: any = {};
    if (message.media?.length) {
      obj.media = message.media.map((e) => Media.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    if (message.totalCount !== 0) {
      obj.totalCount = Math.round(message.totalCount);
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.error !== "") {
      obj.error = message.error;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListSystemMediaResponse>, I>>(base?: I): ListSystemMediaResponse {
    return ListSystemMediaResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListSystemMediaResponse>, I>>(object: I): ListSystemMediaResponse {
    const message = createBaseListSystemMediaResponse();
    message.media = object.media?.map((e) => Media.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    message.totalCount = object.totalCount ?? 0;
    message.status = object.status ?? "";
    message.error = object.error ?? "";
    return message;
  },
};

function createBaseSubscribeToUserMediaRequest(): SubscribeToUserMediaRequest {
  return { userId: "" };
}

export const SubscribeToUserMediaRequest: MessageFns<SubscribeToUserMediaRequest> = {
  encode(message: SubscribeToUserMediaRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SubscribeToUserMediaRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubscribeToUserMediaRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SubscribeToUserMediaRequest {
    return { userId: isSet(object.userId) ? globalThis.String(object.userId) : "" };
  },

  toJSON(message: SubscribeToUserMediaRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SubscribeToUserMediaRequest>, I>>(base?: I): SubscribeToUserMediaRequest {
    return SubscribeToUserMediaRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SubscribeToUserMediaRequest>, I>>(object: I): SubscribeToUserMediaRequest {
    const message = createBaseSubscribeToUserMediaRequest();
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseSubscribeToUserMediaResponse(): SubscribeToUserMediaResponse {
  return { media: [], status: "", error: "" };
}

export const SubscribeToUserMediaResponse: MessageFns<SubscribeToUserMediaResponse> = {
  encode(message: SubscribeToUserMediaResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.media) {
      Media.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.status !== "") {
      writer.uint32(18).string(message.status);
    }
    if (message.error !== "") {
      writer.uint32(26).string(message.error);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SubscribeToUserMediaResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubscribeToUserMediaResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.media.push(Media.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.error = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SubscribeToUserMediaResponse {
    return {
      media: globalThis.Array.isArray(object?.media) ? object.media.map((e: any) => Media.fromJSON(e)) : [],
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      error: isSet(object.error) ? globalThis.String(object.error) : "",
    };
  },

  toJSON(message: SubscribeToUserMediaResponse): unknown {
    const obj: any = {};
    if (message.media?.length) {
      obj.media = message.media.map((e) => Media.toJSON(e));
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.error !== "") {
      obj.error = message.error;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SubscribeToUserMediaResponse>, I>>(base?: I): SubscribeToUserMediaResponse {
    return SubscribeToUserMediaResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SubscribeToUserMediaResponse>, I>>(object: I): SubscribeToUserMediaResponse {
    const message = createBaseSubscribeToUserMediaResponse();
    message.media = object.media?.map((e) => Media.fromPartial(e)) || [];
    message.status = object.status ?? "";
    message.error = object.error ?? "";
    return message;
  },
};

function createBaseSubscribeToSystemMediaRequest(): SubscribeToSystemMediaRequest {
  return {};
}

export const SubscribeToSystemMediaRequest: MessageFns<SubscribeToSystemMediaRequest> = {
  encode(_: SubscribeToSystemMediaRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SubscribeToSystemMediaRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubscribeToSystemMediaRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): SubscribeToSystemMediaRequest {
    return {};
  },

  toJSON(_: SubscribeToSystemMediaRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<SubscribeToSystemMediaRequest>, I>>(base?: I): SubscribeToSystemMediaRequest {
    return SubscribeToSystemMediaRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SubscribeToSystemMediaRequest>, I>>(_: I): SubscribeToSystemMediaRequest {
    const message = createBaseSubscribeToSystemMediaRequest();
    return message;
  },
};

function createBaseSubscribeToSystemMediaResponse(): SubscribeToSystemMediaResponse {
  return { media: [], status: "", error: "" };
}

export const SubscribeToSystemMediaResponse: MessageFns<SubscribeToSystemMediaResponse> = {
  encode(message: SubscribeToSystemMediaResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.media) {
      Media.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.status !== "") {
      writer.uint32(18).string(message.status);
    }
    if (message.error !== "") {
      writer.uint32(26).string(message.error);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SubscribeToSystemMediaResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubscribeToSystemMediaResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.media.push(Media.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.error = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SubscribeToSystemMediaResponse {
    return {
      media: globalThis.Array.isArray(object?.media) ? object.media.map((e: any) => Media.fromJSON(e)) : [],
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      error: isSet(object.error) ? globalThis.String(object.error) : "",
    };
  },

  toJSON(message: SubscribeToSystemMediaResponse): unknown {
    const obj: any = {};
    if (message.media?.length) {
      obj.media = message.media.map((e) => Media.toJSON(e));
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.error !== "") {
      obj.error = message.error;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SubscribeToSystemMediaResponse>, I>>(base?: I): SubscribeToSystemMediaResponse {
    return SubscribeToSystemMediaResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SubscribeToSystemMediaResponse>, I>>(
    object: I,
  ): SubscribeToSystemMediaResponse {
    const message = createBaseSubscribeToSystemMediaResponse();
    message.media = object.media?.map((e) => Media.fromPartial(e)) || [];
    message.status = object.status ?? "";
    message.error = object.error ?? "";
    return message;
  },
};

function createBaseBroadcastSystemMediaRequest(): BroadcastSystemMediaRequest {
  return { id: "", userId: "" };
}

export const BroadcastSystemMediaRequest: MessageFns<BroadcastSystemMediaRequest> = {
  encode(message: BroadcastSystemMediaRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BroadcastSystemMediaRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBroadcastSystemMediaRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BroadcastSystemMediaRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
    };
  },

  toJSON(message: BroadcastSystemMediaRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BroadcastSystemMediaRequest>, I>>(base?: I): BroadcastSystemMediaRequest {
    return BroadcastSystemMediaRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BroadcastSystemMediaRequest>, I>>(object: I): BroadcastSystemMediaRequest {
    const message = createBaseBroadcastSystemMediaRequest();
    message.id = object.id ?? "";
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseBroadcastSystemMediaResponse(): BroadcastSystemMediaResponse {
  return { status: "", error: "" };
}

export const BroadcastSystemMediaResponse: MessageFns<BroadcastSystemMediaResponse> = {
  encode(message: BroadcastSystemMediaResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== "") {
      writer.uint32(10).string(message.status);
    }
    if (message.error !== "") {
      writer.uint32(18).string(message.error);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BroadcastSystemMediaResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBroadcastSystemMediaResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.error = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BroadcastSystemMediaResponse {
    return {
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      error: isSet(object.error) ? globalThis.String(object.error) : "",
    };
  },

  toJSON(message: BroadcastSystemMediaResponse): unknown {
    const obj: any = {};
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.error !== "") {
      obj.error = message.error;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BroadcastSystemMediaResponse>, I>>(base?: I): BroadcastSystemMediaResponse {
    return BroadcastSystemMediaResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BroadcastSystemMediaResponse>, I>>(object: I): BroadcastSystemMediaResponse {
    const message = createBaseBroadcastSystemMediaResponse();
    message.status = object.status ?? "";
    message.error = object.error ?? "";
    return message;
  },
};

/**
 * MediaService handles storage and retrieval of media files
 * (images, videos, 3D assets, etc.)
 */
export interface MediaService {
  UploadLightMedia(request: UploadLightMediaRequest): Promise<UploadLightMediaResponse>;
  StartHeavyMediaUpload(request: StartHeavyMediaUploadRequest): Promise<StartHeavyMediaUploadResponse>;
  StreamMediaChunk(request: StreamMediaChunkRequest): Promise<StreamMediaChunkResponse>;
  CompleteMediaUpload(request: CompleteMediaUploadRequest): Promise<CompleteMediaUploadResponse>;
  GetMedia(request: GetMediaRequest): Promise<GetMediaResponse>;
  StreamMediaContent(request: StreamMediaContentRequest): Promise<StreamMediaContentResponse>;
  DeleteMedia(request: DeleteMediaRequest): Promise<DeleteMediaResponse>;
  ListUserMedia(request: ListUserMediaRequest): Promise<ListUserMediaResponse>;
  ListSystemMedia(request: ListSystemMediaRequest): Promise<ListSystemMediaResponse>;
  SubscribeToUserMedia(request: SubscribeToUserMediaRequest): Promise<SubscribeToUserMediaResponse>;
  SubscribeToSystemMedia(request: SubscribeToSystemMediaRequest): Promise<SubscribeToSystemMediaResponse>;
  BroadcastSystemMedia(request: BroadcastSystemMediaRequest): Promise<BroadcastSystemMediaResponse>;
}

export const MediaServiceServiceName = "media.v1.MediaService";
export class MediaServiceClientImpl implements MediaService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || MediaServiceServiceName;
    this.rpc = rpc;
    this.UploadLightMedia = this.UploadLightMedia.bind(this);
    this.StartHeavyMediaUpload = this.StartHeavyMediaUpload.bind(this);
    this.StreamMediaChunk = this.StreamMediaChunk.bind(this);
    this.CompleteMediaUpload = this.CompleteMediaUpload.bind(this);
    this.GetMedia = this.GetMedia.bind(this);
    this.StreamMediaContent = this.StreamMediaContent.bind(this);
    this.DeleteMedia = this.DeleteMedia.bind(this);
    this.ListUserMedia = this.ListUserMedia.bind(this);
    this.ListSystemMedia = this.ListSystemMedia.bind(this);
    this.SubscribeToUserMedia = this.SubscribeToUserMedia.bind(this);
    this.SubscribeToSystemMedia = this.SubscribeToSystemMedia.bind(this);
    this.BroadcastSystemMedia = this.BroadcastSystemMedia.bind(this);
  }
  UploadLightMedia(request: UploadLightMediaRequest): Promise<UploadLightMediaResponse> {
    const data = UploadLightMediaRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "UploadLightMedia", data);
    return promise.then((data) => UploadLightMediaResponse.decode(new BinaryReader(data)));
  }

  StartHeavyMediaUpload(request: StartHeavyMediaUploadRequest): Promise<StartHeavyMediaUploadResponse> {
    const data = StartHeavyMediaUploadRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "StartHeavyMediaUpload", data);
    return promise.then((data) => StartHeavyMediaUploadResponse.decode(new BinaryReader(data)));
  }

  StreamMediaChunk(request: StreamMediaChunkRequest): Promise<StreamMediaChunkResponse> {
    const data = StreamMediaChunkRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "StreamMediaChunk", data);
    return promise.then((data) => StreamMediaChunkResponse.decode(new BinaryReader(data)));
  }

  CompleteMediaUpload(request: CompleteMediaUploadRequest): Promise<CompleteMediaUploadResponse> {
    const data = CompleteMediaUploadRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "CompleteMediaUpload", data);
    return promise.then((data) => CompleteMediaUploadResponse.decode(new BinaryReader(data)));
  }

  GetMedia(request: GetMediaRequest): Promise<GetMediaResponse> {
    const data = GetMediaRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetMedia", data);
    return promise.then((data) => GetMediaResponse.decode(new BinaryReader(data)));
  }

  StreamMediaContent(request: StreamMediaContentRequest): Promise<StreamMediaContentResponse> {
    const data = StreamMediaContentRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "StreamMediaContent", data);
    return promise.then((data) => StreamMediaContentResponse.decode(new BinaryReader(data)));
  }

  DeleteMedia(request: DeleteMediaRequest): Promise<DeleteMediaResponse> {
    const data = DeleteMediaRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "DeleteMedia", data);
    return promise.then((data) => DeleteMediaResponse.decode(new BinaryReader(data)));
  }

  ListUserMedia(request: ListUserMediaRequest): Promise<ListUserMediaResponse> {
    const data = ListUserMediaRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ListUserMedia", data);
    return promise.then((data) => ListUserMediaResponse.decode(new BinaryReader(data)));
  }

  ListSystemMedia(request: ListSystemMediaRequest): Promise<ListSystemMediaResponse> {
    const data = ListSystemMediaRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ListSystemMedia", data);
    return promise.then((data) => ListSystemMediaResponse.decode(new BinaryReader(data)));
  }

  SubscribeToUserMedia(request: SubscribeToUserMediaRequest): Promise<SubscribeToUserMediaResponse> {
    const data = SubscribeToUserMediaRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "SubscribeToUserMedia", data);
    return promise.then((data) => SubscribeToUserMediaResponse.decode(new BinaryReader(data)));
  }

  SubscribeToSystemMedia(request: SubscribeToSystemMediaRequest): Promise<SubscribeToSystemMediaResponse> {
    const data = SubscribeToSystemMediaRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "SubscribeToSystemMedia", data);
    return promise.then((data) => SubscribeToSystemMediaResponse.decode(new BinaryReader(data)));
  }

  BroadcastSystemMedia(request: BroadcastSystemMediaRequest): Promise<BroadcastSystemMediaResponse> {
    const data = BroadcastSystemMediaRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "BroadcastSystemMedia", data);
    return promise.then((data) => BroadcastSystemMediaResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000).toString();
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (globalThis.Number(t.seconds) || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
