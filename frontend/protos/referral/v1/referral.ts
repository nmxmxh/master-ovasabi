// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v5.29.3
// source: referral/v1/referral.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Metadata } from "../../common/v1/metadata";
import { Timestamp } from "../../google/protobuf/timestamp";

export const protobufPackage = "referral.v1";

/** Referral contains information about a referral */
export interface Referral {
  /** Primary key for the referral record */
  id: string;
  /** Internal integer ID reference to master table */
  masterId: string;
  /** Global UUID reference to master table */
  masterUuid: string;
  /** UUID of the user who referred */
  referrerMasterId: string;
  /** Global UUID of the user who referred */
  referrerMasterUuid: string;
  referredMasterId: string;
  /** Global UUID of the user who was referred */
  referredMasterUuid: string;
  /** Campaign associated with the referral */
  campaignId: string;
  /** Device identifier for fraud prevention */
  deviceHash: string;
  /** Unique referral code */
  referralCode: string;
  /** Whether the referral was successful */
  successful: boolean;
  /** Creation timestamp */
  createdAt?:
    | Date
    | undefined;
  /** Last update timestamp */
  updatedAt?:
    | Date
    | undefined;
  /** Extensible metadata for future use */
  metadata?: Metadata | undefined;
}

/** CreateReferralRequest contains referral creation parameters */
export interface CreateReferralRequest {
  /** UUID of the user who is referring */
  referrerMasterId: string;
  /** Global UUID of the user who is referring */
  referrerMasterUuid: string;
  /** Campaign ID */
  campaignId: string;
  /** Device identifier */
  deviceHash: string;
  /** Optional metadata */
  metadata?: Metadata | undefined;
}

/** CreateReferralResponse contains the created referral code */
export interface CreateReferralResponse {
  referral?: Referral | undefined;
  success: boolean;
}

/** GetReferralRequest contains the referral code to retrieve */
export interface GetReferralRequest {
  referralCode: string;
}

/** GetReferralResponse contains the retrieved referral */
export interface GetReferralResponse {
  referral?: Referral | undefined;
}

/** GetReferralStatsRequest contains the user identifier */
export interface GetReferralStatsRequest {
  /** Internal integer ID reference to master table */
  masterId: string;
  /** Global UUID reference to master table */
  masterUuid: string;
}

/** GetReferralStatsResponse contains referral statistics */
export interface GetReferralStatsResponse {
  totalReferrals: number;
  activeReferrals: number;
  totalRewards: number;
  referrals: ReferralDetail[];
  /** When the stats were generated */
  generatedAt?: Date | undefined;
}

/** ReferralDetail contains information about a specific referral */
export interface ReferralDetail {
  referralCode: string;
  /** Internal integer ID reference to master table */
  referredMasterId: string;
  /** Global UUID reference to master table */
  referredMasterUuid: string;
  createdAt?: Date | undefined;
  isActive: boolean;
  rewardPoints: number;
  /** Extensible metadata */
  metadata?: Metadata | undefined;
}

/** RegisterReferralRequest for registering a new referral */
export interface RegisterReferralRequest {
  referrerMasterId: string;
  referrerMasterUuid: string;
  campaignId: string;
  deviceHash: string;
  metadata?: Metadata | undefined;
}

export interface RegisterReferralResponse {
  referral?: Referral | undefined;
  success: boolean;
}

/** RewardReferralRequest for rewarding a referral */
export interface RewardReferralRequest {
  referralCode: string;
  rewardAmount: string;
  metadata?: Metadata | undefined;
}

export interface RewardReferralResponse {
  referral?: Referral | undefined;
  success: boolean;
}

function createBaseReferral(): Referral {
  return {
    id: "0",
    masterId: "0",
    masterUuid: "",
    referrerMasterId: "",
    referrerMasterUuid: "",
    referredMasterId: "",
    referredMasterUuid: "",
    campaignId: "0",
    deviceHash: "",
    referralCode: "",
    successful: false,
    createdAt: undefined,
    updatedAt: undefined,
    metadata: undefined,
  };
}

export const Referral: MessageFns<Referral> = {
  encode(message: Referral, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "0") {
      writer.uint32(8).int64(message.id);
    }
    if (message.masterId !== "0") {
      writer.uint32(88).int64(message.masterId);
    }
    if (message.masterUuid !== "") {
      writer.uint32(98).string(message.masterUuid);
    }
    if (message.referrerMasterId !== "") {
      writer.uint32(18).string(message.referrerMasterId);
    }
    if (message.referrerMasterUuid !== "") {
      writer.uint32(106).string(message.referrerMasterUuid);
    }
    if (message.referredMasterId !== "") {
      writer.uint32(26).string(message.referredMasterId);
    }
    if (message.referredMasterUuid !== "") {
      writer.uint32(114).string(message.referredMasterUuid);
    }
    if (message.campaignId !== "0") {
      writer.uint32(32).int64(message.campaignId);
    }
    if (message.deviceHash !== "") {
      writer.uint32(42).string(message.deviceHash);
    }
    if (message.referralCode !== "") {
      writer.uint32(50).string(message.referralCode);
    }
    if (message.successful !== false) {
      writer.uint32(56).bool(message.successful);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(66).fork()).join();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.updatedAt), writer.uint32(74).fork()).join();
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(82).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Referral {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReferral();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int64().toString();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.masterId = reader.int64().toString();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.masterUuid = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.referrerMasterId = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.referrerMasterUuid = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.referredMasterId = reader.string();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.referredMasterUuid = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.campaignId = reader.int64().toString();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.deviceHash = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.referralCode = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.successful = reader.bool();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.updatedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Referral {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "0",
      masterId: isSet(object.masterId) ? globalThis.String(object.masterId) : "0",
      masterUuid: isSet(object.masterUuid) ? globalThis.String(object.masterUuid) : "",
      referrerMasterId: isSet(object.referrerMasterId) ? globalThis.String(object.referrerMasterId) : "",
      referrerMasterUuid: isSet(object.referrerMasterUuid) ? globalThis.String(object.referrerMasterUuid) : "",
      referredMasterId: isSet(object.referredMasterId) ? globalThis.String(object.referredMasterId) : "",
      referredMasterUuid: isSet(object.referredMasterUuid) ? globalThis.String(object.referredMasterUuid) : "",
      campaignId: isSet(object.campaignId) ? globalThis.String(object.campaignId) : "0",
      deviceHash: isSet(object.deviceHash) ? globalThis.String(object.deviceHash) : "",
      referralCode: isSet(object.referralCode) ? globalThis.String(object.referralCode) : "",
      successful: isSet(object.successful) ? globalThis.Boolean(object.successful) : false,
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
    };
  },

  toJSON(message: Referral): unknown {
    const obj: any = {};
    if (message.id !== "0") {
      obj.id = message.id;
    }
    if (message.masterId !== "0") {
      obj.masterId = message.masterId;
    }
    if (message.masterUuid !== "") {
      obj.masterUuid = message.masterUuid;
    }
    if (message.referrerMasterId !== "") {
      obj.referrerMasterId = message.referrerMasterId;
    }
    if (message.referrerMasterUuid !== "") {
      obj.referrerMasterUuid = message.referrerMasterUuid;
    }
    if (message.referredMasterId !== "") {
      obj.referredMasterId = message.referredMasterId;
    }
    if (message.referredMasterUuid !== "") {
      obj.referredMasterUuid = message.referredMasterUuid;
    }
    if (message.campaignId !== "0") {
      obj.campaignId = message.campaignId;
    }
    if (message.deviceHash !== "") {
      obj.deviceHash = message.deviceHash;
    }
    if (message.referralCode !== "") {
      obj.referralCode = message.referralCode;
    }
    if (message.successful !== false) {
      obj.successful = message.successful;
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = message.updatedAt.toISOString();
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Referral>, I>>(base?: I): Referral {
    return Referral.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Referral>, I>>(object: I): Referral {
    const message = createBaseReferral();
    message.id = object.id ?? "0";
    message.masterId = object.masterId ?? "0";
    message.masterUuid = object.masterUuid ?? "";
    message.referrerMasterId = object.referrerMasterId ?? "";
    message.referrerMasterUuid = object.referrerMasterUuid ?? "";
    message.referredMasterId = object.referredMasterId ?? "";
    message.referredMasterUuid = object.referredMasterUuid ?? "";
    message.campaignId = object.campaignId ?? "0";
    message.deviceHash = object.deviceHash ?? "";
    message.referralCode = object.referralCode ?? "";
    message.successful = object.successful ?? false;
    message.createdAt = object.createdAt ?? undefined;
    message.updatedAt = object.updatedAt ?? undefined;
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    return message;
  },
};

function createBaseCreateReferralRequest(): CreateReferralRequest {
  return { referrerMasterId: "", referrerMasterUuid: "", campaignId: "0", deviceHash: "", metadata: undefined };
}

export const CreateReferralRequest: MessageFns<CreateReferralRequest> = {
  encode(message: CreateReferralRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.referrerMasterId !== "") {
      writer.uint32(10).string(message.referrerMasterId);
    }
    if (message.referrerMasterUuid !== "") {
      writer.uint32(42).string(message.referrerMasterUuid);
    }
    if (message.campaignId !== "0") {
      writer.uint32(16).int64(message.campaignId);
    }
    if (message.deviceHash !== "") {
      writer.uint32(26).string(message.deviceHash);
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateReferralRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateReferralRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.referrerMasterId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.referrerMasterUuid = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.campaignId = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.deviceHash = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateReferralRequest {
    return {
      referrerMasterId: isSet(object.referrerMasterId) ? globalThis.String(object.referrerMasterId) : "",
      referrerMasterUuid: isSet(object.referrerMasterUuid) ? globalThis.String(object.referrerMasterUuid) : "",
      campaignId: isSet(object.campaignId) ? globalThis.String(object.campaignId) : "0",
      deviceHash: isSet(object.deviceHash) ? globalThis.String(object.deviceHash) : "",
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
    };
  },

  toJSON(message: CreateReferralRequest): unknown {
    const obj: any = {};
    if (message.referrerMasterId !== "") {
      obj.referrerMasterId = message.referrerMasterId;
    }
    if (message.referrerMasterUuid !== "") {
      obj.referrerMasterUuid = message.referrerMasterUuid;
    }
    if (message.campaignId !== "0") {
      obj.campaignId = message.campaignId;
    }
    if (message.deviceHash !== "") {
      obj.deviceHash = message.deviceHash;
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateReferralRequest>, I>>(base?: I): CreateReferralRequest {
    return CreateReferralRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateReferralRequest>, I>>(object: I): CreateReferralRequest {
    const message = createBaseCreateReferralRequest();
    message.referrerMasterId = object.referrerMasterId ?? "";
    message.referrerMasterUuid = object.referrerMasterUuid ?? "";
    message.campaignId = object.campaignId ?? "0";
    message.deviceHash = object.deviceHash ?? "";
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    return message;
  },
};

function createBaseCreateReferralResponse(): CreateReferralResponse {
  return { referral: undefined, success: false };
}

export const CreateReferralResponse: MessageFns<CreateReferralResponse> = {
  encode(message: CreateReferralResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.referral !== undefined) {
      Referral.encode(message.referral, writer.uint32(10).fork()).join();
    }
    if (message.success !== false) {
      writer.uint32(16).bool(message.success);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateReferralResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateReferralResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.referral = Referral.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateReferralResponse {
    return {
      referral: isSet(object.referral) ? Referral.fromJSON(object.referral) : undefined,
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
    };
  },

  toJSON(message: CreateReferralResponse): unknown {
    const obj: any = {};
    if (message.referral !== undefined) {
      obj.referral = Referral.toJSON(message.referral);
    }
    if (message.success !== false) {
      obj.success = message.success;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateReferralResponse>, I>>(base?: I): CreateReferralResponse {
    return CreateReferralResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateReferralResponse>, I>>(object: I): CreateReferralResponse {
    const message = createBaseCreateReferralResponse();
    message.referral = (object.referral !== undefined && object.referral !== null)
      ? Referral.fromPartial(object.referral)
      : undefined;
    message.success = object.success ?? false;
    return message;
  },
};

function createBaseGetReferralRequest(): GetReferralRequest {
  return { referralCode: "" };
}

export const GetReferralRequest: MessageFns<GetReferralRequest> = {
  encode(message: GetReferralRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.referralCode !== "") {
      writer.uint32(10).string(message.referralCode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetReferralRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetReferralRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.referralCode = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetReferralRequest {
    return { referralCode: isSet(object.referralCode) ? globalThis.String(object.referralCode) : "" };
  },

  toJSON(message: GetReferralRequest): unknown {
    const obj: any = {};
    if (message.referralCode !== "") {
      obj.referralCode = message.referralCode;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetReferralRequest>, I>>(base?: I): GetReferralRequest {
    return GetReferralRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetReferralRequest>, I>>(object: I): GetReferralRequest {
    const message = createBaseGetReferralRequest();
    message.referralCode = object.referralCode ?? "";
    return message;
  },
};

function createBaseGetReferralResponse(): GetReferralResponse {
  return { referral: undefined };
}

export const GetReferralResponse: MessageFns<GetReferralResponse> = {
  encode(message: GetReferralResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.referral !== undefined) {
      Referral.encode(message.referral, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetReferralResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetReferralResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.referral = Referral.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetReferralResponse {
    return { referral: isSet(object.referral) ? Referral.fromJSON(object.referral) : undefined };
  },

  toJSON(message: GetReferralResponse): unknown {
    const obj: any = {};
    if (message.referral !== undefined) {
      obj.referral = Referral.toJSON(message.referral);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetReferralResponse>, I>>(base?: I): GetReferralResponse {
    return GetReferralResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetReferralResponse>, I>>(object: I): GetReferralResponse {
    const message = createBaseGetReferralResponse();
    message.referral = (object.referral !== undefined && object.referral !== null)
      ? Referral.fromPartial(object.referral)
      : undefined;
    return message;
  },
};

function createBaseGetReferralStatsRequest(): GetReferralStatsRequest {
  return { masterId: "0", masterUuid: "" };
}

export const GetReferralStatsRequest: MessageFns<GetReferralStatsRequest> = {
  encode(message: GetReferralStatsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.masterId !== "0") {
      writer.uint32(16).int64(message.masterId);
    }
    if (message.masterUuid !== "") {
      writer.uint32(26).string(message.masterUuid);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetReferralStatsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetReferralStatsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.masterId = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.masterUuid = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetReferralStatsRequest {
    return {
      masterId: isSet(object.masterId) ? globalThis.String(object.masterId) : "0",
      masterUuid: isSet(object.masterUuid) ? globalThis.String(object.masterUuid) : "",
    };
  },

  toJSON(message: GetReferralStatsRequest): unknown {
    const obj: any = {};
    if (message.masterId !== "0") {
      obj.masterId = message.masterId;
    }
    if (message.masterUuid !== "") {
      obj.masterUuid = message.masterUuid;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetReferralStatsRequest>, I>>(base?: I): GetReferralStatsRequest {
    return GetReferralStatsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetReferralStatsRequest>, I>>(object: I): GetReferralStatsRequest {
    const message = createBaseGetReferralStatsRequest();
    message.masterId = object.masterId ?? "0";
    message.masterUuid = object.masterUuid ?? "";
    return message;
  },
};

function createBaseGetReferralStatsResponse(): GetReferralStatsResponse {
  return { totalReferrals: 0, activeReferrals: 0, totalRewards: 0, referrals: [], generatedAt: undefined };
}

export const GetReferralStatsResponse: MessageFns<GetReferralStatsResponse> = {
  encode(message: GetReferralStatsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.totalReferrals !== 0) {
      writer.uint32(8).int32(message.totalReferrals);
    }
    if (message.activeReferrals !== 0) {
      writer.uint32(16).int32(message.activeReferrals);
    }
    if (message.totalRewards !== 0) {
      writer.uint32(24).int32(message.totalRewards);
    }
    for (const v of message.referrals) {
      ReferralDetail.encode(v!, writer.uint32(34).fork()).join();
    }
    if (message.generatedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.generatedAt), writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetReferralStatsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetReferralStatsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.totalReferrals = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.activeReferrals = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.totalRewards = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.referrals.push(ReferralDetail.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.generatedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetReferralStatsResponse {
    return {
      totalReferrals: isSet(object.totalReferrals) ? globalThis.Number(object.totalReferrals) : 0,
      activeReferrals: isSet(object.activeReferrals) ? globalThis.Number(object.activeReferrals) : 0,
      totalRewards: isSet(object.totalRewards) ? globalThis.Number(object.totalRewards) : 0,
      referrals: globalThis.Array.isArray(object?.referrals)
        ? object.referrals.map((e: any) => ReferralDetail.fromJSON(e))
        : [],
      generatedAt: isSet(object.generatedAt) ? fromJsonTimestamp(object.generatedAt) : undefined,
    };
  },

  toJSON(message: GetReferralStatsResponse): unknown {
    const obj: any = {};
    if (message.totalReferrals !== 0) {
      obj.totalReferrals = Math.round(message.totalReferrals);
    }
    if (message.activeReferrals !== 0) {
      obj.activeReferrals = Math.round(message.activeReferrals);
    }
    if (message.totalRewards !== 0) {
      obj.totalRewards = Math.round(message.totalRewards);
    }
    if (message.referrals?.length) {
      obj.referrals = message.referrals.map((e) => ReferralDetail.toJSON(e));
    }
    if (message.generatedAt !== undefined) {
      obj.generatedAt = message.generatedAt.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetReferralStatsResponse>, I>>(base?: I): GetReferralStatsResponse {
    return GetReferralStatsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetReferralStatsResponse>, I>>(object: I): GetReferralStatsResponse {
    const message = createBaseGetReferralStatsResponse();
    message.totalReferrals = object.totalReferrals ?? 0;
    message.activeReferrals = object.activeReferrals ?? 0;
    message.totalRewards = object.totalRewards ?? 0;
    message.referrals = object.referrals?.map((e) => ReferralDetail.fromPartial(e)) || [];
    message.generatedAt = object.generatedAt ?? undefined;
    return message;
  },
};

function createBaseReferralDetail(): ReferralDetail {
  return {
    referralCode: "",
    referredMasterId: "0",
    referredMasterUuid: "",
    createdAt: undefined,
    isActive: false,
    rewardPoints: 0,
    metadata: undefined,
  };
}

export const ReferralDetail: MessageFns<ReferralDetail> = {
  encode(message: ReferralDetail, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.referralCode !== "") {
      writer.uint32(10).string(message.referralCode);
    }
    if (message.referredMasterId !== "0") {
      writer.uint32(48).int64(message.referredMasterId);
    }
    if (message.referredMasterUuid !== "") {
      writer.uint32(58).string(message.referredMasterUuid);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(26).fork()).join();
    }
    if (message.isActive !== false) {
      writer.uint32(32).bool(message.isActive);
    }
    if (message.rewardPoints !== 0) {
      writer.uint32(40).int32(message.rewardPoints);
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReferralDetail {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReferralDetail();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.referralCode = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.referredMasterId = reader.int64().toString();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.referredMasterUuid = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.isActive = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.rewardPoints = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReferralDetail {
    return {
      referralCode: isSet(object.referralCode) ? globalThis.String(object.referralCode) : "",
      referredMasterId: isSet(object.referredMasterId) ? globalThis.String(object.referredMasterId) : "0",
      referredMasterUuid: isSet(object.referredMasterUuid) ? globalThis.String(object.referredMasterUuid) : "",
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      isActive: isSet(object.isActive) ? globalThis.Boolean(object.isActive) : false,
      rewardPoints: isSet(object.rewardPoints) ? globalThis.Number(object.rewardPoints) : 0,
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
    };
  },

  toJSON(message: ReferralDetail): unknown {
    const obj: any = {};
    if (message.referralCode !== "") {
      obj.referralCode = message.referralCode;
    }
    if (message.referredMasterId !== "0") {
      obj.referredMasterId = message.referredMasterId;
    }
    if (message.referredMasterUuid !== "") {
      obj.referredMasterUuid = message.referredMasterUuid;
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.isActive !== false) {
      obj.isActive = message.isActive;
    }
    if (message.rewardPoints !== 0) {
      obj.rewardPoints = Math.round(message.rewardPoints);
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReferralDetail>, I>>(base?: I): ReferralDetail {
    return ReferralDetail.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReferralDetail>, I>>(object: I): ReferralDetail {
    const message = createBaseReferralDetail();
    message.referralCode = object.referralCode ?? "";
    message.referredMasterId = object.referredMasterId ?? "0";
    message.referredMasterUuid = object.referredMasterUuid ?? "";
    message.createdAt = object.createdAt ?? undefined;
    message.isActive = object.isActive ?? false;
    message.rewardPoints = object.rewardPoints ?? 0;
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    return message;
  },
};

function createBaseRegisterReferralRequest(): RegisterReferralRequest {
  return { referrerMasterId: "", referrerMasterUuid: "", campaignId: "0", deviceHash: "", metadata: undefined };
}

export const RegisterReferralRequest: MessageFns<RegisterReferralRequest> = {
  encode(message: RegisterReferralRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.referrerMasterId !== "") {
      writer.uint32(10).string(message.referrerMasterId);
    }
    if (message.referrerMasterUuid !== "") {
      writer.uint32(18).string(message.referrerMasterUuid);
    }
    if (message.campaignId !== "0") {
      writer.uint32(24).int64(message.campaignId);
    }
    if (message.deviceHash !== "") {
      writer.uint32(34).string(message.deviceHash);
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RegisterReferralRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRegisterReferralRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.referrerMasterId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.referrerMasterUuid = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.campaignId = reader.int64().toString();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.deviceHash = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RegisterReferralRequest {
    return {
      referrerMasterId: isSet(object.referrerMasterId) ? globalThis.String(object.referrerMasterId) : "",
      referrerMasterUuid: isSet(object.referrerMasterUuid) ? globalThis.String(object.referrerMasterUuid) : "",
      campaignId: isSet(object.campaignId) ? globalThis.String(object.campaignId) : "0",
      deviceHash: isSet(object.deviceHash) ? globalThis.String(object.deviceHash) : "",
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
    };
  },

  toJSON(message: RegisterReferralRequest): unknown {
    const obj: any = {};
    if (message.referrerMasterId !== "") {
      obj.referrerMasterId = message.referrerMasterId;
    }
    if (message.referrerMasterUuid !== "") {
      obj.referrerMasterUuid = message.referrerMasterUuid;
    }
    if (message.campaignId !== "0") {
      obj.campaignId = message.campaignId;
    }
    if (message.deviceHash !== "") {
      obj.deviceHash = message.deviceHash;
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RegisterReferralRequest>, I>>(base?: I): RegisterReferralRequest {
    return RegisterReferralRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RegisterReferralRequest>, I>>(object: I): RegisterReferralRequest {
    const message = createBaseRegisterReferralRequest();
    message.referrerMasterId = object.referrerMasterId ?? "";
    message.referrerMasterUuid = object.referrerMasterUuid ?? "";
    message.campaignId = object.campaignId ?? "0";
    message.deviceHash = object.deviceHash ?? "";
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    return message;
  },
};

function createBaseRegisterReferralResponse(): RegisterReferralResponse {
  return { referral: undefined, success: false };
}

export const RegisterReferralResponse: MessageFns<RegisterReferralResponse> = {
  encode(message: RegisterReferralResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.referral !== undefined) {
      Referral.encode(message.referral, writer.uint32(10).fork()).join();
    }
    if (message.success !== false) {
      writer.uint32(16).bool(message.success);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RegisterReferralResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRegisterReferralResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.referral = Referral.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RegisterReferralResponse {
    return {
      referral: isSet(object.referral) ? Referral.fromJSON(object.referral) : undefined,
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
    };
  },

  toJSON(message: RegisterReferralResponse): unknown {
    const obj: any = {};
    if (message.referral !== undefined) {
      obj.referral = Referral.toJSON(message.referral);
    }
    if (message.success !== false) {
      obj.success = message.success;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RegisterReferralResponse>, I>>(base?: I): RegisterReferralResponse {
    return RegisterReferralResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RegisterReferralResponse>, I>>(object: I): RegisterReferralResponse {
    const message = createBaseRegisterReferralResponse();
    message.referral = (object.referral !== undefined && object.referral !== null)
      ? Referral.fromPartial(object.referral)
      : undefined;
    message.success = object.success ?? false;
    return message;
  },
};

function createBaseRewardReferralRequest(): RewardReferralRequest {
  return { referralCode: "", rewardAmount: "0", metadata: undefined };
}

export const RewardReferralRequest: MessageFns<RewardReferralRequest> = {
  encode(message: RewardReferralRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.referralCode !== "") {
      writer.uint32(10).string(message.referralCode);
    }
    if (message.rewardAmount !== "0") {
      writer.uint32(16).int64(message.rewardAmount);
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RewardReferralRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRewardReferralRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.referralCode = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.rewardAmount = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RewardReferralRequest {
    return {
      referralCode: isSet(object.referralCode) ? globalThis.String(object.referralCode) : "",
      rewardAmount: isSet(object.rewardAmount) ? globalThis.String(object.rewardAmount) : "0",
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
    };
  },

  toJSON(message: RewardReferralRequest): unknown {
    const obj: any = {};
    if (message.referralCode !== "") {
      obj.referralCode = message.referralCode;
    }
    if (message.rewardAmount !== "0") {
      obj.rewardAmount = message.rewardAmount;
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RewardReferralRequest>, I>>(base?: I): RewardReferralRequest {
    return RewardReferralRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RewardReferralRequest>, I>>(object: I): RewardReferralRequest {
    const message = createBaseRewardReferralRequest();
    message.referralCode = object.referralCode ?? "";
    message.rewardAmount = object.rewardAmount ?? "0";
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    return message;
  },
};

function createBaseRewardReferralResponse(): RewardReferralResponse {
  return { referral: undefined, success: false };
}

export const RewardReferralResponse: MessageFns<RewardReferralResponse> = {
  encode(message: RewardReferralResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.referral !== undefined) {
      Referral.encode(message.referral, writer.uint32(10).fork()).join();
    }
    if (message.success !== false) {
      writer.uint32(16).bool(message.success);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RewardReferralResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRewardReferralResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.referral = Referral.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RewardReferralResponse {
    return {
      referral: isSet(object.referral) ? Referral.fromJSON(object.referral) : undefined,
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
    };
  },

  toJSON(message: RewardReferralResponse): unknown {
    const obj: any = {};
    if (message.referral !== undefined) {
      obj.referral = Referral.toJSON(message.referral);
    }
    if (message.success !== false) {
      obj.success = message.success;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RewardReferralResponse>, I>>(base?: I): RewardReferralResponse {
    return RewardReferralResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RewardReferralResponse>, I>>(object: I): RewardReferralResponse {
    const message = createBaseRewardReferralResponse();
    message.referral = (object.referral !== undefined && object.referral !== null)
      ? Referral.fromPartial(object.referral)
      : undefined;
    message.success = object.success ?? false;
    return message;
  },
};

/** ReferralService manages user referrals and rewards */
export interface ReferralService {
  /** CreateReferral creates a new referral code for a user */
  CreateReferral(request: CreateReferralRequest): Promise<CreateReferralResponse>;
  /** GetReferral retrieves a referral by referral code */
  GetReferral(request: GetReferralRequest): Promise<GetReferralResponse>;
  /** GetReferralStats retrieves referral statistics */
  GetReferralStats(request: GetReferralStatsRequest): Promise<GetReferralStatsResponse>;
  /** RegisterReferral registers a new referral */
  RegisterReferral(request: RegisterReferralRequest): Promise<RegisterReferralResponse>;
  /** RewardReferral rewards a referral */
  RewardReferral(request: RewardReferralRequest): Promise<RewardReferralResponse>;
}

export const ReferralServiceServiceName = "referral.v1.ReferralService";
export class ReferralServiceClientImpl implements ReferralService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || ReferralServiceServiceName;
    this.rpc = rpc;
    this.CreateReferral = this.CreateReferral.bind(this);
    this.GetReferral = this.GetReferral.bind(this);
    this.GetReferralStats = this.GetReferralStats.bind(this);
    this.RegisterReferral = this.RegisterReferral.bind(this);
    this.RewardReferral = this.RewardReferral.bind(this);
  }
  CreateReferral(request: CreateReferralRequest): Promise<CreateReferralResponse> {
    const data = CreateReferralRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateReferral", data);
    return promise.then((data) => CreateReferralResponse.decode(new BinaryReader(data)));
  }

  GetReferral(request: GetReferralRequest): Promise<GetReferralResponse> {
    const data = GetReferralRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetReferral", data);
    return promise.then((data) => GetReferralResponse.decode(new BinaryReader(data)));
  }

  GetReferralStats(request: GetReferralStatsRequest): Promise<GetReferralStatsResponse> {
    const data = GetReferralStatsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetReferralStats", data);
    return promise.then((data) => GetReferralStatsResponse.decode(new BinaryReader(data)));
  }

  RegisterReferral(request: RegisterReferralRequest): Promise<RegisterReferralResponse> {
    const data = RegisterReferralRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "RegisterReferral", data);
    return promise.then((data) => RegisterReferralResponse.decode(new BinaryReader(data)));
  }

  RewardReferral(request: RewardReferralRequest): Promise<RewardReferralResponse> {
    const data = RewardReferralRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "RewardReferral", data);
    return promise.then((data) => RewardReferralResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000).toString();
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (globalThis.Number(t.seconds) || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
