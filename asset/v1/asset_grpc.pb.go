// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: asset/v1/asset.proto

package assetv0

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AssetService_UploadLightAsset_FullMethodName        = "/asset.v1.AssetService/UploadLightAsset"
	AssetService_StartHeavyAssetUpload_FullMethodName   = "/asset.v1.AssetService/StartHeavyAssetUpload"
	AssetService_StreamAssetChunk_FullMethodName        = "/asset.v1.AssetService/StreamAssetChunk"
	AssetService_CompleteAssetUpload_FullMethodName     = "/asset.v1.AssetService/CompleteAssetUpload"
	AssetService_GetAsset_FullMethodName                = "/asset.v1.AssetService/GetAsset"
	AssetService_StreamAssetContent_FullMethodName      = "/asset.v1.AssetService/StreamAssetContent"
	AssetService_DeleteAsset_FullMethodName             = "/asset.v1.AssetService/DeleteAsset"
	AssetService_ListUserAssets_FullMethodName          = "/asset.v1.AssetService/ListUserAssets"
	AssetService_ListSystemAssets_FullMethodName        = "/asset.v1.AssetService/ListSystemAssets"
	AssetService_SubscribeToUserAssets_FullMethodName   = "/asset.v1.AssetService/SubscribeToUserAssets"
	AssetService_SubscribeToSystemAssets_FullMethodName = "/asset.v1.AssetService/SubscribeToSystemAssets"
	AssetService_BroadcastSystemAsset_FullMethodName    = "/asset.v1.AssetService/BroadcastSystemAsset"
)

// AssetServiceClient is the client API for AssetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Asset service handles storage and retrieval of 3D assets
type AssetServiceClient interface {
	// Upload a small asset (< 500KB) in a single request
	UploadLightAsset(ctx context.Context, in *UploadLightAssetRequest, opts ...grpc.CallOption) (*UploadLightAssetResponse, error)
	// Start a heavy asset upload session (> 500KB)
	StartHeavyAssetUpload(ctx context.Context, in *StartHeavyAssetUploadRequest, opts ...grpc.CallOption) (*StartHeavyAssetUploadResponse, error)
	// Stream chunks for a heavy asset upload
	StreamAssetChunk(ctx context.Context, in *StreamAssetChunkRequest, opts ...grpc.CallOption) (*StreamAssetChunkResponse, error)
	// Complete a heavy asset upload
	CompleteAssetUpload(ctx context.Context, in *CompleteAssetUploadRequest, opts ...grpc.CallOption) (*CompleteAssetUploadResponse, error)
	// Get asset metadata
	GetAsset(ctx context.Context, in *GetAssetRequest, opts ...grpc.CallOption) (*GetAssetResponse, error)
	// Stream asset content
	StreamAssetContent(ctx context.Context, in *StreamAssetContentRequest, opts ...grpc.CallOption) (*StreamAssetContentResponse, error)
	// Delete an asset
	DeleteAsset(ctx context.Context, in *DeleteAssetRequest, opts ...grpc.CallOption) (*DeleteAssetResponse, error)
	// List user assets with pagination
	ListUserAssets(ctx context.Context, in *ListUserAssetsRequest, opts ...grpc.CallOption) (*ListUserAssetsResponse, error)
	// List system assets with pagination
	ListSystemAssets(ctx context.Context, in *ListSystemAssetsRequest, opts ...grpc.CallOption) (*ListSystemAssetsResponse, error)
	// Subscribe to user asset updates stream
	SubscribeToUserAssets(ctx context.Context, in *SubscribeToUserAssetsRequest, opts ...grpc.CallOption) (*SubscribeToUserAssetsResponse, error)
	// Subscribe to system asset updates stream
	SubscribeToSystemAssets(ctx context.Context, in *SubscribeToSystemAssetsRequest, opts ...grpc.CallOption) (*SubscribeToSystemAssetsResponse, error)
	// Broadcast a system asset to all subscribers
	BroadcastSystemAsset(ctx context.Context, in *BroadcastSystemAssetRequest, opts ...grpc.CallOption) (*BroadcastSystemAssetResponse, error)
}

type assetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAssetServiceClient(cc grpc.ClientConnInterface) AssetServiceClient {
	return &assetServiceClient{cc}
}

func (c *assetServiceClient) UploadLightAsset(ctx context.Context, in *UploadLightAssetRequest, opts ...grpc.CallOption) (*UploadLightAssetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadLightAssetResponse)
	err := c.cc.Invoke(ctx, AssetService_UploadLightAsset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetServiceClient) StartHeavyAssetUpload(ctx context.Context, in *StartHeavyAssetUploadRequest, opts ...grpc.CallOption) (*StartHeavyAssetUploadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartHeavyAssetUploadResponse)
	err := c.cc.Invoke(ctx, AssetService_StartHeavyAssetUpload_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetServiceClient) StreamAssetChunk(ctx context.Context, in *StreamAssetChunkRequest, opts ...grpc.CallOption) (*StreamAssetChunkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StreamAssetChunkResponse)
	err := c.cc.Invoke(ctx, AssetService_StreamAssetChunk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetServiceClient) CompleteAssetUpload(ctx context.Context, in *CompleteAssetUploadRequest, opts ...grpc.CallOption) (*CompleteAssetUploadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CompleteAssetUploadResponse)
	err := c.cc.Invoke(ctx, AssetService_CompleteAssetUpload_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetServiceClient) GetAsset(ctx context.Context, in *GetAssetRequest, opts ...grpc.CallOption) (*GetAssetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAssetResponse)
	err := c.cc.Invoke(ctx, AssetService_GetAsset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetServiceClient) StreamAssetContent(ctx context.Context, in *StreamAssetContentRequest, opts ...grpc.CallOption) (*StreamAssetContentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StreamAssetContentResponse)
	err := c.cc.Invoke(ctx, AssetService_StreamAssetContent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetServiceClient) DeleteAsset(ctx context.Context, in *DeleteAssetRequest, opts ...grpc.CallOption) (*DeleteAssetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAssetResponse)
	err := c.cc.Invoke(ctx, AssetService_DeleteAsset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetServiceClient) ListUserAssets(ctx context.Context, in *ListUserAssetsRequest, opts ...grpc.CallOption) (*ListUserAssetsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUserAssetsResponse)
	err := c.cc.Invoke(ctx, AssetService_ListUserAssets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetServiceClient) ListSystemAssets(ctx context.Context, in *ListSystemAssetsRequest, opts ...grpc.CallOption) (*ListSystemAssetsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSystemAssetsResponse)
	err := c.cc.Invoke(ctx, AssetService_ListSystemAssets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetServiceClient) SubscribeToUserAssets(ctx context.Context, in *SubscribeToUserAssetsRequest, opts ...grpc.CallOption) (*SubscribeToUserAssetsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubscribeToUserAssetsResponse)
	err := c.cc.Invoke(ctx, AssetService_SubscribeToUserAssets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetServiceClient) SubscribeToSystemAssets(ctx context.Context, in *SubscribeToSystemAssetsRequest, opts ...grpc.CallOption) (*SubscribeToSystemAssetsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubscribeToSystemAssetsResponse)
	err := c.cc.Invoke(ctx, AssetService_SubscribeToSystemAssets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetServiceClient) BroadcastSystemAsset(ctx context.Context, in *BroadcastSystemAssetRequest, opts ...grpc.CallOption) (*BroadcastSystemAssetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BroadcastSystemAssetResponse)
	err := c.cc.Invoke(ctx, AssetService_BroadcastSystemAsset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AssetServiceServer is the server API for AssetService service.
// All implementations must embed UnimplementedAssetServiceServer
// for forward compatibility.
//
// Asset service handles storage and retrieval of 3D assets
type AssetServiceServer interface {
	// Upload a small asset (< 500KB) in a single request
	UploadLightAsset(context.Context, *UploadLightAssetRequest) (*UploadLightAssetResponse, error)
	// Start a heavy asset upload session (> 500KB)
	StartHeavyAssetUpload(context.Context, *StartHeavyAssetUploadRequest) (*StartHeavyAssetUploadResponse, error)
	// Stream chunks for a heavy asset upload
	StreamAssetChunk(context.Context, *StreamAssetChunkRequest) (*StreamAssetChunkResponse, error)
	// Complete a heavy asset upload
	CompleteAssetUpload(context.Context, *CompleteAssetUploadRequest) (*CompleteAssetUploadResponse, error)
	// Get asset metadata
	GetAsset(context.Context, *GetAssetRequest) (*GetAssetResponse, error)
	// Stream asset content
	StreamAssetContent(context.Context, *StreamAssetContentRequest) (*StreamAssetContentResponse, error)
	// Delete an asset
	DeleteAsset(context.Context, *DeleteAssetRequest) (*DeleteAssetResponse, error)
	// List user assets with pagination
	ListUserAssets(context.Context, *ListUserAssetsRequest) (*ListUserAssetsResponse, error)
	// List system assets with pagination
	ListSystemAssets(context.Context, *ListSystemAssetsRequest) (*ListSystemAssetsResponse, error)
	// Subscribe to user asset updates stream
	SubscribeToUserAssets(context.Context, *SubscribeToUserAssetsRequest) (*SubscribeToUserAssetsResponse, error)
	// Subscribe to system asset updates stream
	SubscribeToSystemAssets(context.Context, *SubscribeToSystemAssetsRequest) (*SubscribeToSystemAssetsResponse, error)
	// Broadcast a system asset to all subscribers
	BroadcastSystemAsset(context.Context, *BroadcastSystemAssetRequest) (*BroadcastSystemAssetResponse, error)
	mustEmbedUnimplementedAssetServiceServer()
}

// UnimplementedAssetServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAssetServiceServer struct{}

func (UnimplementedAssetServiceServer) UploadLightAsset(context.Context, *UploadLightAssetRequest) (*UploadLightAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadLightAsset not implemented")
}
func (UnimplementedAssetServiceServer) StartHeavyAssetUpload(context.Context, *StartHeavyAssetUploadRequest) (*StartHeavyAssetUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartHeavyAssetUpload not implemented")
}
func (UnimplementedAssetServiceServer) StreamAssetChunk(context.Context, *StreamAssetChunkRequest) (*StreamAssetChunkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StreamAssetChunk not implemented")
}
func (UnimplementedAssetServiceServer) CompleteAssetUpload(context.Context, *CompleteAssetUploadRequest) (*CompleteAssetUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteAssetUpload not implemented")
}
func (UnimplementedAssetServiceServer) GetAsset(context.Context, *GetAssetRequest) (*GetAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAsset not implemented")
}
func (UnimplementedAssetServiceServer) StreamAssetContent(context.Context, *StreamAssetContentRequest) (*StreamAssetContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StreamAssetContent not implemented")
}
func (UnimplementedAssetServiceServer) DeleteAsset(context.Context, *DeleteAssetRequest) (*DeleteAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAsset not implemented")
}
func (UnimplementedAssetServiceServer) ListUserAssets(context.Context, *ListUserAssetsRequest) (*ListUserAssetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserAssets not implemented")
}
func (UnimplementedAssetServiceServer) ListSystemAssets(context.Context, *ListSystemAssetsRequest) (*ListSystemAssetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSystemAssets not implemented")
}
func (UnimplementedAssetServiceServer) SubscribeToUserAssets(context.Context, *SubscribeToUserAssetsRequest) (*SubscribeToUserAssetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubscribeToUserAssets not implemented")
}
func (UnimplementedAssetServiceServer) SubscribeToSystemAssets(context.Context, *SubscribeToSystemAssetsRequest) (*SubscribeToSystemAssetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubscribeToSystemAssets not implemented")
}
func (UnimplementedAssetServiceServer) BroadcastSystemAsset(context.Context, *BroadcastSystemAssetRequest) (*BroadcastSystemAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BroadcastSystemAsset not implemented")
}
func (UnimplementedAssetServiceServer) mustEmbedUnimplementedAssetServiceServer() {}
func (UnimplementedAssetServiceServer) testEmbeddedByValue()                      {}

// UnsafeAssetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AssetServiceServer will
// result in compilation errors.
type UnsafeAssetServiceServer interface {
	mustEmbedUnimplementedAssetServiceServer()
}

func RegisterAssetServiceServer(s grpc.ServiceRegistrar, srv AssetServiceServer) {
	// If the following call pancis, it indicates UnimplementedAssetServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AssetService_ServiceDesc, srv)
}

func _AssetService_UploadLightAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadLightAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServiceServer).UploadLightAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetService_UploadLightAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServiceServer).UploadLightAsset(ctx, req.(*UploadLightAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetService_StartHeavyAssetUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartHeavyAssetUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServiceServer).StartHeavyAssetUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetService_StartHeavyAssetUpload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServiceServer).StartHeavyAssetUpload(ctx, req.(*StartHeavyAssetUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetService_StreamAssetChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamAssetChunkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServiceServer).StreamAssetChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetService_StreamAssetChunk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServiceServer).StreamAssetChunk(ctx, req.(*StreamAssetChunkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetService_CompleteAssetUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteAssetUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServiceServer).CompleteAssetUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetService_CompleteAssetUpload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServiceServer).CompleteAssetUpload(ctx, req.(*CompleteAssetUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetService_GetAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServiceServer).GetAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetService_GetAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServiceServer).GetAsset(ctx, req.(*GetAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetService_StreamAssetContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamAssetContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServiceServer).StreamAssetContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetService_StreamAssetContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServiceServer).StreamAssetContent(ctx, req.(*StreamAssetContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetService_DeleteAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServiceServer).DeleteAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetService_DeleteAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServiceServer).DeleteAsset(ctx, req.(*DeleteAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetService_ListUserAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserAssetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServiceServer).ListUserAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetService_ListUserAssets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServiceServer).ListUserAssets(ctx, req.(*ListUserAssetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetService_ListSystemAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSystemAssetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServiceServer).ListSystemAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetService_ListSystemAssets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServiceServer).ListSystemAssets(ctx, req.(*ListSystemAssetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetService_SubscribeToUserAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeToUserAssetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServiceServer).SubscribeToUserAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetService_SubscribeToUserAssets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServiceServer).SubscribeToUserAssets(ctx, req.(*SubscribeToUserAssetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetService_SubscribeToSystemAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeToSystemAssetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServiceServer).SubscribeToSystemAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetService_SubscribeToSystemAssets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServiceServer).SubscribeToSystemAssets(ctx, req.(*SubscribeToSystemAssetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetService_BroadcastSystemAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BroadcastSystemAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServiceServer).BroadcastSystemAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetService_BroadcastSystemAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServiceServer).BroadcastSystemAsset(ctx, req.(*BroadcastSystemAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AssetService_ServiceDesc is the grpc.ServiceDesc for AssetService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AssetService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "asset.v1.AssetService",
	HandlerType: (*AssetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadLightAsset",
			Handler:    _AssetService_UploadLightAsset_Handler,
		},
		{
			MethodName: "StartHeavyAssetUpload",
			Handler:    _AssetService_StartHeavyAssetUpload_Handler,
		},
		{
			MethodName: "StreamAssetChunk",
			Handler:    _AssetService_StreamAssetChunk_Handler,
		},
		{
			MethodName: "CompleteAssetUpload",
			Handler:    _AssetService_CompleteAssetUpload_Handler,
		},
		{
			MethodName: "GetAsset",
			Handler:    _AssetService_GetAsset_Handler,
		},
		{
			MethodName: "StreamAssetContent",
			Handler:    _AssetService_StreamAssetContent_Handler,
		},
		{
			MethodName: "DeleteAsset",
			Handler:    _AssetService_DeleteAsset_Handler,
		},
		{
			MethodName: "ListUserAssets",
			Handler:    _AssetService_ListUserAssets_Handler,
		},
		{
			MethodName: "ListSystemAssets",
			Handler:    _AssetService_ListSystemAssets_Handler,
		},
		{
			MethodName: "SubscribeToUserAssets",
			Handler:    _AssetService_SubscribeToUserAssets_Handler,
		},
		{
			MethodName: "SubscribeToSystemAssets",
			Handler:    _AssetService_SubscribeToSystemAssets_Handler,
		},
		{
			MethodName: "BroadcastSystemAsset",
			Handler:    _AssetService_BroadcastSystemAsset_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "asset/v1/asset.proto",
}
